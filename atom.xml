<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>若泽大数据 www.ruozedata.com</title>
  
  <subtitle>ruozedata</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2019-06-14T05:14:17.936Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>ruozedata</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>生产SparkStreaming数据零丢失最佳实践(含代码)</title>
    <link href="http://yoursite.com/2019/06/14/%E7%94%9F%E4%BA%A7SparkStreaming%E6%95%B0%E6%8D%AE%E9%9B%B6%E4%B8%A2%E5%A4%B1%E6%9C%80%E4%BD%B3%E5%AE%9E%E8%B7%B5(%E5%90%AB%E4%BB%A3%E7%A0%81)/"/>
    <id>http://yoursite.com/2019/06/14/生产SparkStreaming数据零丢失最佳实践(含代码)/</id>
    <published>2019-06-13T16:00:00.000Z</published>
    <updated>2019-06-14T05:14:17.936Z</updated>
    
    <content type="html"><![CDATA[<!-- build time:Fri Jun 14 2019 16:19:57 GMT+0800 (GMT+08:00) --><h2 id="MySQL创建存储offset的表格"><a href="#MySQL创建存储offset的表格" class="headerlink" title="MySQL创建存储offset的表格"></a>MySQL创建存储offset的表格</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; use test</span><br><span class="line">mysql&gt; create table hlw_offset(</span><br><span class="line">        topic varchar(32),</span><br><span class="line">        groupid varchar(50),</span><br><span class="line">        partitions int,</span><br><span class="line">        fromoffset bigint,</span><br><span class="line">        untiloffset bigint,</span><br><span class="line">        primary key(topic,groupid,partitions)</span><br><span class="line">        );</span><br></pre></td></tr></table></figure><a id="more"></a><h2 id="Maven依赖包"><a href="#Maven依赖包" class="headerlink" title="Maven依赖包"></a>Maven依赖包</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line">&lt;scala.version&gt;2.11.8&lt;/scala.version&gt;</span><br><span class="line">&lt;spark.version&gt;2.3.1&lt;/spark.version&gt;</span><br><span class="line">&lt;scalikejdbc.version&gt;2.5.0&lt;/scalikejdbc.version&gt;</span><br><span class="line">--------------------------------------------------</span><br><span class="line">&lt;dependency&gt;</span><br><span class="line">    &lt;groupId&gt;org.scala-lang&lt;/groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;scala-library&lt;/artifactId&gt;</span><br><span class="line">    &lt;version&gt;$&#123;scala.version&#125;&lt;/version&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br><span class="line">&lt;dependency&gt;</span><br><span class="line">    &lt;groupId&gt;org.apache.spark&lt;/groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;spark-core_2.11&lt;/artifactId&gt;</span><br><span class="line">    &lt;version&gt;$&#123;spark.version&#125;&lt;/version&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br><span class="line">&lt;dependency&gt;</span><br><span class="line">    &lt;groupId&gt;org.apache.spark&lt;/groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;spark-sql_2.11&lt;/artifactId&gt;</span><br><span class="line">    &lt;version&gt;$&#123;spark.version&#125;&lt;/version&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br><span class="line">&lt;dependency&gt;</span><br><span class="line">    &lt;groupId&gt;org.apache.spark&lt;/groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;spark-streaming_2.11&lt;/artifactId&gt;</span><br><span class="line">    &lt;version&gt;$&#123;spark.version&#125;&lt;/version&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br><span class="line">&lt;dependency&gt;</span><br><span class="line">    &lt;groupId&gt;org.apache.spark&lt;/groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;spark-streaming-kafka-0-8_2.11&lt;/artifactId&gt;</span><br><span class="line">    &lt;version&gt;$&#123;spark.version&#125;&lt;/version&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br><span class="line">&lt;dependency&gt;</span><br><span class="line">    &lt;groupId&gt;mysql&lt;/groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;mysql-connector-java&lt;/artifactId&gt;</span><br><span class="line">    &lt;version&gt;5.1.27&lt;/version&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br><span class="line">&lt;!-- https://mvnrepository.com/artifact/org.scalikejdbc/scalikejdbc --&gt;</span><br><span class="line">&lt;dependency&gt;</span><br><span class="line">    &lt;groupId&gt;org.scalikejdbc&lt;/groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;scalikejdbc_2.11&lt;/artifactId&gt;</span><br><span class="line">    &lt;version&gt;2.5.0&lt;/version&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br><span class="line">&lt;dependency&gt;</span><br><span class="line">    &lt;groupId&gt;org.scalikejdbc&lt;/groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;scalikejdbc-config_2.11&lt;/artifactId&gt;</span><br><span class="line">    &lt;version&gt;2.5.0&lt;/version&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br><span class="line">&lt;dependency&gt;</span><br><span class="line">    &lt;groupId&gt;com.typesafe&lt;/groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;config&lt;/artifactId&gt;</span><br><span class="line">    &lt;version&gt;1.3.0&lt;/version&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br><span class="line">&lt;dependency&gt;</span><br><span class="line">    &lt;groupId&gt;org.apache.commons&lt;/groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;commons-lang3&lt;/artifactId&gt;</span><br><span class="line">    &lt;version&gt;3.5&lt;/version&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br></pre></td></tr></table></figure><h2 id="实现思路"><a href="#实现思路" class="headerlink" title="实现思路"></a>实现思路</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">1）StreamingContext</span><br><span class="line">2）从kafka中获取数据(从外部存储获取offset--&gt;根据offset获取kafka中的数据)</span><br><span class="line">3）根据业务进行逻辑处理</span><br><span class="line">4）将处理结果存到外部存储中--保存offset</span><br><span class="line">5）启动程序，等待程序结束</span><br></pre></td></tr></table></figure><h2 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h2><ol><li><p>SparkStreaming主体代码如下</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br></pre></td><td class="code"><pre><span class="line">import kafka.common.TopicAndPartition</span><br><span class="line">import kafka.message.MessageAndMetadata</span><br><span class="line">import kafka.serializer.StringDecoder</span><br><span class="line">import org.apache.spark.SparkConf</span><br><span class="line">import org.apache.spark.streaming.kafka.&#123;HasOffsetRanges, KafkaUtils&#125;</span><br><span class="line">import org.apache.spark.streaming.&#123;Seconds, StreamingContext&#125;</span><br><span class="line">import scalikejdbc._</span><br><span class="line">import scalikejdbc.config._</span><br><span class="line">object JDBCOffsetApp &#123;</span><br><span class="line">  def main(args: Array[String]): Unit = &#123;</span><br><span class="line">    //创建SparkStreaming入口</span><br><span class="line">    val conf = new SparkConf().setMaster(&quot;local[2]&quot;).setAppName(&quot;JDBCOffsetApp&quot;)</span><br><span class="line">    val ssc = new StreamingContext(conf,Seconds(5))</span><br><span class="line">    //kafka消费主题</span><br><span class="line">    val topics = ValueUtils.getStringValue(&quot;kafka.topics&quot;).split(&quot;,&quot;).toSet</span><br><span class="line">    //kafka参数</span><br><span class="line">    //这里应用了自定义的ValueUtils工具类，来获取application.conf里的参数，方便后期修改</span><br><span class="line">    val kafkaParams = Map[String,String](</span><br><span class="line">      &quot;metadata.broker.list&quot;-&gt;ValueUtils.getStringValue(&quot;metadata.broker.list&quot;),</span><br><span class="line">      &quot;auto.offset.reset&quot;-&gt;ValueUtils.getStringValue(&quot;auto.offset.reset&quot;),</span><br><span class="line">      &quot;group.id&quot;-&gt;ValueUtils.getStringValue(&quot;group.id&quot;)</span><br><span class="line">    )</span><br><span class="line">    //先使用scalikejdbc从MySQL数据库中读取offset信息</span><br><span class="line">    //+------------+------------------+------------+------------+-------------+</span><br><span class="line">    //| topic      | groupid          | partitions | fromoffset | untiloffset |</span><br><span class="line">    //+------------+------------------+------------+------------+-------------+</span><br><span class="line">    //MySQL表结构如上，将“topic”，“partitions”，“untiloffset”列读取出来</span><br><span class="line">    //组成 fromOffsets: Map[TopicAndPartition, Long]，后面createDirectStream用到</span><br><span class="line">    DBs.setup()</span><br><span class="line">    val fromOffset = DB.readOnly( implicit session =&gt; &#123;</span><br><span class="line">      SQL(&quot;select * from hlw_offset&quot;).map(rs =&gt; &#123;</span><br><span class="line">        (TopicAndPartition(rs.string(&quot;topic&quot;),rs.int(&quot;partitions&quot;)),rs.long(&quot;untiloffset&quot;))</span><br><span class="line">      &#125;).list().apply()</span><br><span class="line">    &#125;).toMap</span><br><span class="line">    //如果MySQL表中没有offset信息，就从0开始消费；如果有，就从已经存在的offset开始消费</span><br><span class="line">      val messages = if (fromOffset.isEmpty) &#123;</span><br><span class="line">        println(&quot;从头开始消费...&quot;)</span><br><span class="line">        KafkaUtils.createDirectStream[String,String,StringDecoder,StringDecoder](ssc,kafkaParams,topics)</span><br><span class="line">      &#125; else &#123;</span><br><span class="line">        println(&quot;从已存在记录开始消费...&quot;)</span><br><span class="line">        val messageHandler = (mm:MessageAndMetadata[String,String]) =&gt; (mm.key(),mm.message())</span><br><span class="line">        KafkaUtils.createDirectStream[String,String,StringDecoder,StringDecoder,(String,String)](ssc,kafkaParams,fromOffset,messageHandler)</span><br><span class="line">      &#125;</span><br><span class="line">      messages.foreachRDD(rdd=&gt;&#123;</span><br><span class="line">        if(!rdd.isEmpty())&#123;</span><br><span class="line">          //输出rdd的数据量</span><br><span class="line">          println(&quot;数据统计记录为：&quot;+rdd.count())</span><br><span class="line">          //官方案例给出的获得rdd offset信息的方法，offsetRanges是由一系列offsetRange组成的数组</span><br><span class="line">//          trait HasOffsetRanges &#123;</span><br><span class="line">//            def offsetRanges: Array[OffsetRange]</span><br><span class="line">//          &#125;</span><br><span class="line">          val offsetRanges = rdd.asInstanceOf[HasOffsetRanges].offsetRanges</span><br><span class="line">          offsetRanges.foreach(x =&gt; &#123;</span><br><span class="line">            //输出每次消费的主题，分区，开始偏移量和结束偏移量</span><br><span class="line">            println(s&quot;---$&#123;x.topic&#125;,$&#123;x.partition&#125;,$&#123;x.fromOffset&#125;,$&#123;x.untilOffset&#125;---&quot;)</span><br><span class="line">           //将最新的偏移量信息保存到MySQL表中</span><br><span class="line">            DB.autoCommit( implicit session =&gt; &#123;</span><br><span class="line">              SQL(&quot;replace into hlw_offset(topic,groupid,partitions,fromoffset,untiloffset) values (?,?,?,?,?)&quot;)</span><br><span class="line">            .bind(x.topic,ValueUtils.getStringValue(&quot;group.id&quot;),x.partition,x.fromOffset,x.untilOffset)</span><br><span class="line">              .update().apply()</span><br><span class="line">            &#125;)</span><br><span class="line">          &#125;)</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;)</span><br><span class="line">    ssc.start()</span><br><span class="line">    ssc.awaitTermination()</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>自定义的ValueUtils工具类如下</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">import com.typesafe.config.ConfigFactory</span><br><span class="line">import org.apache.commons.lang3.StringUtils</span><br><span class="line">object ValueUtils &#123;</span><br><span class="line">val load = ConfigFactory.load()</span><br><span class="line">  def getStringValue(key:String, defaultValue:String=&quot;&quot;) = &#123;</span><br><span class="line">val value = load.getString(key)</span><br><span class="line">    if(StringUtils.isNotEmpty(value)) &#123;</span><br><span class="line">      value</span><br><span class="line">    &#125; else &#123;</span><br><span class="line">      defaultValue</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><ol start="3"><li><p>application.conf内容如下</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">metadata.broker.list = &quot;192.168.137.251:9092&quot;</span><br><span class="line">auto.offset.reset = &quot;smallest&quot;</span><br><span class="line">group.id = &quot;hlw_offset_group&quot;</span><br><span class="line">kafka.topics = &quot;hlw_offset&quot;</span><br><span class="line">serializer.class = &quot;kafka.serializer.StringEncoder&quot;</span><br><span class="line">request.required.acks = &quot;1&quot;</span><br><span class="line"># JDBC settings</span><br><span class="line">db.default.driver = &quot;com.mysql.jdbc.Driver&quot;</span><br><span class="line">db.default.url=&quot;jdbc:mysql://hadoop000:3306/test&quot;</span><br><span class="line">db.default.user=&quot;root&quot;</span><br><span class="line">db.default.password=&quot;123456&quot;</span><br></pre></td></tr></table></figure></li><li><p>自定义kafka producer</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">import java.util.&#123;Date, Properties&#125;</span><br><span class="line">import kafka.producer.&#123;KeyedMessage, Producer, ProducerConfig&#125;</span><br><span class="line">object KafkaProducer &#123;</span><br><span class="line">  def main(args: Array[String]): Unit = &#123;</span><br><span class="line">    val properties = new Properties()</span><br><span class="line">    properties.put(&quot;serializer.class&quot;,ValueUtils.getStringValue(&quot;serializer.class&quot;))</span><br><span class="line">    properties.put(&quot;metadata.broker.list&quot;,ValueUtils.getStringValue(&quot;metadata.broker.list&quot;))</span><br><span class="line">    properties.put(&quot;request.required.acks&quot;,ValueUtils.getStringValue(&quot;request.required.acks&quot;))</span><br><span class="line">    val producerConfig = new ProducerConfig(properties)</span><br><span class="line">    val producer = new Producer[String,String](producerConfig)</span><br><span class="line">    val topic = ValueUtils.getStringValue(&quot;kafka.topics&quot;)</span><br><span class="line">    //每次产生100条数据</span><br><span class="line">    var i = 0</span><br><span class="line">    for (i &lt;- 1 to 100) &#123;</span><br><span class="line">      val runtimes = new Date().toString</span><br><span class="line">     val messages = new KeyedMessage[String, String](topic,i+&quot;&quot;,&quot;hlw: &quot;+runtimes)</span><br><span class="line">      producer.send(messages)</span><br><span class="line">    &#125;</span><br><span class="line">    println(&quot;数据发送完毕...&quot;)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><h2 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h2><ol><li><p>启动kafka服务，并创建主题</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[hadoop@hadoop000 bin]$ ./kafka-server-start.sh -daemon /home/hadoop/app/kafka_2.11-0.10.0.1/config/server.properties</span><br><span class="line">[hadoop@hadoop000 bin]$ ./kafka-topics.sh --list --zookeeper localhost:2181/kafka</span><br><span class="line">[hadoop@hadoop000 bin]$ ./kafka-topics.sh --create --zookeeper localhost:2181/kafka --replication-factor 1 --partitions 1 --topic hlw_offset</span><br></pre></td></tr></table></figure></li><li><p>测试前查看MySQL中offset表，刚开始是个空表</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; select * from hlw_offset;</span><br><span class="line">Empty set (0.00 sec)</span><br></pre></td></tr></table></figure></li><li><p>通过kafka producer产生500条数据</p></li><li><p>启动SparkStreaming程序</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">//控制台输出结果：</span><br><span class="line">从头开始消费...</span><br><span class="line">数据统计记录为：500</span><br><span class="line">---hlw_offset,0,0,500---</span><br></pre></td></tr></table></figure></li></ol><pre><code>查看MySQL表，offset记录成功<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; select * from hlw_offset;</span><br><span class="line">+------------+------------------+------------+------------+-------------+</span><br><span class="line">| topic      | groupid          | partitions | fromoffset | untiloffset |</span><br><span class="line">+------------+------------------+------------+------------+-------------+</span><br><span class="line">| hlw_offset | hlw_offset_group |          0 |          0 |         500 |</span><br><span class="line">+------------+------------------+------------+------------+-------------+</span><br></pre></td></tr></table></figure></code></pre><ol start="5"><li><p>关闭SparkStreaming程序，再使用kafka producer生产300条数据,再次启动spark程序（如果spark从500开始消费，说明成功读取了offset，做到了只读取一次语义）</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">//控制台结果输出：</span><br><span class="line">从已存在记录开始消费...</span><br><span class="line">数据统计记录为：300</span><br><span class="line">---hlw_offset,0,500,800---</span><br></pre></td></tr></table></figure></li><li><p>查看更新后的offset MySQL数据</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; select * from hlw_offset;</span><br><span class="line">+------------+------------------+------------+------------+-------------+</span><br><span class="line">| topic      | groupid          | partitions | fromoffset | untiloffset |</span><br><span class="line">+------------+------------------+------------+------------+-------------+</span><br><span class="line">| hlw_offset | hlw_offset_group |          0 |        500 |         800 |</span><br><span class="line">+------------+------------------+------------+------------+-------------+</span><br></pre></td></tr></table></figure></li></ol><!-- rebuild by neat -->]]></content>
    
    <summary type="html">
    
      &lt;!-- build time:Fri Jun 14 2019 16:19:57 GMT+0800 (GMT+08:00) --&gt;&lt;h2 id=&quot;MySQL创建存储offset的表格&quot;&gt;&lt;a href=&quot;#MySQL创建存储offset的表格&quot; class=&quot;headerlink&quot; title=&quot;MySQL创建存储offset的表格&quot;&gt;&lt;/a&gt;MySQL创建存储offset的表格&lt;/h2&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;mysql&amp;gt; use test&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;mysql&amp;gt; create table hlw_offset(&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        topic varchar(32),&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        groupid varchar(50),&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        partitions int,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        fromoffset bigint,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        untiloffset bigint,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        primary key(topic,groupid,partitions)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        );&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
      <category term="Spark Streaming" scheme="http://yoursite.com/categories/Spark-Streaming/"/>
    
    
      <category term="spark" scheme="http://yoursite.com/tags/spark/"/>
    
      <category term="高级" scheme="http://yoursite.com/tags/%E9%AB%98%E7%BA%A7/"/>
    
      <category term="spark streaming" scheme="http://yoursite.com/tags/spark-streaming/"/>
    
  </entry>
  
  <entry>
    <title>生产常用Spark累加器剖析之四</title>
    <link href="http://yoursite.com/2019/05/31/%E7%94%9F%E4%BA%A7%E5%B8%B8%E7%94%A8Spark%E7%B4%AF%E5%8A%A0%E5%99%A8%E5%89%96%E6%9E%90%E4%B9%8B%E5%9B%9B/"/>
    <id>http://yoursite.com/2019/05/31/生产常用Spark累加器剖析之四/</id>
    <published>2019-05-30T16:00:00.000Z</published>
    <updated>2019-06-14T06:55:51.706Z</updated>
    
    <content type="html"><![CDATA[<!-- build time:Fri Jun 14 2019 16:19:57 GMT+0800 (GMT+08:00) --><h2 id="现象描述"><a href="#现象描述" class="headerlink" title="现象描述"></a>现象描述</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">val acc = sc.accumulator(0, “Error Accumulator”)</span><br><span class="line">val data = sc.parallelize(1 to 10)</span><br><span class="line">val newData = data.map(x =&gt; &#123;</span><br><span class="line">  if (x % 2 == 0) &#123;</span><br><span class="line"> accum += 1</span><br><span class="line">&#125;</span><br><span class="line">&#125;)</span><br><span class="line">newData.count</span><br><span class="line">acc.value</span><br><span class="line">newData.foreach(println)</span><br><span class="line">acc.value</span><br></pre></td></tr></table></figure><p>上述现象，会造成acc.value的最终值变为10</p><a id="more"></a><h2 id="原因分析"><a href="#原因分析" class="headerlink" title="原因分析"></a>原因分析</h2><p>Spark中的一系列transform操作都会构造成一长串的任务链，此时就需要通过一个action操作来触发（lazy的特性），accumulator也是如此。</p><ul><li>因此在一个action操作之后，调用value方法查看，是没有任何变化</li><li>第一次action操作之后，调用value方法查看，变成了5</li><li>第二次action操作之后，调用value方法查看，变成了10</li></ul><p>原因就在于第二次action操作的时候，又执行了一次累加器的操作，同个累加器，在原有的基础上又加了5，从而变成了10</p><h2 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h2><p>通过上述的现象描述，我们可以很快知道解决的方法：只进行一次action操作。基于此，我们只要切断任务之间的依赖关系就可以了，即使用cache、persist。这样操作之后，那么后续的累加器操作就不会受前面的transform操作影响了</p><h2 id="案例地址"><a href="#案例地址" class="headerlink" title="案例地址"></a>案例地址</h2><p>相关的工程案例地址在Github上：<a href="https://github.com/lemonahit/spark-train/tree/master/01-Accumulator" target="_blank" rel="noopener">https://github.com/lemonahit/spark-train/tree/master/01-Accumulator</a></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line">import org.apache.spark.&#123;SparkConf, SparkContext&#125;</span><br><span class="line">/**</span><br><span class="line">  * 使用Spark Accumulators完成Job的数据量处理</span><br><span class="line">  * 统计emp表中NULL出现的次数以及正常数据的条数 &amp; 打印正常数据的信息</span><br><span class="line">  *</span><br><span class="line">  * 若泽数据学员-呼呼呼 on 2017/11/9.</span><br><span class="line">  */</span><br><span class="line">object AccumulatorsApp &#123;</span><br><span class="line">  def main(args: Array[String]): Unit = &#123;</span><br><span class="line">    val conf = new SparkConf().setMaster(&quot;local[2]&quot;).setAppName(&quot;AccumulatorsApp&quot;)</span><br><span class="line">    val sc = new SparkContext(conf)</span><br><span class="line">    val lines = sc.textFile(&quot;E:/emp.txt&quot;)</span><br><span class="line">    // long类型的累加器值</span><br><span class="line">    val nullNum = sc.longAccumulator(&quot;NullNumber&quot;)</span><br><span class="line">    val normalData = lines.filter(line =&gt; &#123;</span><br><span class="line">      var flag = true</span><br><span class="line">      val splitLines = line.split(&quot;\t&quot;)</span><br><span class="line">      for (splitLine &lt;- splitLines)&#123;</span><br><span class="line">        if (&quot;&quot;.equals(splitLine))&#123;</span><br><span class="line">          flag = false</span><br><span class="line">          nullNum.add(1)</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">      flag</span><br><span class="line">    &#125;)</span><br><span class="line">    // 使用cache方法，将RDD的第一次计算结果进行缓存；防止后面RDD进行重复计算，导致累加器的值不准确</span><br><span class="line">    normalData.cache()</span><br><span class="line">    // 打印每一条正常数据</span><br><span class="line">    normalData.foreach(println)</span><br><span class="line">    // 打印正常数据的条数</span><br><span class="line">    println(&quot;NORMAL DATA NUMBER: &quot; + normalData.count())</span><br><span class="line">    // 打印emp表中NULL出现的次数</span><br><span class="line">    println(&quot;NULL: &quot; + nullNum.value)</span><br><span class="line">    sc.stop()</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><!-- rebuild by neat -->]]></content>
    
    <summary type="html">
    
      &lt;!-- build time:Fri Jun 14 2019 16:19:57 GMT+0800 (GMT+08:00) --&gt;&lt;h2 id=&quot;现象描述&quot;&gt;&lt;a href=&quot;#现象描述&quot; class=&quot;headerlink&quot; title=&quot;现象描述&quot;&gt;&lt;/a&gt;现象描述&lt;/h2&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;val acc = sc.accumulator(0, “Error Accumulator”)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;val data = sc.parallelize(1 to 10)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;val newData = data.map(x =&amp;gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  if (x % 2 == 0) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; accum += 1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;newData.count&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;acc.value&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;newData.foreach(println)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;acc.value&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;p&gt;上述现象，会造成acc.value的最终值变为10&lt;/p&gt;
    
    </summary>
    
      <category term="Spark Other" scheme="http://yoursite.com/categories/Spark-Other/"/>
    
    
      <category term="spark" scheme="http://yoursite.com/tags/spark/"/>
    
      <category term="累加器" scheme="http://yoursite.com/tags/%E7%B4%AF%E5%8A%A0%E5%99%A8/"/>
    
  </entry>
  
  <entry>
    <title>上海某公司的生产MySQL灾难性挽救</title>
    <link href="http://yoursite.com/2019/05/30/%E4%B8%8A%E6%B5%B7%E6%9F%90%E5%85%AC%E5%8F%B8%E7%9A%84%E7%94%9F%E4%BA%A7MySQL%E7%81%BE%E9%9A%BE%E6%80%A7%E6%8C%BD%E6%95%91/"/>
    <id>http://yoursite.com/2019/05/30/上海某公司的生产MySQL灾难性挽救/</id>
    <published>2019-05-29T16:00:00.000Z</published>
    <updated>2019-06-11T05:41:52.743Z</updated>
    
    <content type="html"><![CDATA[<!-- build time:Fri Jun 14 2019 16:19:57 GMT+0800 (GMT+08:00) --><h3 id="1-背景"><a href="#1-背景" class="headerlink" title="1.背景"></a>1.背景</h3><p>本人(<a href="www.ruozedata.com">若泽数据</a>J哥)的媳妇，是个漂亮的妹子，同时也是一枚爬虫&amp;Spark开发工程师。</p><p>前天，她的公司MySQL(阿里云ECS服务器)，由于磁盘爆了加上人为的修复，导致各种问题，然后经过2天的折腾，终于公司的大神修复不了了。于是就丢给她了，顺理成章的就丢给我了。我想说，难道J哥这么出名吗？那为了在妹子面前不能丢我们真正大佬的神技，于是乎我就很爽快接了这个MySQL故障恢复，此次故障的是一个数据盘，1T。<br>这时的我，说真的并没有意识到，此事是如此的繁杂，特此写此博文记录一下，毕竟J哥我年纪也大了。</p><p>PS:<br>这里吐槽一下，并没有周日全备+周1~周6增量备份机制哟，不然恢复就爽歪歪了。<br><a id="more"></a></p><h3 id="2-故障现象"><a href="#2-故障现象" class="headerlink" title="2.故障现象"></a>2.故障现象</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">查看表结构、查询表数据都如下抛错:</span><br><span class="line">ERROR 1030 (HY000): Got error 122 from storage engine</span><br></pre></td></tr></table></figure><p><img src="/assets/blogImg/2019530_1.png" alt="enter description here"></p><h3 id="3-尝试修复第一次，失败"><a href="#3-尝试修复第一次，失败" class="headerlink" title="3.尝试修复第一次，失败"></a>3.尝试修复第一次，失败</h3><p>3.1 使用repair命令修复表</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; repair table wenshu.wenshu2018;  </span><br><span class="line">错误依旧:</span><br><span class="line">ERROR 1030 (HY000): Got error 122 from storage engine</span><br></pre></td></tr></table></figure><p>3.2 谷歌一篇有指导意义的<br><a href="https://stackoverflow.com/questions/68029/got-error-122-from-storage-engine" target="_blank" rel="noopener">https://stackoverflow.com/questions/68029/got-error-122-from-storage-engine</a></p><ul><li>3.2.1 让其扩容数据磁盘为1.5T，试试，依旧这个错误；</li><li>3.2.2 临时目录修改为大的磁盘空间，试试，依旧这个错误；</li><li>3.2.3 取消磁盘限额，试试，依旧这个错误；</li><li>3.2.4 就是一开始的repair命令修复，试试，依旧这个错误；</li></ul><p>这时的我，也无语了，什么鬼！谷歌一页页搜索验证，没有用！</p><h3 id="4-先部署相同系统的相同版本的机器和MySQL"><a href="#4-先部署相同系统的相同版本的机器和MySQL" class="headerlink" title="4.先部署相同系统的相同版本的机器和MySQL"></a>4.先部署相同系统的相同版本的机器和MySQL</h3><p>于是J哥，快速在【若泽数据】的阿里云账号上买了1台Ubuntu 16.04.6的按量付费机器<br>迅速部署MySQL5.7.26。</p><ul><li>4.1 购买按量付费机器(假如不会购买，找J哥)</li><li>4.2 部署MySQL</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">a.更新apt-get</span><br><span class="line">$ apt-get update</span><br><span class="line"></span><br><span class="line">b.安装MySQL-Server</span><br><span class="line">$ apt-get install mysql-server</span><br><span class="line"></span><br><span class="line">之后会问你，是否要下载文件， 输入 y 就好了</span><br><span class="line">然后会出现让你设置 root 密码的界面</span><br><span class="line">输入密码: ruozedata123</span><br><span class="line">然后再重复一下，</span><br><span class="line">再次输入密码: ruozedata123</span><br><span class="line"></span><br><span class="line">c.安装MySQL-Client</span><br><span class="line">$ apt install mysql-client</span><br><span class="line"></span><br><span class="line">d.我们可以使用</span><br><span class="line">$ mysql -uroot -pruozedata123</span><br><span class="line">来连接服务器本地的 MySQL</span><br></pre></td></tr></table></figure><h3 id="5-尝试先通过frm文件恢复表结构，失败"><a href="#5-尝试先通过frm文件恢复表结构，失败" class="headerlink" title="5.尝试先通过frm文件恢复表结构，失败"></a>5.尝试先通过frm文件恢复表结构，失败</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">a. 建立一个数据库，比如wenshu.</span><br><span class="line"></span><br><span class="line">b. 在ruozedata数据库下建立同名的数据表wenshu2018，表结构随意，这里只有一个id字段，操作过程片段如下：</span><br><span class="line"></span><br><span class="line">mysql&gt; create table wenshu2018 (id bigint) engine=InnoDB;</span><br><span class="line">mysql&gt; show tables;</span><br><span class="line">+--------------+</span><br><span class="line">| Tables_in_aa |</span><br><span class="line">+--------------+</span><br><span class="line">| wenshu2018   |</span><br><span class="line">+--------------+</span><br><span class="line">1 rows in set (0.00 sec)</span><br><span class="line"></span><br><span class="line">mysql&gt; desc wenshu2018;</span><br><span class="line">+-------+------------+------+-----+---------+-------+</span><br><span class="line">| Field | Type       | Null | Key | Default | Extra |</span><br><span class="line">+-------+------------+------+-----+---------+-------+</span><br><span class="line">| id    | bigint(20) | NO   |     | NULL    |       |</span><br><span class="line">+-------+------------+------+-----+---------+-------+</span><br><span class="line">1 row in set (0.00 sec)</span><br><span class="line"></span><br><span class="line">c.停止mysql服务器，将wenshu2018.frm文件scp远程拷贝到新的正常数据库的数据目录wenshu下，覆盖掉下边同名的frm文件：</span><br><span class="line"></span><br><span class="line">d.重新启动MYSQL服务</span><br><span class="line"></span><br><span class="line">e.测试下是否恢复成功，进入wenshu数据库，用desc命令测试下，错误为:</span><br><span class="line">mysql Tablespace is missing for table `wenshu`.`wenshu2018`.</span><br></pre></td></tr></table></figure><h3 id="6-尝试有没有备份的表结构恢复数据，失败"><a href="#6-尝试有没有备份的表结构恢复数据，失败" class="headerlink" title="6.尝试有没有备份的表结构恢复数据，失败"></a>6.尝试有没有备份的表结构恢复数据，失败</h3><p>媳妇公司给出一个表结构,如下，经过测试无法恢复，原因就是无法和ibd文件匹配。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">DROP TABLE IF EXISTS cpws_batch;</span><br><span class="line">CREATE TABLE cpws_batch  (</span><br><span class="line">  id int(11) NOT NULL AUTO_INCREMENT,</span><br><span class="line">  doc_id varchar(255) CHARACTER SET utf8 COLLATE utf8_general_ci NULL DEFAULT NULL,</span><br><span class="line">  source text CHARACTER SET utf8 COLLATE utf8_general_ci NULL,</span><br><span class="line">  error_msg text CHARACTER SET utf8 COLLATE utf8_general_ci NULL,</span><br><span class="line">  crawl_time datetime NULL DEFAULT NULL,</span><br><span class="line">  status tinyint(4) NULL DEFAULT NULL COMMENT &apos;0/1 成功/失败&apos;,</span><br><span class="line">  PRIMARY KEY (id) USING BTREE,</span><br><span class="line">  INDEX ix_status(status) USING BTREE,</span><br><span class="line">  INDEX ix_doc_id(doc_id) USING BTREE</span><br><span class="line">) ENGINE = InnoDB AUTO_INCREMENT = 1 CHARACTER SET = utf8 COLLATE = utf8_general_ci ROW_FORMAT = Compact;</span><br></pre></td></tr></table></figure><h3 id="7-如何获取正确的表结构，这是【成功的第一步】"><a href="#7-如何获取正确的表结构，这是【成功的第一步】" class="headerlink" title="7.如何获取正确的表结构，这是【成功的第一步】"></a>7.如何获取正确的表结构，这是【成功的第一步】</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line">$ curl -s get.dbsake.net &gt; /tmp/dbsake</span><br><span class="line">$ chmod u+x /tmp/dbsake</span><br><span class="line">$ /tmp/dbsake frmdump /mnt/mysql_data/wenshu/wenshu2018.frm </span><br><span class="line">--</span><br><span class="line">-- Table structure for table wenshu_0_1000</span><br><span class="line">-- Created with MySQL Version 5.7.25</span><br><span class="line">--</span><br><span class="line"></span><br><span class="line">CREATE TABLE wenshu2018 (</span><br><span class="line">  id int(11) NOT NULL AUTO_INCREMENT,</span><br><span class="line">  doc_id varchar(255) DEFAULT NULL,</span><br><span class="line">  source text,</span><br><span class="line">  error_msg text,</span><br><span class="line">  crawl_time datetime DEFAULT NULL,</span><br><span class="line">  status tinyint(4) DEFAULT NULL COMMENT &apos;0/1 成功/失败&apos;,</span><br><span class="line">  PRIMARY KEY (id),</span><br><span class="line">  KEY ix_status (status),</span><br><span class="line">  KEY ix_doc_id (doc_id)</span><br><span class="line">) ENGINE=InnoDB DEFAULT CHARSET=utf8 </span><br><span class="line">/*!50100  PARTITION BY RANGE (id)</span><br><span class="line">(PARTITION p0 VALUES LESS THAN (4000000) ENGINE = InnoDB,</span><br><span class="line"> PARTITION p1 VALUES LESS THAN (8000000) ENGINE = InnoDB,</span><br><span class="line"> PARTITION p2 VALUES LESS THAN (12000000) ENGINE = InnoDB,</span><br><span class="line"> PARTITION p3 VALUES LESS THAN (16000000) ENGINE = InnoDB,</span><br><span class="line"> PARTITION p4 VALUES LESS THAN (20000000) ENGINE = InnoDB,</span><br><span class="line"> PARTITION p5 VALUES LESS THAN (24000000) ENGINE = InnoDB,</span><br><span class="line"> PARTITION p6 VALUES LESS THAN (28000000) ENGINE = InnoDB,</span><br><span class="line"> PARTITION p7 VALUES LESS THAN (32000000) ENGINE = InnoDB,</span><br><span class="line"> PARTITION p8 VALUES LESS THAN (36000000) ENGINE = InnoDB,</span><br><span class="line"> PARTITION p9 VALUES LESS THAN (40000000) ENGINE = InnoDB,</span><br><span class="line"> PARTITION p10 VALUES LESS THAN (44000000) ENGINE = InnoDB,</span><br><span class="line"> PARTITION p11 VALUES LESS THAN MAXVALUE ENGINE = InnoDB) */;</span><br></pre></td></tr></table></figure><p>对比Step6的表结构，感觉就差分区设置而已，坑！<br>这时，J哥有种信心，恢复应该小菜了。</p><h3 id="8-由于恢复ECS机器是若泽数据账号购买，这时需要从媳妇公司账号的机器传输这张表ibd文件，差不多300G，尽管我们是阿里云的同一个区域同一个可用区，加上调大外网带宽传输，依然不能等待这么久传输！"><a href="#8-由于恢复ECS机器是若泽数据账号购买，这时需要从媳妇公司账号的机器传输这张表ibd文件，差不多300G，尽管我们是阿里云的同一个区域同一个可用区，加上调大外网带宽传输，依然不能等待这么久传输！" class="headerlink" title="8.由于恢复ECS机器是若泽数据账号购买，这时需要从媳妇公司账号的机器传输这张表ibd文件，差不多300G，尽管我们是阿里云的同一个区域同一个可用区，加上调大外网带宽传输，依然不能等待这么久传输！"></a>8.由于恢复ECS机器是若泽数据账号购买，这时需要从媳妇公司账号的机器传输这张表ibd文件，差不多300G，尽管我们是阿里云的同一个区域同一个可用区，加上调大外网带宽传输，依然不能等待这么久传输！</h3><h3 id="9-要求媳妇公司购买同账户下同区域的可用区域的云主机，系统盘300G，没有买数据盘，先尝试做恢复看看，能不能成功恢复第一个表哟？【成功的第二步】"><a href="#9-要求媳妇公司购买同账户下同区域的可用区域的云主机，系统盘300G，没有买数据盘，先尝试做恢复看看，能不能成功恢复第一个表哟？【成功的第二步】" class="headerlink" title="9.要求媳妇公司购买同账户下同区域的可用区域的云主机，系统盘300G，没有买数据盘，先尝试做恢复看看，能不能成功恢复第一个表哟？【成功的第二步】"></a>9.要求媳妇公司购买同账户下同区域的可用区域的云主机，系统盘300G，没有买数据盘，先尝试做恢复看看，能不能成功恢复第一个表哟？【成功的第二步】</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line">9.1首先需要一个跟要恢复的表结构完全一致的表，至关重要</span><br><span class="line">mysql&gt; CREATE DATABASE wenshu /*!40100 DEFAULT CHARACTER SET utf8mb4 */;</span><br><span class="line">USE wenshu;</span><br><span class="line">CREATE TABLE wenshu2018 (</span><br><span class="line">  id int(11) NOT NULL AUTO_INCREMENT,</span><br><span class="line">  doc_id varchar(255) DEFAULT NULL,</span><br><span class="line">  source text,</span><br><span class="line">  error_msg text,</span><br><span class="line">  crawl_time datetime DEFAULT NULL,</span><br><span class="line">  status tinyint(4) DEFAULT NULL COMMENT &apos;0/1 成功/失败&apos;,</span><br><span class="line">  PRIMARY KEY (id),</span><br><span class="line">  KEY ix_status (status),</span><br><span class="line">  KEY ix_doc_id (doc_id)</span><br><span class="line">) ENGINE=InnoDB DEFAULT CHARSET=utf8 </span><br><span class="line">/*!50100  PARTITION BY RANGE (id)</span><br><span class="line">(PARTITION p0 VALUES LESS THAN (4000000) ENGINE = InnoDB,</span><br><span class="line"> PARTITION p1 VALUES LESS THAN (8000000) ENGINE = InnoDB,</span><br><span class="line"> PARTITION p2 VALUES LESS THAN (12000000) ENGINE = InnoDB,</span><br><span class="line"> PARTITION p3 VALUES LESS THAN (16000000) ENGINE = InnoDB,</span><br><span class="line"> PARTITION p4 VALUES LESS THAN (20000000) ENGINE = InnoDB,</span><br><span class="line"> PARTITION p5 VALUES LESS THAN (24000000) ENGINE = InnoDB,</span><br><span class="line"> PARTITION p6 VALUES LESS THAN (28000000) ENGINE = InnoDB,</span><br><span class="line"> PARTITION p7 VALUES LESS THAN (32000000) ENGINE = InnoDB,</span><br><span class="line"> PARTITION p8 VALUES LESS THAN (36000000) ENGINE = InnoDB,</span><br><span class="line"> PARTITION p9 VALUES LESS THAN (40000000) ENGINE = InnoDB,</span><br><span class="line"> PARTITION p10 VALUES LESS THAN (44000000) ENGINE = InnoDB,</span><br><span class="line"> PARTITION p11 VALUES LESS THAN MAXVALUE ENGINE = InnoDB) */;</span><br><span class="line"></span><br><span class="line">9.2然后DISCARD TABLESPACE</span><br><span class="line">mysql&gt; ALTER TABLE wenshu.wenshu2018 DISCARD TABLESPACE;</span><br><span class="line"></span><br><span class="line">9.3把要恢复的ibd文件复制到mysql的data文件夹下，修改用户和用户组为mysql</span><br><span class="line">$ scp wenshu2018#P#p*.ibd  新建机器IP:/mnt/mysql_data/wenshu/</span><br><span class="line">$ chown -R mysql:mysql /mnt/mysql_data/wenshu/wenshu2018#P#p*.ibd</span><br><span class="line"></span><br><span class="line">9.4然后执行IMPORT TABLESPACE</span><br><span class="line">mysql&gt; ALTER TABLE wenshu.wenshu2018 IMPORT TABLESPACE;</span><br><span class="line"></span><br><span class="line">9.5等待，有戏，耗时3h，这时我相信应该么问题的</span><br><span class="line"></span><br><span class="line">9.6查询数据，果然恢复有结果，心里暗暗自喜</span><br><span class="line">mysql&gt; select * from wenshu.wenshu2018 limit 1\G;</span><br></pre></td></tr></table></figure><h3 id="10-给媳妇公司两个选择，这个很重要，在自己公司给领导做选择时，也要应该这样，多项选择，利弊说明，供对方选择"><a href="#10-给媳妇公司两个选择，这个很重要，在自己公司给领导做选择时，也要应该这样，多项选择，利弊说明，供对方选择" class="headerlink" title="10.给媳妇公司两个选择，这个很重要，在自己公司给领导做选择时，也要应该这样，多项选择，利弊说明，供对方选择"></a>10.给媳妇公司两个选择，这个很重要，在自己公司给领导做选择时，也要应该这样，多项选择，利弊说明，供对方选择</h3><ul><li>10.1 重新购买一台新的服务器，在初始化配置时，就加上1块1.5T的大磁盘。好处是无需挂盘操作，坏处是需要重新做第一个表，浪费3h；</li><li>10.2 购买1.5T的大磁盘，挂载这个机器上。好处是无需再做一次第一个表，坏处是需要修改mysql的数据目录指向为这个大磁盘。系统盘扩容最大也就500G，所以必须外加一个数据盘1.5T容量。</li></ul><p>所以J哥是职场老手了！贼笑！</p><h3 id="11-服务器加数据磁盘，1-5T，购买、挂载、格式化"><a href="#11-服务器加数据磁盘，1-5T，购买、挂载、格式化" class="headerlink" title="11.服务器加数据磁盘，1.5T，购买、挂载、格式化"></a>11.服务器加数据磁盘，1.5T，购买、挂载、格式化</h3><p>接下来的操作是我媳妇独立完成的，这里表扬一下:</p><ul><li>11.1 先买云盘 <a href="https://help.aliyun.com/document_detail/25445.html?spm=a2c4g.11186623.6.753.40132c30MbE8n8" target="_blank" rel="noopener">https://help.aliyun.com/document_detail/25445.html?spm=a2c4g.11186623.6.753.40132c30MbE8n8</a></li><li>11.2 再挂载云盘 到对应机器 <a href="https://help.aliyun.com/document_detail/25446.html?spm=a2c4g.11186623.6.756.30874f291pXOwB" target="_blank" rel="noopener">https://help.aliyun.com/document_detail/25446.html?spm=a2c4g.11186623.6.756.30874f291pXOwB</a></li><li>11.3 最后Linux格式化数据盘 <a href="https://help.aliyun.com/document_detail/116650.html?spm=a2c4g.11186623.6.759.11f67d562yD9Lr" target="_blank" rel="noopener">https://help.aliyun.com/document_detail/116650.html?spm=a2c4g.11186623.6.759.11f67d562yD9Lr</a></li></ul><p>图2所示，df -h命令查看，大磁盘/dev/vdb1<br><img src="/assets/blogImg/2019530_2.png" alt="enter description here"></p><h3 id="12-MySQL修改数据目录为大磁盘，重新启动失败，解决"><a href="#12-MySQL修改数据目录为大磁盘，重新启动失败，解决" class="headerlink" title="12.MySQL修改数据目录为大磁盘，重新启动失败，解决"></a>12.MySQL修改数据目录为大磁盘，重新启动失败，解决</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line">12.1 修改数据目录为大磁盘</span><br><span class="line">$ mkdir -p /mnt/mysql_data</span><br><span class="line">$ chown mysql:mysql /mnt/mysql_data</span><br><span class="line">$ vi /etc/mysql/mysql.conf.d/mysqld.cnf</span><br><span class="line">datadir         = /mnt/mysql_data</span><br><span class="line"></span><br><span class="line">12.2 无法启动mysql</span><br><span class="line">$ service mysql restart</span><br><span class="line">无法启动成功，查看日志</span><br><span class="line">2019-05-28T03:41:31.181777Z 0 [Note] InnoDB: If the mysqld execution user is authorized, page cleaner thread priority can be changed. See the man page of setpriority().</span><br><span class="line">2019-05-28T03:41:31.191805Z 0 [ERROR] InnoDB: The innodb_system data file &apos;ibdata1&apos; must be writable</span><br><span class="line">2019-05-28T03:41:31.192055Z 0 [ERROR] InnoDB: The innodb_system data file &apos;ibdata1&apos; must be writable</span><br><span class="line">2019-05-28T03:41:31.192119Z 0 [ERROR] InnoDB: Plugin initialization aborted with error Generic error</span><br><span class="line"></span><br><span class="line">12.3 百思不得其解，CentOS也没有这么麻烦，Ubuntu难道这么搞事吗？</span><br><span class="line">12.4 新增mysqld内容</span><br><span class="line">$ vi /etc/apparmor.d/local/usr.sbin.mysqld</span><br><span class="line"># Site-specific additions and overrides for usr.sbin.mysqld.</span><br><span class="line"># For more details, please see /etc/apparmor.d/local/README.</span><br><span class="line">/mnt/mysql_data/ r,</span><br><span class="line">/mnt/mysql_data/** rwk,</span><br><span class="line"></span><br><span class="line">12.5 reload apparmor的配置并重启</span><br><span class="line">$ service apparmor reload </span><br><span class="line">$ service apparmor restart </span><br><span class="line"> </span><br><span class="line">12.6 重启mysql</span><br><span class="line">$ service mysql restart</span><br><span class="line">如果启动不了，查看/var/log/mysql/error.log</span><br><span class="line">如果出现：InnoDB: The innodb_system data file &apos;ibdata1&apos; must be writable 仔细核对目录权限</span><br><span class="line"></span><br><span class="line">12.7 进mysql查询数据验证，成功</span><br><span class="line">select * from wenshu.wenshu2018 limit 1\G;</span><br></pre></td></tr></table></figure><h3 id="13-开始指导我媳妇做第二个、第三个表，批量恢复，耗时共计16小时，全部恢复完成。"><a href="#13-开始指导我媳妇做第二个、第三个表，批量恢复，耗时共计16小时，全部恢复完成。" class="headerlink" title="13.开始指导我媳妇做第二个、第三个表，批量恢复，耗时共计16小时，全部恢复完成。"></a>13.开始指导我媳妇做第二个、第三个表，批量恢复，耗时共计16小时，全部恢复完成。</h3><h2 id="最后-若泽数据J哥总结一下"><a href="#最后-若泽数据J哥总结一下" class="headerlink" title="最后@若泽数据J哥总结一下:"></a>最后@若泽数据J哥总结一下:</h2><ul><li>表结构正确的获取；</li><li>机器磁盘规划提前思考；</li><li>ibd数据文件恢复；</li><li>最后加上一个聪明的媳妇！(PS:老板会给媳妇涨薪水不🙅‍♂️)</li></ul><!-- rebuild by neat -->]]></content>
    
    <summary type="html">
    
      &lt;!-- build time:Fri Jun 14 2019 16:19:57 GMT+0800 (GMT+08:00) --&gt;&lt;h3 id=&quot;1-背景&quot;&gt;&lt;a href=&quot;#1-背景&quot; class=&quot;headerlink&quot; title=&quot;1.背景&quot;&gt;&lt;/a&gt;1.背景&lt;/h3&gt;&lt;p&gt;本人(&lt;a href=&quot;www.ruozedata.com&quot;&gt;若泽数据&lt;/a&gt;J哥)的媳妇，是个漂亮的妹子，同时也是一枚爬虫&amp;amp;Spark开发工程师。&lt;/p&gt;&lt;p&gt;前天，她的公司MySQL(阿里云ECS服务器)，由于磁盘爆了加上人为的修复，导致各种问题，然后经过2天的折腾，终于公司的大神修复不了了。于是就丢给她了，顺理成章的就丢给我了。我想说，难道J哥这么出名吗？那为了在妹子面前不能丢我们真正大佬的神技，于是乎我就很爽快接了这个MySQL故障恢复，此次故障的是一个数据盘，1T。&lt;br&gt;这时的我，说真的并没有意识到，此事是如此的繁杂，特此写此博文记录一下，毕竟J哥我年纪也大了。&lt;/p&gt;&lt;p&gt;PS:&lt;br&gt;这里吐槽一下，并没有周日全备+周1~周6增量备份机制哟，不然恢复就爽歪歪了。&lt;br&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="其他组件" scheme="http://yoursite.com/categories/%E5%85%B6%E4%BB%96%E7%BB%84%E4%BB%B6/"/>
    
      <category term="故障案例" scheme="http://yoursite.com/categories/%E6%95%85%E9%9A%9C%E6%A1%88%E4%BE%8B/"/>
    
    
      <category term="架构" scheme="http://yoursite.com/tags/%E6%9E%B6%E6%9E%84/"/>
    
      <category term="环境搭建" scheme="http://yoursite.com/tags/%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/"/>
    
      <category term="案例" scheme="http://yoursite.com/tags/%E6%A1%88%E4%BE%8B/"/>
    
  </entry>
  
  <entry>
    <title>入门Impala只需此篇</title>
    <link href="http://yoursite.com/2019/05/17/%E5%85%A5%E9%97%A8Impala%E5%8F%AA%E9%9C%80%E6%AD%A4%E7%AF%87%20(1)/"/>
    <id>http://yoursite.com/2019/05/17/入门Impala只需此篇 (1)/</id>
    <published>2019-05-16T16:00:00.000Z</published>
    <updated>2019-06-14T07:20:18.781Z</updated>
    
    <content type="html"><![CDATA[<!-- build time:Fri Jun 14 2019 16:19:57 GMT+0800 (GMT+08:00) --><h2 id="学习路径"><a href="#学习路径" class="headerlink" title="学习路径"></a>学习路径</h2><ul><li>官网：<a href="http://impala.apache.org/" target="_blank" rel="noopener">http://impala.apache.org/</a></li><li>使用手册：<a href="http://impala.apache.org/docs/build/html/index.html" target="_blank" rel="noopener">http://impala.apache.org/docs/build/html/index.html</a></li><li>Sql：<a href="http://impala.apache.org/docs/build/html/topics/impala_langref_sql.html" target="_blank" rel="noopener">http://impala.apache.org/docs/build/html/topics/impala_langref_sql.html</a></li><li>窗口函数：<a href="http://impala.apache.org/docs/build/html/topics/impala_functions.html" target="_blank" rel="noopener">http://impala.apache.org/docs/build/html/topics/impala_functions.html</a></li><li>基本操作：<a href="http://impala.apache.org/docs/build/html/topics/impala_tutorial.html" target="_blank" rel="noopener">http://impala.apache.org/docs/build/html/topics/impala_tutorial.html</a></li><li>impala-shell：<a href="http://impala.apache.org/docs/build/html/topics/impala_impala_shell.html" target="_blank" rel="noopener">http://impala.apache.org/docs/build/html/topics/impala_impala_shell.html</a></li></ul><a id="more"></a><h2 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h2><ol><li>Apache Impala是Apache Hadoop的开源原生分析数据库;</li><li>Impala于2017年11月15日从Apache孵化成顶级项目。在以前称为“Cloudera Impala”的文档中，现在的官方名称是“Apache Impala”。</li><li>Impala为Hadoop上的BI /分析查询提供低延迟和高并发性（不是由Apache Hive等批处理框架提供）。即使在多租户环境中，Impala也可以线性扩展。</li><li>利用与Hadoop部署相同的文件和数据格式以及元数据，安全性和资源管理框架 - 无冗余基础架构或数据转换/复制。</li><li>对于Apache Hive用户，Impala使用相同的元数据和ODBC驱动程序。与Hive一样，Impala支持SQL</li><li>Impala与本机Hadoop安全性和Kerberos集成以进行身份验证，通过Sentry模块，您可以确保为正确的用户和应用程序授权使用正确的数据。</li><li>使用Impala，无论是使用SQL查询还是BI应用程序，更多用户都可以通过单个存储库和元数据存储进行交互</li></ol><h2 id="什么是Impala"><a href="#什么是Impala" class="headerlink" title="什么是Impala"></a>什么是Impala</h2><ol><li>Impala是一种面向实时或者面向批处理的框架;</li><li>Impala的数据可以存储在HDFS,HBase和Amazon Simple Storage Servive(S3)中;</li><li>Impala和Hive使用了相同的元数据存储;</li><li>可以通过SQL的语法,JDBC,ODBC和用户界面(Hue中的Impala进行查询);</li></ol><p>我们知道Hive底层是MapReduce,在这里就可以看出区别了,Impala并不是为了替换构建在MapReduce上的批处理框架,就像我们说的Hive,Hive适用于长时间运行的批处理作业,例如涉及到Extract,Transform和Load(ETL)类型的作业.而Impala是进行实时处理的.</p><h2 id="优势"><a href="#优势" class="headerlink" title="优势"></a>优势</h2><ol><li>通过sql进行大量数据处理;</li><li>可以进行分布式部署,进行分布式查询;</li><li>可以和不同组件之间进行数据共享,不需要复制或者导入,导出等步骤,例如:可以先使用hive对数据进行ETL操作然后使用Impala进行查询.因为Impala和hive公用同一个元数据,这样就可以方便的对hive生成的数据进行分析.</li></ol><h2 id="Impala如何与Apache-Hadoop一起使用"><a href="#Impala如何与Apache-Hadoop一起使用" class="headerlink" title="Impala如何与Apache Hadoop一起使用"></a>Impala如何与Apache Hadoop一起使用</h2><ul><li><p>Impala解决方案由以下组件组成：</p><ol><li>客户端 - 包括Hue，ODBC客户端，JDBC客户端和Impala Shell的实体都可以与Impala进行交互。这些接口通常用于发出查询或完成管理任务，例如连接到Impala。</li><li>Hive Metastore - 存储有关Impala可用数据的信息。例如，Metastore让Impala知道哪些数据库可用，以及这些数据库的结构是什么。在创建，删除和更改模式对象，将数据加载到表中等等时，通过Impala SQL语句，相关的元数据更改将通过Impala 1.2中引入的专用目录服务自动广播到所有Impala节点。</li><li>Impala - 此过程在DataNodes上运行，协调并执行查询。Impala的每个实例都可以接收，计划和协调来自Impala客户端的查询。</li><li><p>HBase和HDFS -数据的存储。</p><p>下面这幅图应该说的很清楚了:</p></li></ol></li></ul><p><img src="/assets/blogImg/impala.png" alt="enter description here"></p><h2 id="使用Impala执行的查询流程如下："><a href="#使用Impala执行的查询流程如下：" class="headerlink" title="使用Impala执行的查询流程如下："></a>使用Impala执行的查询流程如下：</h2><ul><li>用户应用程序通过ODBC或JDBC向Impala发送SQL查询，这些查询提供标准化的查询接口。用户应用程序可以连接到impalad群集中的任何应用程序。这impalad将成为查询的协调者。</li><li>Impala会解析查询并对其进行分析，以确定impalad整个群集中的实例需要执行哪些任务 。计划执行以实现最佳效率。</li><li>本地impalad实例访问HDFS和HBase等服务以提供数据。</li><li>每个都impalad将数据返回给协调impalad，协调将这些结果发送给客户端。</li></ul><h2 id="impala-shell"><a href="#impala-shell" class="headerlink" title="impala-shell"></a>impala-shell</h2><p>使用Impala shell工具（impala-shell）来设置数据库和表，插入数据和发出查询</p><table><thead><tr><th>选项</th><th>描述</th></tr></thead><tbody><tr><td>-B or –delimited</td><td>导致使用分隔符分割的普通文本格式打印查询结果。当为其他 Hadoop 组件生成数据时有用。对于避免整齐打印所有输出的性能开销有用，特别是使用查询返回大量的结果集进行基准测试的时候。使用 –output_delimiter 选项指定分隔符。使用 -B 选项常用于保存所有查询结果到文件里而不是打印到屏幕上。在 Impala 1.0.1 中添加</td></tr><tr><td>–print_header</td><td>是否打印列名。整齐打印时是默认启用。同时使用 -B 选项时，在首行打印列名</td></tr><tr><td>-o filename or –output_file filename</td><td>保存所有查询结果到指定的文件。通常用于保存在命令行使用 -q 选项执行单个查询时的查询结果。对交互式会话同样生效；此时你只会看到获取了多少行数据，但看不到实际的数据集。当结合使用 -q 和 -o 选项时，会自动将错误信息输出到 /dev/null(To suppress these incidental messages when combining the -q and -o options, redirect stderr to /dev/null)。在 Impala 1.0.1 中添加</td></tr><tr><td>–output_delimiter=character</td><td>当使用 -B 选项以普通文件格式打印查询结果时，用于指定字段之间的分隔符(Specifies the character to use as a delimiter between fields when query results are printed in plain format by the -B option)。默认是制表符 tab (’\t’)。假如输出结果中包含了分隔符，该列会被引起且/或转义( If an output value contains the delimiter character, that field is quoted and/or escaped)。在 Impala 1.0.1 中添加</td></tr><tr><td>-p or –show_profiles</td><td>对 shell 中执行的每一个查询，显示其查询执行计划 (与 EXPLAIN 语句输出相同) 和发生低级故障(low-level breakdown)的执行步骤的更详细的信息</td></tr><tr><td>-h or –help</td><td>显示帮助信息</td></tr><tr><td>-i hostname or –impalad=hostname</td><td>指定连接运行 impalad 守护进程的主机。默认端口是 21000。你可以连接到集群中运行 impalad 的任意主机。假如你连接到 impalad 实例通过 –fe_port 标志使用了其他端口，则应当同时提供端口号，格式为 hostname:port</td></tr><tr><td>-q query or –query=query</td><td>从命令行中传递一个查询或其他 shell 命令。执行完这一语句后 shell 会立即退出。限制为单条语句，可以是 SELECT, CREATE TABLE, SHOW TABLES, 或其他 impala-shell 认可的语句。因为无法传递 USE 语句再加上其他查询，对于 default 数据库之外的表，应在表名前加上数据库标识符(或者使用 -f 选项传递一个包含 USE 语句和其他查询的文件)</td></tr><tr><td>-f query_file or –query_file=query_file</td><td>传递一个文件中的 SQL 查询。文件内容必须以分号分隔</td></tr><tr><td>-k or –kerberos</td><td>当连接到 impalad 时使用 Kerberos 认证。如果要连接的 impalad 实例不支持 Kerberos，将显示一个错误</td></tr><tr><td>-s kerberos_service_name or –kerberos_service_name=name</td><td>Instructs impala-shell to authenticate to a particular impalad service principal. 如何没有设置 kerberos_service_name ，默认使用 impala。如何启用了本选项，而试图建立不支持Kerberos 的连接时，返回一个错误(If this option is used in conjunction with a connection in which Kerberos is not supported, errors are returned)</td></tr><tr><td>-V or –verbose</td><td>启用详细输出</td></tr><tr><td>–quiet</td><td>关闭详细输出</td></tr><tr><td>-v or –version</td><td>显示版本信息</td></tr><tr><td>-c</td><td>查询执行失败时继续执行</td></tr><tr><td>-r or –refresh_after_connect</td><td>建立连接后刷新 Impala 元数据，与建立连接后执行 REFRESH 语句效果相同</td></tr><tr><td>-d default_db or –database=default_db</td><td>指定启动后使用的数据库，与建立连接后使用 USE 语句选择数据库作用相同，如果没有指定，那么使用 default 数据库</td></tr><tr><td>-l</td><td>启用 LDAP 认证</td></tr><tr><td>-u</td><td>当使用 -l 选项启用 LDAP 认证时，提供用户名(使用短用户名，而不是完整的 LDAP 专有名称(distinguished name)) ，shell 会提示输入密码</td></tr></tbody></table><h2 id="概念与架构"><a href="#概念与架构" class="headerlink" title="概念与架构"></a>概念与架构</h2><h3 id="Impala-Server的组件"><a href="#Impala-Server的组件" class="headerlink" title="Impala Server的组件"></a>Impala Server的组件</h3><p>Impala服务器是分布式，大规模并行处理（MPP）数据库引擎。它由在群集中的特定主机上运行的不同守护程序进程组成。</p><p><strong>The Impala Daemon</strong></p><p>Impala的核心组件是Impala daemon。Impala daemon执行的一些关键功能是：</p><ul><li>读取和写入数据文件。</li><li>接受从impala-shell命令，Hue，JDBC或ODBC传输的查询。</li><li>并行化查询并在群集中分配工作。</li><li>将中间查询结果发送回中央协调器。</li><li>可以通过以下方式之一部署Impala守护程序：<ol><li>HDFS和Impala位于同一位置，每个Impala守护程序与DataNode在同一主机上运行。</li><li>Impala单独部署在计算群集中，可从HDFS，S3，ADLS等远程读取。Impala守护进程与StateStore保持持续通信，以确认哪些守护进程是健康的并且可以接受新工作。</li></ol></li></ul><p><b>在Impala 2.9及更高版本中，您可以控制哪些主机充当查询协调器，哪些主机充当查询执行程序，以提高大型群集上高度并发工作负载的可伸缩性。</b></p><p><strong>Impala Statestore</strong></p><p>Impala Statestore进程检查集群中所有Impala daemon的运行状况，并把信息反馈给Impala daemon进程。您只需要在群集中的一台主机上执行此类过程。如果Impala守护程序由于硬件故障，网络错误，软件问题或其他原因而脱机，则StateStore会通知所有其他Impala daemon程序，以便将来的查询可以避免向无法访问的Impala守护程序发出请求。</p><p>因为StateStore的目的是在出现问题时提供帮助并向协调器广播元数据，因此对Impala集群的正常操作并不总是至关重要的。如果StateStore未运行或无法访问，则在处理Impala已知的数据时，Impala守护程序会像往常一样继续运行和分配工作。如果其他Impala守护程序失败，则群集变得不那么健壮，并且当StateStore脱机时，元数据变得不那么一致。当StateStore重新联机时，它会重新建立与Impala守护程序的通信并恢复其监视和广播功能。</p><p><strong>The Impala Catalog Service</strong></p><p>Impala Catalog Service进程可以把Impala SQL语句中的元数据更改信息反馈到集群中的所有Impala守护程序。只需要在群集中的一台主机上执行此类过程。因为请求是通过StateStore守护程序传递的，所以要在同一主机上运行statestored和catalogd服务。</p><p>当通过Impala发出的语句执行元数据更改时，Impala Catalog Service进程避免了REFRESH和INVALIDATE METADATA语句的使用,该进程可以为我们更新元数据信息。</p><p><strong>使用–load_catalog_in_background选项控制何时加载表的元数据。</strong></p><ul><li>如果设置为false，则在第一次引用表时会加载表的元数据。这意味着第一次运行可能比后续运行慢。在impala2.2开始，默认load_catalog_in_background是 false。</li><li>如果设置为true，即使没有查询需要该元数据，目录服务也会尝试加载表的元数据。因此，当运行需要它的第一个查询时，可能已经加载了元数据。但是，由于以下原因，我们建议不要将选项设置为true。</li></ul><p>后台加载可能会干扰查询特定的元数据加载。这可能在启动时或在使元数据无效之后发生，持续时间取决于元数据的数量，并且可能导致看似随机的长时间运行的查询难以诊断。</p><p>Impala可能会加载从未使用过的表的元数据，这会增加目录服务和Impala守护程序的目录大小，从而增加内存使用量。</p><p>负载均衡和高可用性的大多数注意事项适用于impalad守护程序。该statestored和catalogd守护进程不具备高可用性的特殊要求，因为这些守护进程的问题不会造成数据丢失。如果这些守护程序由于特定主机上的中断而变得不可用，则可以停止Impala服务，删除Impala StateStore和Impala目录服务器角色，在其他主机上添加角色，然后重新启动Impala服务。</p><h2 id="数据类型"><a href="#数据类型" class="headerlink" title="数据类型"></a>数据类型</h2><p>Impala支持一组数据类型，可用于表列，表达式值，函数参数和返回值。</p><p>注意： 目前，Impala仅支持标量类型，而不支持复合类型或嵌套类型。访问包含任何具有不受支持类型的列的表会导致错误。</p><p>有关Impala和Hive数据类型之间的差异，请参阅:<br><a href="http://impala.apache.org/docs/build/html/topics/impala_langref_unsupported.html#langref_hiveql_delta" target="_blank" rel="noopener">http://impala.apache.org/docs/build/html/topics/impala_langref_unsupported.html#langref_hiveql_delta</a></p><ul><li>ARRAY复杂类型（仅限Impala 2.3或更高版本）</li><li>BIGINT数据类型</li><li>BOOLEAN数据类型</li><li>CHAR数据类型（仅限Impala 2.0或更高版本）</li><li>DECIMAL数据类型（仅限Impala 3.0或更高版本）</li><li>双数据类型</li><li>FLOAT数据类型</li><li>INT数据类型</li><li>MAP复杂类型（仅限Impala 2.3或更高版本）</li><li>REAL数据类型</li><li>SMALLINT数据类型</li><li>STRING数据类型</li><li>STRUCT复杂类型（仅限Impala 2.3或更高版本）</li><li>TIMESTAMP数据类型</li><li>TINYINT数据类型</li><li>VARCHAR数据类型（仅限Impala 2.0或更高版本）</li><li>复杂类型（仅限Impala 2.3或更高版本）</li></ul><!-- rebuild by neat -->]]></content>
    
    <summary type="html">
    
      &lt;!-- build time:Fri Jun 14 2019 16:19:57 GMT+0800 (GMT+08:00) --&gt;&lt;h2 id=&quot;学习路径&quot;&gt;&lt;a href=&quot;#学习路径&quot; class=&quot;headerlink&quot; title=&quot;学习路径&quot;&gt;&lt;/a&gt;学习路径&lt;/h2&gt;&lt;ul&gt;&lt;li&gt;官网：&lt;a href=&quot;http://impala.apache.org/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;http://impala.apache.org/&lt;/a&gt;&lt;/li&gt;&lt;li&gt;使用手册：&lt;a href=&quot;http://impala.apache.org/docs/build/html/index.html&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;http://impala.apache.org/docs/build/html/index.html&lt;/a&gt;&lt;/li&gt;&lt;li&gt;Sql：&lt;a href=&quot;http://impala.apache.org/docs/build/html/topics/impala_langref_sql.html&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;http://impala.apache.org/docs/build/html/topics/impala_langref_sql.html&lt;/a&gt;&lt;/li&gt;&lt;li&gt;窗口函数：&lt;a href=&quot;http://impala.apache.org/docs/build/html/topics/impala_functions.html&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;http://impala.apache.org/docs/build/html/topics/impala_functions.html&lt;/a&gt;&lt;/li&gt;&lt;li&gt;基本操作：&lt;a href=&quot;http://impala.apache.org/docs/build/html/topics/impala_tutorial.html&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;http://impala.apache.org/docs/build/html/topics/impala_tutorial.html&lt;/a&gt;&lt;/li&gt;&lt;li&gt;impala-shell：&lt;a href=&quot;http://impala.apache.org/docs/build/html/topics/impala_impala_shell.html&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;http://impala.apache.org/docs/build/html/topics/impala_impala_shell.html&lt;/a&gt;&lt;/li&gt;&lt;/ul&gt;
    
    </summary>
    
      <category term="Impala" scheme="http://yoursite.com/categories/Impala/"/>
    
    
      <category term="Impala" scheme="http://yoursite.com/tags/Impala/"/>
    
  </entry>
  
  <entry>
    <title>若泽数据-CDH5.16.1集群企业真正离线部署(全网最细，配套视频，生产可实践)</title>
    <link href="http://yoursite.com/2019/05/13/%E8%8B%A5%E6%B3%BD%E6%95%B0%E6%8D%AE-CDH5.16.1%E9%9B%86%E7%BE%A4%E4%BC%81%E4%B8%9A%E7%9C%9F%E6%AD%A3%E7%A6%BB%E7%BA%BF%E9%83%A8%E7%BD%B2(%E5%85%A8%E7%BD%91%E6%9C%80%E7%BB%86%EF%BC%8C%E9%85%8D%E5%A5%97%E8%A7%86%E9%A2%91%EF%BC%8C%E7%94%9F%E4%BA%A7%E5%8F%AF%E5%AE%9E%E8%B7%B5)/"/>
    <id>http://yoursite.com/2019/05/13/若泽数据-CDH5.16.1集群企业真正离线部署(全网最细，配套视频，生产可实践)/</id>
    <published>2019-05-12T16:00:00.000Z</published>
    <updated>2019-06-11T12:30:15.781Z</updated>
    
    <content type="html"><![CDATA[<!-- build time:Fri Jun 14 2019 16:19:57 GMT+0800 (GMT+08:00) --><h2 id="若泽数据"><a href="#若泽数据" class="headerlink" title="若泽数据"></a><a href="www.ruozedata.com">若泽数据</a></h2><h2 id="CDH5-16-1集群企业真正离线部署-全网最细，配套视频，生产可实践"><a href="#CDH5-16-1集群企业真正离线部署-全网最细，配套视频，生产可实践" class="headerlink" title="CDH5.16.1集群企业真正离线部署(全网最细，配套视频，生产可实践)"></a>CDH5.16.1集群企业真正离线部署(全网最细，配套视频，生产可实践)</h2><p>视频:<a href="https://www.bilibili.com/video/av52167219" target="_blank" rel="noopener">https://www.bilibili.com/video/av52167219</a><br>PS:建议先看课程视频1-2篇，再根据视频或文档部署，<br>如有问题，及时与@若泽数据J哥联系。</p><a id="more"></a><hr><h2 id="一-准备工作"><a href="#一-准备工作" class="headerlink" title="一.准备工作"></a>一.准备工作</h2><h4 id="1-离线部署主要分为三块"><a href="#1-离线部署主要分为三块" class="headerlink" title="1.离线部署主要分为三块:"></a>1.离线部署主要分为三块:</h4><p>a.MySQL离线部署<br>b.CM离线部署<br>c.Parcel文件离线源部署</p><h4 id="2-规划"><a href="#2-规划" class="headerlink" title="2.规划:"></a>2.规划:</h4><table><thead><tr><th>节点</th><th>MySQL部署组件</th><th>Parcel文件离线源</th><th>CM服务进程</th><th>大数据组件</th></tr></thead><tbody><tr><td>hadoop001</td><td>MySQL</td><td>Parcel</td><td>Activity Monitor<br></td><td>NN RM DN NM</td></tr><tr><td>hadoop002</td><td></td><td></td><td>Alert Publisher<br>Event Server</td><td>DN NM</td></tr><tr><td>hadoop003</td><td></td><td></td><td>Host Monitor<br>Service Monitor</td><td>DN NM</td></tr></tbody></table><h3 id="3-下载源"><a href="#3-下载源" class="headerlink" title="3.下载源:"></a>3.下载源:</h3><ul><li>CM<br><a href="http://archive.cloudera.com/cm5/cm/5/cloudera-manager-centos7-cm5.16.1_x86_64.tar.gz" target="_blank" rel="noopener">cloudera-manager-centos7-cm5.16.1_x86_64.tar.gz</a></li><li>Parcel<br><a href="http://archive.cloudera.com/cdh5/parcels/5.16.1/CDH-5.16.1-1.cdh5.16.1.p0.3-el7.parcel" target="_blank" rel="noopener">CDH-5.16.1-1.cdh5.16.1.p0.3-el7.parcel</a><br><a href="http://archive.cloudera.com/cdh5/parcels/5.16.1/CDH-5.16.1-1.cdh5.16.1.p0.3-el7.parcel.sha1" target="_blank" rel="noopener">CDH-5.16.1-1.cdh5.16.1.p0.3-el7.parcel.sha1</a><br><a href="http://archive.cloudera.com/cdh5/parcels/5.16.1/manifest.json" target="_blank" rel="noopener">manifest.json</a></li><li><p>JDK<br><a href="https://www.oracle.com/technetwork/java/javase/downloads/java-archive-javase8-2177648.html" target="_blank" rel="noopener">https://www.oracle.com/technetwork/java/javase/downloads/java-archive-javase8-2177648.html</a><br>下载jdk-8u202-linux-x64.tar.gz</p></li><li><p>MySQL<br><a href="https://dev.mysql.com/downloads/mysql/5.7.html#downloads" target="_blank" rel="noopener">https://dev.mysql.com/downloads/mysql/5.7.html#downloads</a><br>下载mysql-5.7.26-el7-x86_64.tar.gz</p></li><li><p>MySQL jdbc jar<br><a href="http://central.maven.org/maven2/mysql/mysql-connector-java/5.1.47/mysql-connector-java-5.1.47.jar" target="_blank" rel="noopener">mysql-connector-java-5.1.47.jar</a><br>下载完成后要重命名去掉版本号，<br>mv mysql-connector-java-5.1.47.jar mysql-connector-java.jar</p></li></ul><hr><p>###准备好百度云,下载安装包:<br>链接:<a href="https://pan.baidu.com/s/10s-NaFLfztKuWImZTiBMjA" target="_blank" rel="noopener">https://pan.baidu.com/s/10s-NaFLfztKuWImZTiBMjA</a> 密码:viqp</p><h2 id="二-集群节点初始化"><a href="#二-集群节点初始化" class="headerlink" title="二.集群节点初始化"></a>二.集群节点初始化</h2><h3 id="1-阿里云上海区购买3台，按量付费虚拟机"><a href="#1-阿里云上海区购买3台，按量付费虚拟机" class="headerlink" title="1.阿里云上海区购买3台，按量付费虚拟机"></a>1.阿里云上海区购买3台，按量付费虚拟机</h3><p>CentOS7.2操作系统，2核8G最低配置</p><h3 id="2-当前笔记本或台式机配置hosts文件"><a href="#2-当前笔记本或台式机配置hosts文件" class="headerlink" title="2.当前笔记本或台式机配置hosts文件"></a>2.当前笔记本或台式机配置hosts文件</h3><ul><li>MAC: /etc/hosts</li><li>Window: C:\windows\system32\drivers\etc\hosts</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">公网地址: </span><br><span class="line">106.15.234.222 hadoop001  </span><br><span class="line">106.15.235.200 hadoop002  </span><br><span class="line">106.15.234.239 hadoop003</span><br></pre></td></tr></table></figure><h3 id="3-设置所有节点的hosts文件"><a href="#3-设置所有节点的hosts文件" class="headerlink" title="3.设置所有节点的hosts文件"></a>3.设置所有节点的hosts文件</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">私有地铁、内网地址:</span><br><span class="line">echo &quot;172.19.7.96 hadoop001&quot;&gt;&gt; /etc/hosts</span><br><span class="line">echo &quot;172.19.7.98 hadoop002&quot;&gt;&gt; /etc/hosts</span><br><span class="line">echo &quot;172.19.7.97 hadoop003&quot;&gt;&gt; /etc/hosts</span><br></pre></td></tr></table></figure><h3 id="4-关闭所有节点的防火墙及清空规则"><a href="#4-关闭所有节点的防火墙及清空规则" class="headerlink" title="4.关闭所有节点的防火墙及清空规则"></a>4.关闭所有节点的防火墙及清空规则</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">systemctl stop firewalld </span><br><span class="line">systemctl disable firewalld</span><br><span class="line">iptables -F</span><br></pre></td></tr></table></figure><h3 id="5-关闭所有节点的selinux"><a href="#5-关闭所有节点的selinux" class="headerlink" title="5.关闭所有节点的selinux"></a>5.关闭所有节点的selinux</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">vi /etc/selinux/config</span><br><span class="line">将SELINUX=enforcing改为SELINUX=disabled </span><br><span class="line">设置后需要重启才能生效</span><br></pre></td></tr></table></figure><h3 id="6-设置所有节点的时区一致及时钟同步"><a href="#6-设置所有节点的时区一致及时钟同步" class="headerlink" title="6.设置所有节点的时区一致及时钟同步"></a>6.设置所有节点的时区一致及时钟同步</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line">6.1.时区</span><br><span class="line">[root@hadoop001 ~]# date</span><br><span class="line">Sat May 11 10:07:53 CST 2019</span><br><span class="line">[root@hadoop001 ~]# timedatectl</span><br><span class="line">      Local time: Sat 2019-05-11 10:10:31 CST</span><br><span class="line">  Universal time: Sat 2019-05-11 02:10:31 UTC</span><br><span class="line">        RTC time: Sat 2019-05-11 10:10:29</span><br><span class="line">       Time zone: Asia/Shanghai (CST, +0800)</span><br><span class="line">     NTP enabled: yes</span><br><span class="line">NTP synchronized: yes</span><br><span class="line"> RTC in local TZ: yes</span><br><span class="line">      DST active: n/a</span><br><span class="line"></span><br><span class="line">#查看命令帮助，学习至关重要，无需百度，太👎</span><br><span class="line">[root@hadoop001 ~]# timedatectl --help</span><br><span class="line">timedatectl [OPTIONS...] COMMAND ...</span><br><span class="line"></span><br><span class="line">Query or change system time and date settings.</span><br><span class="line"></span><br><span class="line">  -h --help                Show this help message</span><br><span class="line">     --version             Show package version</span><br><span class="line">     --no-pager            Do not pipe output into a pager</span><br><span class="line">     --no-ask-password     Do not prompt for password</span><br><span class="line">  -H --host=[USER@]HOST    Operate on remote host</span><br><span class="line">  -M --machine=CONTAINER   Operate on local container</span><br><span class="line">     --adjust-system-clock Adjust system clock when changing local RTC mode</span><br><span class="line"></span><br><span class="line">Commands:</span><br><span class="line">  status                   Show current time settings</span><br><span class="line">  set-time TIME            Set system time</span><br><span class="line">  set-timezone ZONE        Set system time zone</span><br><span class="line">  list-timezones           Show known time zones</span><br><span class="line">  set-local-rtc BOOL       Control whether RTC is in local time</span><br><span class="line">  set-ntp BOOL             Control whether NTP is enabled</span><br><span class="line"></span><br><span class="line">#查看哪些时区</span><br><span class="line">[root@hadoop001 ~]# timedatectl list-timezones</span><br><span class="line">Africa/Abidjan</span><br><span class="line">Africa/Accra</span><br><span class="line">Africa/Addis_Ababa</span><br><span class="line">Africa/Algiers</span><br><span class="line">Africa/Asmara</span><br><span class="line">Africa/Bamako</span><br><span class="line"></span><br><span class="line">#所有节点设置亚洲上海时区 </span><br><span class="line">[root@hadoop001 ~]# timedatectl set-timezone Asia/Shanghai</span><br><span class="line">[root@hadoop002 ~]# timedatectl set-timezone Asia/Shanghai</span><br><span class="line">[root@hadoop003 ~]# timedatectl set-timezone Asia/Shanghai</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line">6.2.时间</span><br><span class="line">#所有节点安装ntp</span><br><span class="line">[root@hadoop001 ~]# yum install -y ntp</span><br><span class="line"></span><br><span class="line">#选取hadoop001为ntp的主节点</span><br><span class="line">[root@hadoop001 ~]# vi /etc/ntp.conf </span><br><span class="line"></span><br><span class="line">#time</span><br><span class="line">server 0.asia.pool.ntp.org</span><br><span class="line">server 1.asia.pool.ntp.org</span><br><span class="line">server 2.asia.pool.ntp.org</span><br><span class="line">server 3.asia.pool.ntp.org</span><br><span class="line">#当外部时间不可用时，可使用本地硬件时间</span><br><span class="line">server 127.127.1.0 iburst local clock </span><br><span class="line">#允许哪些网段的机器来同步时间</span><br><span class="line">restrict 172.19.7.0 mask 255.255.255.0 nomodify notrap</span><br><span class="line"></span><br><span class="line">#开启ntpd及查看状态</span><br><span class="line">[root@hadoop001 ~]# systemctl start ntpd</span><br><span class="line">[root@hadoop001 ~]# systemctl status ntpd</span><br><span class="line"> ntpd.service - Network Time Service</span><br><span class="line">   Loaded: loaded (/usr/lib/systemd/system/ntpd.service; enabled; vendor preset: disabled)</span><br><span class="line">   Active: active (running) since Sat 2019-05-11 10:15:00 CST; 11min ago</span><br><span class="line"> Main PID: 18518 (ntpd)</span><br><span class="line">   CGroup: /system.slice/ntpd.service</span><br><span class="line">           └─18518 /usr/sbin/ntpd -u ntp:ntp -g</span><br><span class="line"></span><br><span class="line">May 11 10:15:00 hadoop001 systemd[1]: Starting Network Time Service...</span><br><span class="line">May 11 10:15:00 hadoop001 ntpd[18518]: proto: precision = 0.088 usec</span><br><span class="line">May 11 10:15:00 hadoop001 ntpd[18518]: 0.0.0.0 c01d 0d kern kernel time sync enabled</span><br><span class="line">May 11 10:15:00 hadoop001 systemd[1]: Started Network Time Service.</span><br><span class="line"></span><br><span class="line">#验证</span><br><span class="line">[root@hadoop001 ~]# ntpq -p</span><br><span class="line">     remote           refid      st t when poll reach   delay   offset  jitter</span><br><span class="line">==============================================================================</span><br><span class="line"> LOCAL(0)        .LOCL.          10 l  726   64    0    0.000    0.000   0.000</span><br><span class="line"></span><br><span class="line">#其他从节点停止禁用ntpd服务 </span><br><span class="line">[root@hadoop002 ~]# systemctl stop ntpd</span><br><span class="line">[root@hadoop002 ~]# systemctl disable ntpd</span><br><span class="line">Removed symlink /etc/systemd/system/multi-user.target.wants/ntpd.service.</span><br><span class="line">[root@hadoop002 ~]# /usr/sbin/ntpdate hadoop001</span><br><span class="line">11 May 10:29:22 ntpdate[9370]: adjust time server 172.19.7.96 offset 0.000867 sec</span><br><span class="line">#每天凌晨同步hadoop001节点时间</span><br><span class="line">[root@hadoop002 ~]# crontab -e</span><br><span class="line">00 00 * * * /usr/sbin/ntpdate hadoop001  </span><br><span class="line"></span><br><span class="line">[root@hadoop003 ~]# systemctl stop ntpd</span><br><span class="line">[root@hadoop004 ~]# systemctl disable ntpd</span><br><span class="line">Removed symlink /etc/systemd/system/multi-user.target.wants/ntpd.service.</span><br><span class="line">[root@hadoop005 ~]# /usr/sbin/ntpdate hadoop001</span><br><span class="line">11 May 10:29:22 ntpdate[9370]: adjust time server 172.19.7.96 offset 0.000867 sec</span><br><span class="line">#每天凌晨同步hadoop001节点时间</span><br><span class="line">[root@hadoop003 ~]# crontab -e</span><br><span class="line">00 00 * * * /usr/sbin/ntpdate hadoop001</span><br></pre></td></tr></table></figure><h3 id="7-部署集群的JDK"><a href="#7-部署集群的JDK" class="headerlink" title="7.部署集群的JDK"></a>7.部署集群的JDK</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">mkdir /usr/java</span><br><span class="line">tar -xzvf jdk-8u45-linux-x64.tar.gz -C /usr/java/</span><br><span class="line">#切记必须修正所属用户及用户组</span><br><span class="line">chown -R root:root /usr/java/jdk1.8.0_45</span><br><span class="line"></span><br><span class="line">echo &quot;export JAVA_HOME=/usr/java/jdk1.8.0_45&quot; &gt;&gt; /etc/profile</span><br><span class="line">echo &quot;export PATH=$&#123;JAVA_HOME&#125;/bin:$&#123;PATH&#125;&quot; &gt;&gt; /etc/profile</span><br><span class="line">source /etc/profile</span><br><span class="line">which java</span><br></pre></td></tr></table></figure><h3 id="8-hadoop001节点离线部署MySQL5-7-假如觉得困难哟，就自行百度RPM部署，因为该部署文档是我司生产文档"><a href="#8-hadoop001节点离线部署MySQL5-7-假如觉得困难哟，就自行百度RPM部署，因为该部署文档是我司生产文档" class="headerlink" title="8.hadoop001节点离线部署MySQL5.7(假如觉得困难哟，就自行百度RPM部署，因为该部署文档是我司生产文档)"></a>8.hadoop001节点离线部署MySQL5.7(假如觉得困难哟，就自行百度RPM部署，因为该部署文档是我司生产文档)</h3><ul><li>文档链接:<a href="https://github.com/Hackeruncle/MySQL" target="_blank" rel="noopener">https://github.com/Hackeruncle/MySQL</a></li><li>视频链接:<a href="https://pan.baidu.com/s/1jdM8WeIg8syU0evL1-tDOQ" target="_blank" rel="noopener">https://pan.baidu.com/s/1jdM8WeIg8syU0evL1-tDOQ</a> 密码:whic</li></ul><h3 id="9-创建CDH的元数据库和用户、amon服务的数据库及用户"><a href="#9-创建CDH的元数据库和用户、amon服务的数据库及用户" class="headerlink" title="9.创建CDH的元数据库和用户、amon服务的数据库及用户"></a>9.创建CDH的元数据库和用户、amon服务的数据库及用户</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">create database cmf DEFAULT CHARACTER SET utf8;</span><br><span class="line">create database amon DEFAULT CHARACTER SET utf8;</span><br><span class="line">grant all on cmf.* TO &apos;cmf&apos;@&apos;%&apos; IDENTIFIED BY &apos;Ruozedata123456!&apos;;</span><br><span class="line">grant all on amon.* TO &apos;amon&apos;@&apos;%&apos; IDENTIFIED BY &apos;Ruozedata123456!&apos;;</span><br><span class="line">flush privileges;</span><br></pre></td></tr></table></figure><h3 id="10-hadoop001节点部署mysql-jdbc-jar"><a href="#10-hadoop001节点部署mysql-jdbc-jar" class="headerlink" title="10.hadoop001节点部署mysql jdbc jar"></a>10.hadoop001节点部署mysql jdbc jar</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">mkdir -p /usr/share/java/</span><br><span class="line">cp mysql-connector-java.jar /usr/share/java/</span><br></pre></td></tr></table></figure><h2 id="三-CDH部署"><a href="#三-CDH部署" class="headerlink" title="三.CDH部署"></a>三.CDH部署</h2><h3 id="1-离线部署cm-server及agent"><a href="#1-离线部署cm-server及agent" class="headerlink" title="1.离线部署cm server及agent"></a>1.离线部署cm server及agent</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">1.1.所有节点创建目录及解压</span><br><span class="line">mkdir /opt/cloudera-manager</span><br><span class="line">tar -zxvf cloudera-manager-centos7-cm5.16.1_x86_64.tar.gz -C /opt/cloudera-manager/</span><br><span class="line"></span><br><span class="line">1.2.所有节点修改agent的配置，指向server的节点hadoop001</span><br><span class="line">sed -i &quot;s/server_host=localhost/server_host=hadoop001/g&quot; /opt/cloudera-manager/cm-5.16.1/etc/cloudera-scm-agent/config.ini</span><br><span class="line"></span><br><span class="line">1.3.主节点修改server的配置:</span><br><span class="line">vi /opt/cloudera-manager/cm-5.16.1/etc/cloudera-scm-server/db.properties </span><br><span class="line">com.cloudera.cmf.db.type=mysql</span><br><span class="line">com.cloudera.cmf.db.host=hadoop001</span><br><span class="line">com.cloudera.cmf.db.name=cmf</span><br><span class="line">com.cloudera.cmf.db.user=cmf</span><br><span class="line">com.cloudera.cmf.db.password=Ruozedata123456!</span><br><span class="line">com.cloudera.cmf.db.setupType=EXTERNAL</span><br><span class="line"></span><br><span class="line">1.4.所有节点创建用户</span><br><span class="line">useradd --system --home=/opt/cloudera-manager/cm-5.16.1/run/cloudera-scm-server/ --no-create-home --shell=/bin/false --comment &quot;Cloudera SCM User&quot; cloudera-scm</span><br><span class="line"></span><br><span class="line">1.5.目录修改用户及用户组</span><br><span class="line">chown -R cloudera-scm:cloudera-scm /opt/cloudera-manager</span><br></pre></td></tr></table></figure><h3 id="2-hadoop001节点部署离线parcel源"><a href="#2-hadoop001节点部署离线parcel源" class="headerlink" title="2.hadoop001节点部署离线parcel源"></a>2.hadoop001节点部署离线parcel源</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">2.1.部署离线parcel源</span><br><span class="line">$ mkdir -p /opt/cloudera/parcel-repo</span><br><span class="line">$ ll</span><br><span class="line">total 3081664</span><br><span class="line">-rw-r--r-- 1 root root 2127506677 May  9 18:04 CDH-5.16.1-1.cdh5.16.1.p0.3-el7.parcel</span><br><span class="line">-rw-r--r-- 1 root root         41 May  9 18:03 CDH-5.16.1-1.cdh5.16.1.p0.3-el7.parcel.sha1</span><br><span class="line">-rw-r--r-- 1 root root  841524318 May  9 18:03 cloudera-manager-centos7-cm5.16.1_x86_64.tar.gz</span><br><span class="line">-rw-r--r-- 1 root root  185515842 Aug 10  2017 jdk-8u144-linux-x64.tar.gz</span><br><span class="line">-rw-r--r-- 1 root root      66538 May  9 18:03 manifest.json</span><br><span class="line">-rw-r--r-- 1 root root     989495 May 25  2017 mysql-connector-java.jar</span><br><span class="line">$ cp CDH-5.16.1-1.cdh5.16.1.p0.3-el7.parcel /opt/cloudera/parcel-repo/</span><br><span class="line"></span><br><span class="line">#切记cp时，重命名去掉1，不然在部署过程CM认为如上文件下载未完整，会持续下载</span><br><span class="line">$ cp CDH-5.16.1-1.cdh5.16.1.p0.3-el7.parcel.sha1 /opt/cloudera/parcel-repo/CDH-5.16.1-1.cdh5.16.1.p0.3-el7.parcel.sha</span><br><span class="line">$ cp manifest.json /opt/cloudera/parcel-repo/</span><br><span class="line"></span><br><span class="line">2.2.目录修改用户及用户组</span><br><span class="line">$ chown -R cloudera-scm:cloudera-scm /opt/cloudera/</span><br></pre></td></tr></table></figure><h3 id="3-所有节点创建软件安装目录、用户及用户组权限"><a href="#3-所有节点创建软件安装目录、用户及用户组权限" class="headerlink" title="3.所有节点创建软件安装目录、用户及用户组权限"></a>3.所有节点创建软件安装目录、用户及用户组权限</h3><p>mkdir -p /opt/cloudera/parcels<br>chown -R cloudera-scm:cloudera-scm /opt/cloudera/</p><h3 id="4-hadoop001节点启动Server"><a href="#4-hadoop001节点启动Server" class="headerlink" title="4.hadoop001节点启动Server"></a>4.hadoop001节点启动Server</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">4.1.启动server</span><br><span class="line">/opt/cloudera-manager/cm-5.16.1/etc/init.d/cloudera-scm-server start</span><br><span class="line"></span><br><span class="line">4.2.阿里云web界面，设置该hadoop001节点防火墙放开7180端口</span><br><span class="line">4.3.等待1min，打开 http://hadoop001:7180 账号密码:admin/admin</span><br><span class="line">4.4.假如打不开，去看server的log，根据错误仔细排查错误</span><br></pre></td></tr></table></figure><h3 id="5-所有节点启动Agent"><a href="#5-所有节点启动Agent" class="headerlink" title="5.所有节点启动Agent"></a>5.所有节点启动Agent</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/opt/cloudera-manager/cm-5.16.1/etc/init.d/cloudera-scm-agent start</span><br></pre></td></tr></table></figure><h3 id="6-接下来，全部Web界面操作"><a href="#6-接下来，全部Web界面操作" class="headerlink" title="6.接下来，全部Web界面操作"></a>6.接下来，全部Web界面操作</h3><p><a href="http://hadoop001:7180/" target="_blank" rel="noopener">http://hadoop001:7180/</a><br>账号密码:admin/admin</p><h3 id="7-欢迎使用Cloudera-Manager–最终用户许可条款与条件。勾选"><a href="#7-欢迎使用Cloudera-Manager–最终用户许可条款与条件。勾选" class="headerlink" title="7.欢迎使用Cloudera Manager–最终用户许可条款与条件。勾选"></a>7.欢迎使用Cloudera Manager–最终用户许可条款与条件。勾选</h3><p><img src="/assets/blogImg/CDH516_1.png" alt="enter description here"></p><h3 id="8-欢迎使用Cloudera-Manager–您想要部署哪个版本？选择Cloudera-Express免费版本"><a href="#8-欢迎使用Cloudera-Manager–您想要部署哪个版本？选择Cloudera-Express免费版本" class="headerlink" title="8.欢迎使用Cloudera Manager–您想要部署哪个版本？选择Cloudera Express免费版本"></a>8.欢迎使用Cloudera Manager–您想要部署哪个版本？选择Cloudera Express免费版本</h3><p><img src="/assets/blogImg/CDH516_2.png" alt="enter description here"></p><h3 id="9-感谢您选择Cloudera-Manager和CDH"><a href="#9-感谢您选择Cloudera-Manager和CDH" class="headerlink" title="9.感谢您选择Cloudera Manager和CDH"></a>9.感谢您选择Cloudera Manager和CDH</h3><p><img src="/assets/blogImg/CDH516_3.png" alt="enter description here"></p><h3 id="10-为CDH集群安装指导主机。选择-当前管理的主机-，全部勾选"><a href="#10-为CDH集群安装指导主机。选择-当前管理的主机-，全部勾选" class="headerlink" title="10.为CDH集群安装指导主机。选择[当前管理的主机]，全部勾选"></a>10.为CDH集群安装指导主机。选择[当前管理的主机]，全部勾选</h3><p><img src="/assets/blogImg/CDH516_4.png" alt="enter description here"></p><h3 id="11-选择存储库"><a href="#11-选择存储库" class="headerlink" title="11.选择存储库"></a>11.选择存储库</h3><p><img src="/assets/blogImg/CDH516_5.png" alt="enter description here"></p><h3 id="12-集群安装–正在安装选定Parcel假如"><a href="#12-集群安装–正在安装选定Parcel假如" class="headerlink" title="12.集群安装–正在安装选定Parcel假如"></a>12.集群安装–正在安装选定Parcel假如</h3><p>本地parcel离线源配置正确，则”下载”阶段瞬间完成，其余阶段视节点数与内部网络情况决定。<br><img src="/assets/blogImg/CDH516_6.png" alt="enter description here"></p><h3 id="13-检查主机正确性"><a href="#13-检查主机正确性" class="headerlink" title="13.检查主机正确性"></a>13.检查主机正确性</h3><p><img src="/assets/blogImg/CDH516_7.png" alt="enter description here"></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">13.1.建议将/proc/sys/vm/swappiness设置为最大值10。</span><br><span class="line">swappiness值控制操作系统尝试交换内存的积极；</span><br><span class="line">swappiness=0：表示最大限度使用物理内存，之后才是swap空间；</span><br><span class="line">swappiness=100：表示积极使用swap分区，并且把内存上的数据及时搬迁到swap空间；</span><br><span class="line">如果是混合服务器，不建议完全禁用swap，可以尝试降低swappiness。</span><br><span class="line"></span><br><span class="line">临时调整：</span><br><span class="line">sysctl vm.swappiness=10</span><br><span class="line"></span><br><span class="line">永久调整：</span><br><span class="line">cat &lt;&lt; EOF &gt;&gt; /etc/sysctl.conf</span><br><span class="line"># Adjust swappiness value</span><br><span class="line">vm.swappiness=10</span><br><span class="line">EOF</span><br><span class="line"></span><br><span class="line">13.2.已启用透明大页面压缩，可能会导致重大性能问题，建议禁用此设置。</span><br><span class="line">临时调整：</span><br><span class="line">echo never &gt; /sys/kernel/mm/transparent_hugepage/defrag</span><br><span class="line">echo never &gt; /sys/kernel/mm/transparent_hugepage/enabled</span><br><span class="line"></span><br><span class="line">永久调整：</span><br><span class="line">cat &lt;&lt; EOF &gt;&gt; /etc/rc.d/rc.local</span><br><span class="line"># Disable transparent_hugepage</span><br><span class="line">echo never &gt; /sys/kernel/mm/transparent_hugepage/defrag</span><br><span class="line">echo never &gt; /sys/kernel/mm/transparent_hugepage/enabled</span><br><span class="line">EOF</span><br><span class="line"></span><br><span class="line"># centos7.x系统，需要为&quot;/etc/rc.d/rc.local&quot;文件赋予执行权限</span><br><span class="line">chmod +x /etc/rc.d/rc.local</span><br></pre></td></tr></table></figure><h3 id="14-自定义服务，选择部署Zookeeper、HDFS、Yarn服务"><a href="#14-自定义服务，选择部署Zookeeper、HDFS、Yarn服务" class="headerlink" title="14.自定义服务，选择部署Zookeeper、HDFS、Yarn服务"></a>14.自定义服务，选择部署Zookeeper、HDFS、Yarn服务</h3><p><img src="/assets/blogImg/CDH516_8.png" alt="enter description here"></p><h3 id="15-自定义角色分配"><a href="#15-自定义角色分配" class="headerlink" title="15.自定义角色分配"></a>15.自定义角色分配</h3><p><img src="/assets/blogImg/CDH516_9.png" alt="enter description here"></p><h3 id="16-数据库设置"><a href="#16-数据库设置" class="headerlink" title="16.数据库设置"></a>16.数据库设置</h3><p><img src="/assets/blogImg/CDH516_10.png" alt="enter description here"></p><h3 id="17-审改设置，默认即可"><a href="#17-审改设置，默认即可" class="headerlink" title="17.审改设置，默认即可"></a>17.审改设置，默认即可</h3><p><img src="/assets/blogImg/CDH516_11.png" alt="enter description here"></p><h3 id="18-首次运行"><a href="#18-首次运行" class="headerlink" title="18.首次运行"></a>18.首次运行</h3><p><img src="/assets/blogImg/CDH516_12.png" alt="enter description here"></p><h3 id="19-恭喜您"><a href="#19-恭喜您" class="headerlink" title="19.恭喜您!"></a>19.恭喜您!</h3><p><img src="/assets/blogImg/CDH516_13.png" alt="enter description here"></p><h3 id="20-主页"><a href="#20-主页" class="headerlink" title="20.主页"></a>20.主页</h3><p><img src="/assets/blogImg/CDH516_14.png" alt="enter description here"></p><hr><h3 id="CDH全套课程目录，如有buy，加微信-ruoze-star"><a href="#CDH全套课程目录，如有buy，加微信-ruoze-star" class="headerlink" title="CDH全套课程目录，如有buy，加微信(ruoze_star)"></a>CDH全套课程目录，如有buy，加微信(ruoze_star)</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br></pre></td><td class="code"><pre><span class="line">0.青云环境介绍和使用 </span><br><span class="line">1.Preparation        </span><br><span class="line">谈谈怎样入门大数据 </span><br><span class="line">谈谈怎样做好一个大数据平台的运营工作 </span><br><span class="line">Linux机器,各软件版本介绍及安装(录播) </span><br><span class="line">2.Introduction      </span><br><span class="line">Cloudera、CM及CDH介绍 </span><br><span class="line">CDH版本选择 </span><br><span class="line">CDH安装几种方式解读 </span><br><span class="line">3.Install&amp;UnInstall  </span><br><span class="line">集群节点规划,环境准备(NTP,Jdk and etc) </span><br><span class="line">MySQL编译安装及常用命令 </span><br><span class="line">推荐:CDH离线安装(踩坑心得,全面剖析) </span><br><span class="line">解读暴力卸载脚本 </span><br><span class="line"></span><br><span class="line">4.CDH Management      </span><br><span class="line">CDH体系架构剖析 </span><br><span class="line">CDH配置文件深度解析 </span><br><span class="line">CM的常用命令 </span><br><span class="line">CDH集群正确启动和停止顺序 </span><br><span class="line">CDH Tsquery Language </span><br><span class="line">CDH常规管理(监控/预警/配置/资源/日志/安全) </span><br><span class="line"></span><br><span class="line">5.Maintenance Experiment  </span><br><span class="line">HDFS HA 配置 及hadoop/hdfs常规命令 </span><br><span class="line">Yarn HA 配置 及yarn常规命令 </span><br><span class="line">Other CDH Components HA 配置 </span><br><span class="line">CDH动态添加删除服务(hive/spark/hbase) </span><br><span class="line">CDH动态添加删除机器 </span><br><span class="line">CDH动态添加删除及迁移DataNode进程等 </span><br><span class="line">CDH升级(5.10.0--&gt;5.12.0) </span><br><span class="line"></span><br><span class="line">6.Resource Management    </span><br><span class="line">Linux Cgroups </span><br><span class="line">静态资源池 </span><br><span class="line">动态资源池 </span><br><span class="line">多租户案例 </span><br><span class="line"></span><br><span class="line">7.Performance Tunning    </span><br><span class="line">Memory/CPU/Network/Disk及集群规划 </span><br><span class="line">Linux参数 </span><br><span class="line">HDFS参数 </span><br><span class="line">MapReduce及Yarn参数 </span><br><span class="line">其他服务参数 </span><br><span class="line"></span><br><span class="line">8.Cases Share </span><br><span class="line">CDH4&amp;5之Alternatives命令 的研究 </span><br><span class="line">CDH5.8.2安装之Hash verification failed </span><br><span class="line">记录一次CDH4.8.6 配置HDFS HA 坑 </span><br><span class="line">CDH5.0集群IP更改 </span><br><span class="line">CDH的active namenode exit(GC)和彩蛋分享 </span><br><span class="line"></span><br><span class="line">9. Kerberos</span><br><span class="line">Kerberos简介</span><br><span class="line">Kerberos体系结构</span><br><span class="line">Kerberos工作机制</span><br><span class="line">Kerberos安装部署</span><br><span class="line">CDH启用kerberos</span><br><span class="line">Kerberos开发使用(真实代码)</span><br><span class="line"></span><br><span class="line">10.Summary         </span><br><span class="line">总结</span><br></pre></td></tr></table></figure><hr><h4 id="Join-us-if-you-have-a-dream"><a href="#Join-us-if-you-have-a-dream" class="headerlink" title="Join us if you have a dream."></a>Join us if you have a dream.</h4><h5 id="若泽数据官网-http-ruozedata-com"><a href="#若泽数据官网-http-ruozedata-com" class="headerlink" title="若泽数据官网: http://ruozedata.com"></a>若泽数据官网: <a href="http://ruozedata.com" target="_blank" rel="noopener">http://ruozedata.com</a></h5><h5 id="腾讯课堂，搜若泽数据-http-ruoze-ke-qq-com"><a href="#腾讯课堂，搜若泽数据-http-ruoze-ke-qq-com" class="headerlink" title="腾讯课堂，搜若泽数据: http://ruoze.ke.qq.com"></a>腾讯课堂，搜若泽数据: <a href="http://ruoze.ke.qq.com" target="_blank" rel="noopener">http://ruoze.ke.qq.com</a></h5><h5 id="Bilibili网站-搜若泽数据-https-space-bilibili-com-356836323"><a href="#Bilibili网站-搜若泽数据-https-space-bilibili-com-356836323" class="headerlink" title="Bilibili网站,搜若泽数据: https://space.bilibili.com/356836323"></a>Bilibili网站,搜若泽数据: <a href="https://space.bilibili.com/356836323" target="_blank" rel="noopener">https://space.bilibili.com/356836323</a></h5><h5 id="若泽大数据–官方博客"><a href="#若泽大数据–官方博客" class="headerlink" title="若泽大数据–官方博客"></a><a href="https://ruozedata.github.io" target="_blank" rel="noopener">若泽大数据–官方博客</a></h5><h5 id="若泽大数据–博客一览"><a href="#若泽大数据–博客一览" class="headerlink" title="若泽大数据–博客一览"></a><a href="https://github.com/ruozedata/BigData/blob/master/blog/BigDataBlogOverview.md" target="_blank" rel="noopener">若泽大数据–博客一览</a></h5><h5 id="若泽大数据–内部学员面试题"><a href="#若泽大数据–内部学员面试题" class="headerlink" title="若泽大数据–内部学员面试题"></a><a href="https://github.com/ruozedata/BigData/blob/master/interview/%E5%B8%B8%E8%A7%81%E9%9D%A2%E8%AF%95%E9%A2%98.md" target="_blank" rel="noopener">若泽大数据–内部学员面试题</a></h5><h5 id="扫一扫，学一学"><a href="#扫一扫，学一学" class="headerlink" title="扫一扫，学一学:"></a>扫一扫，学一学:</h5><p><img src="//yoursite.com/2019/05/13/若泽数据-CDH5.16.1集群企业真正离线部署(全网最细，配套视频，生产可实践)/若泽数据--扫描入口.png" alt="avatar"></p><!-- rebuild by neat -->]]></content>
    
    <summary type="html">
    
      &lt;!-- build time:Fri Jun 14 2019 16:19:57 GMT+0800 (GMT+08:00) --&gt;&lt;h2 id=&quot;若泽数据&quot;&gt;&lt;a href=&quot;#若泽数据&quot; class=&quot;headerlink&quot; title=&quot;若泽数据&quot;&gt;&lt;/a&gt;&lt;a href=&quot;www.ruozedata.com&quot;&gt;若泽数据&lt;/a&gt;&lt;/h2&gt;&lt;h2 id=&quot;CDH5-16-1集群企业真正离线部署-全网最细，配套视频，生产可实践&quot;&gt;&lt;a href=&quot;#CDH5-16-1集群企业真正离线部署-全网最细，配套视频，生产可实践&quot; class=&quot;headerlink&quot; title=&quot;CDH5.16.1集群企业真正离线部署(全网最细，配套视频，生产可实践)&quot;&gt;&lt;/a&gt;CDH5.16.1集群企业真正离线部署(全网最细，配套视频，生产可实践)&lt;/h2&gt;&lt;p&gt;视频:&lt;a href=&quot;https://www.bilibili.com/video/av52167219&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://www.bilibili.com/video/av52167219&lt;/a&gt;&lt;br&gt;PS:建议先看课程视频1-2篇，再根据视频或文档部署，&lt;br&gt;如有问题，及时与@若泽数据J哥联系。&lt;/p&gt;
    
    </summary>
    
      <category term="CDH" scheme="http://yoursite.com/categories/CDH/"/>
    
    
      <category term="cdh" scheme="http://yoursite.com/tags/cdh/"/>
    
  </entry>
  
  <entry>
    <title>Elasticsearch常用操作解析</title>
    <link href="http://yoursite.com/2019/05/13/Elasticsearch%E5%B8%B8%E7%94%A8%E6%93%8D%E4%BD%9C%E8%A7%A3%E6%9E%90/"/>
    <id>http://yoursite.com/2019/05/13/Elasticsearch常用操作解析/</id>
    <published>2019-05-12T16:00:00.000Z</published>
    <updated>2019-06-14T07:23:59.841Z</updated>
    
    <content type="html"><![CDATA[<!-- build time:Fri Jun 14 2019 16:19:56 GMT+0800 (GMT+08:00) --><a id="more"></a><h3 id="创建Maven管理的Java项目"><a href="#创建Maven管理的Java项目" class="headerlink" title="创建Maven管理的Java项目"></a>创建Maven管理的Java项目</h3><p>在pom.xml中添加依赖：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&lt;es.version&gt;6.1.1&lt;/es.version&gt;</span><br><span class="line"> </span><br><span class="line">&lt;dependency&gt;</span><br><span class="line">    &lt;groupId&gt;org.elasticsearch.client&lt;/groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;transport&lt;/artifactId&gt;</span><br><span class="line">    &lt;version&gt;$&#123;es.version&#125;&lt;/version&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br></pre></td></tr></table></figure><p>然后创建一个单元测试类ESApp：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">private TransportClient client;</span><br><span class="line"> </span><br><span class="line">    @Before</span><br><span class="line">    public void setUp() throws Exception &#123;</span><br><span class="line">        Settings settings = Settings.builder()</span><br><span class="line">                .put(&quot;cluster.name&quot;, &quot;mycluster&quot;)</span><br><span class="line">                .put(&quot;client.transport.sniff&quot;, &quot;true&quot;)//增加自动嗅探配置</span><br><span class="line">                .build();</span><br><span class="line"> </span><br><span class="line">        client = new PreBuiltTransportClient(settings);</span><br><span class="line">        client.addTransportAddress(new TransportAddress(InetAddress.getByName(&quot;10.8.24.94&quot;), 9300));</span><br><span class="line"> </span><br><span class="line">        System.out.println(client.toString());</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>运行后报错</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">java.lang.NoClassDefFoundError: com/fasterxml/jackson/core/JsonFactory</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">&lt;dependency&gt;</span><br><span class="line">    &lt;groupId&gt;com.fasterxml.jackson.core&lt;/groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;jackson-core&lt;/artifactId&gt;</span><br><span class="line">    &lt;version&gt;2.9.3&lt;/version&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br><span class="line">&lt;dependency&gt;</span><br><span class="line">    &lt;groupId&gt;com.fasterxml.jackson.core&lt;/groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;jackson-databind&lt;/artifactId&gt;</span><br><span class="line">    &lt;version&gt;2.9.3&lt;/version&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br><span class="line">&lt;dependency&gt;</span><br><span class="line">    &lt;groupId&gt;com.fasterxml.jackson.core&lt;/groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;jackson-annotations&lt;/artifactId&gt;</span><br><span class="line">    &lt;version&gt;2.9.3&lt;/version&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br></pre></td></tr></table></figure><p>运行后成功拿到ES的client：</p><p><img src="/assets/blogImg/es.png" alt="enter description here"></p><h3 id="创建一个Index"><a href="#创建一个Index" class="headerlink" title="创建一个Index"></a>创建一个Index</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">@Test</span><br><span class="line">    public void createIndex() &#123;</span><br><span class="line">        client.admin().indices().prepareCreate(INDEX).get();</span><br><span class="line">        System.out.println(&quot;创建Index成功&quot;);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h3 id="删除一个Index"><a href="#删除一个Index" class="headerlink" title="删除一个Index"></a>删除一个Index</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">@Test</span><br><span class="line">    public void deleteIndex() &#123;</span><br><span class="line">        client.admin().indices().prepareDelete(INDEX).get();</span><br><span class="line">        System.out.println(&quot;删除Index成功&quot;);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h3 id="放入数据的三种方式"><a href="#放入数据的三种方式" class="headerlink" title="放入数据的三种方式"></a>放入数据的三种方式</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line">//不推荐使用，太繁琐拼json格式</span><br><span class="line"> @Test</span><br><span class="line">    public void createDoc() &#123;</span><br><span class="line">        String json = &quot;&#123;\&quot;name\&quot;:\&quot;若泽数据\&quot;&#125;&quot;;</span><br><span class="line"> </span><br><span class="line">        IndexResponse response = client.prepareIndex(INDEX, TYPE, &quot;100&quot;)</span><br><span class="line">                .setSource(json, XContentType.JSON)</span><br><span class="line">                .get();</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    //推荐使用</span><br><span class="line">    @Test</span><br><span class="line">    public void test01() throws Exception &#123;</span><br><span class="line">        Map&lt;String, Object&gt; json = new HashMap&lt;String, Object&gt;();</span><br><span class="line">        json.put(&quot;name&quot;, &quot;ruozedata&quot;);</span><br><span class="line">        json.put(&quot;message&quot;, &quot;trying out Elasticsearch&quot;);</span><br><span class="line"> </span><br><span class="line">        IndexResponse response = client.prepareIndex(INDEX, TYPE, &quot;101&quot;).setSource(json).get();</span><br><span class="line">        System.out.println(response.getVersion());</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">//推荐使用</span><br><span class="line">    @Test</span><br><span class="line">    public void test02() throws Exception &#123;</span><br><span class="line"> </span><br><span class="line">        XContentBuilder builder = jsonBuilder()</span><br><span class="line">                .startObject()</span><br><span class="line">                .field(&quot;user&quot;, &quot;ruoze&quot;)</span><br><span class="line">                .field(&quot;postDate&quot;, new Date())</span><br><span class="line">                .field(&quot;message&quot;, &quot;trying out Elasticsearch&quot;)</span><br><span class="line">                .endObject();</span><br><span class="line"> </span><br><span class="line">        IndexResponse response = client.prepareIndex(INDEX, TYPE, &quot;102&quot;).setSource(builder).get();</span><br><span class="line">        System.out.println(response.getVersion());</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h3 id="拿到一条数据"><a href="#拿到一条数据" class="headerlink" title="拿到一条数据"></a>拿到一条数据</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">@Test</span><br><span class="line">    public void getDoc() &#123;</span><br><span class="line">        GetResponse response = client.prepareGet(INDEX, TYPE, &quot;100&quot;).get();</span><br><span class="line">        System.out.println(response.getSourceAsString());</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h3 id="拿到多条数据"><a href="#拿到多条数据" class="headerlink" title="拿到多条数据"></a>拿到多条数据</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">@Test</span><br><span class="line">    public void getDocsByIds() &#123;</span><br><span class="line"> </span><br><span class="line">        MultiGetResponse responses = client.prepareMultiGet()</span><br><span class="line">                .add(INDEX, TYPE,&quot;100&quot;)</span><br><span class="line">                .add(INDEX, TYPE, &quot;101&quot;, &quot;102&quot;, &quot;1000&quot;)</span><br><span class="line">                .get();</span><br><span class="line"> </span><br><span class="line">        for (MultiGetItemResponse response : responses) &#123;</span><br><span class="line">            GetResponse res = response.getResponse();</span><br><span class="line">            if (res.isExists()) &#123;</span><br><span class="line">                System.out.println(res);</span><br><span class="line">            &#125; else &#123;</span><br><span class="line">                System.out.println(&quot;没有这条数据&quot;);</span><br><span class="line">            &#125;</span><br><span class="line"> </span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><!-- rebuild by neat -->]]></content>
    
    <summary type="html">
    
      &lt;!-- build time:Fri Jun 14 2019 16:19:56 GMT+0800 (GMT+08:00) --&gt;
    
    </summary>
    
      <category term="Elasticsearch" scheme="http://yoursite.com/categories/Elasticsearch/"/>
    
    
      <category term="Elasticsearch" scheme="http://yoursite.com/tags/Elasticsearch/"/>
    
  </entry>
  
  <entry>
    <title>生产常用Spark累加器剖析之三(自定义累加器)</title>
    <link href="http://yoursite.com/2019/05/10/%E7%94%9F%E4%BA%A7%E5%B8%B8%E7%94%A8Spark%E7%B4%AF%E5%8A%A0%E5%99%A8%E5%89%96%E6%9E%90%E4%B9%8B%E4%B8%89(%E8%87%AA%E5%AE%9A%E4%B9%89%E7%B4%AF%E5%8A%A0%E5%99%A8)/"/>
    <id>http://yoursite.com/2019/05/10/生产常用Spark累加器剖析之三(自定义累加器)/</id>
    <published>2019-05-09T16:00:00.000Z</published>
    <updated>2019-06-14T06:39:26.400Z</updated>
    
    <content type="html"><![CDATA[<!-- build time:Fri Jun 14 2019 16:19:57 GMT+0800 (GMT+08:00) --><h2 id="思路-amp-需求"><a href="#思路-amp-需求" class="headerlink" title="思路 &amp; 需求"></a>思路 &amp; 需求</h2><p>参考IntAccumulatorParam的实现思路（上述文章中有讲）：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">trait AccumulatorParam[T] extends AccumulableParam[T, T] &#123;</span><br><span class="line">  def addAccumulator(t1: T, t2: T): T = &#123;</span><br><span class="line">    // addInPlace有很多具体的实现类</span><br><span class="line">    // 如果想要实现自定义的话，就得实现这个方法</span><br><span class="line">    addInPlace(t1, t2)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><a id="more"></a><p>自定义也可以通过这个方法去实现，从而兼容我们自定义的累加器</p><h2 id="需求：这里实现一个简单的案例，用分布式的方法去实现随机数"><a href="#需求：这里实现一个简单的案例，用分布式的方法去实现随机数" class="headerlink" title="需求：这里实现一个简单的案例，用分布式的方法去实现随机数"></a>需求：这里实现一个简单的案例，用分布式的方法去实现随机数</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line">**</span><br><span class="line">  * 自定义的AccumulatorParam</span><br><span class="line">  *</span><br><span class="line">  * Created by lemon on 2018/7/28.</span><br><span class="line">  */</span><br><span class="line">object UniqueKeyAccumulator extends AccumulatorParam[Map[Int, Int]] &#123;</span><br><span class="line">  override def addInPlace(r1: Map[Int, Int], r2: Map[Int, Int]): Map[Int, Int] = &#123;</span><br><span class="line">      // ++用于两个集合相加</span><br><span class="line">      r1++r2</span><br><span class="line">    &#125;</span><br><span class="line">    override def zero(initialValue: Map[Int, Int]): Map[Int, Int] = &#123;</span><br><span class="line">      var data: Map[Int, Int] = Map()</span><br><span class="line">      data</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">/**</span><br><span class="line">  * 使用自定义的累加器，实现随机数</span><br><span class="line">  *</span><br><span class="line">  * Created by lemon on 2018/7/28.</span><br><span class="line">  */</span><br><span class="line">object CustomAccumulator &#123;</span><br><span class="line">  def main(args: Array[String]): Unit = &#123;</span><br><span class="line">    val sparkConf = new SparkConf().setAppName(&quot;CustomAccumulator&quot;).setMaster(&quot;local[2]&quot;)</span><br><span class="line">    val sc = new SparkContext(sparkConf)</span><br><span class="line">    val uniqueKeyAccumulator = sc.accumulable(Map[Int, Int]())(UniqueKeyAccumulator)</span><br><span class="line">    val distData = sc.parallelize(1 to 10)</span><br><span class="line">    val mapCount = distData.map(x =&gt; &#123;</span><br><span class="line">      val randomNum = new Random().nextInt(20)</span><br><span class="line">      // 构造一个k-v对</span><br><span class="line">      val map: Map[Int, Int] = Map[Int, Int](randomNum -&gt; randomNum)</span><br><span class="line">      uniqueKeyAccumulator += map</span><br><span class="line">    &#125;)</span><br><span class="line">    println(mapCount.count())</span><br><span class="line">    // 获取到累加器的值 中的key值，并进行打印</span><br><span class="line">    uniqueKeyAccumulator.value.keys.foreach(println)</span><br><span class="line">    sc.stop()</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行结果如下图：<br><img src="/assets/blogImg/Spark累加器简单案例.png" alt="enter description here"></p><!-- rebuild by neat -->]]></content>
    
    <summary type="html">
    
      &lt;!-- build time:Fri Jun 14 2019 16:19:57 GMT+0800 (GMT+08:00) --&gt;&lt;h2 id=&quot;思路-amp-需求&quot;&gt;&lt;a href=&quot;#思路-amp-需求&quot; class=&quot;headerlink&quot; title=&quot;思路 &amp;amp; 需求&quot;&gt;&lt;/a&gt;思路 &amp;amp; 需求&lt;/h2&gt;&lt;p&gt;参考IntAccumulatorParam的实现思路（上述文章中有讲）：&lt;/p&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;trait AccumulatorParam[T] extends AccumulableParam[T, T] &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  def addAccumulator(t1: T, t2: T): T = &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    // addInPlace有很多具体的实现类&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    // 如果想要实现自定义的话，就得实现这个方法&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    addInPlace(t1, t2)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
      <category term="Spark Other" scheme="http://yoursite.com/categories/Spark-Other/"/>
    
    
      <category term="spark" scheme="http://yoursite.com/tags/spark/"/>
    
      <category term="累加器" scheme="http://yoursite.com/tags/%E7%B4%AF%E5%8A%A0%E5%99%A8/"/>
    
  </entry>
  
  <entry>
    <title>若泽数据课程一览</title>
    <link href="http://yoursite.com/2019/05/08/%E8%8B%A5%E6%B3%BD%E6%95%B0%E6%8D%AE%E8%AF%BE%E7%A8%8B%E4%B8%80%E8%A7%88/"/>
    <id>http://yoursite.com/2019/05/08/若泽数据课程一览/</id>
    <published>2019-05-07T16:00:00.000Z</published>
    <updated>2019-06-11T05:35:49.383Z</updated>
    
    <content type="html"><![CDATA[<!-- build time:Fri Jun 14 2019 16:19:57 GMT+0800 (GMT+08:00) --><h1 id="若泽数据课程系列"><a href="#若泽数据课程系列" class="headerlink" title="若泽数据课程系列"></a>若泽数据课程系列</h1><h2 id="基础班"><a href="#基础班" class="headerlink" title="基础班"></a>基础班</h2><h3 id="Liunx"><a href="#Liunx" class="headerlink" title="Liunx"></a>Liunx</h3><ul><li>VM虚拟机安装</li><li>Liunx常用命令（重点）</li><li>开发环境搭</li></ul><h3 id="MySQL"><a href="#MySQL" class="headerlink" title="MySQL"></a>MySQL</h3><ul><li>源码安装&amp;yum安装</li><li>CRUD编写</li><li>权限控制</li></ul><h3 id="Hadoop"><a href="#Hadoop" class="headerlink" title="Hadoop"></a>Hadoop</h3><ul><li>架构介绍&amp;&amp;源码编译</li><li>伪分布式安装&amp;&amp;企业应用</li><li><p>HDFS（重点）</p><ul><li>架构设计</li><li>副本放置策略</li><li>读写流程</li></ul></li><li><p>YARN（重点）</p><ul><li>架构设计</li><li>工作流程</li><li>调度管理&amp;&amp;常见参数配置（调优）</li></ul></li><li><p>MapReduce</p><ul><li>架构设计</li><li>wordcount原理&amp;&amp;join原理和案例<a id="more"></a><h3 id="Hive"><a href="#Hive" class="headerlink" title="Hive"></a>Hive</h3></li></ul></li><li><p>架构设计</p></li><li>Hive DDL&amp;DML</li><li>join在大数据中的使用</li><li>使用自带UDF和开发自定义UDF</li></ul><h3 id="Sqoop"><a href="#Sqoop" class="headerlink" title="Sqoop"></a>Sqoop</h3><ul><li>架构设计</li><li>RDBMS导入导出</li></ul><h3 id="整合项目将所有组件合作使用。"><a href="#整合项目将所有组件合作使用。" class="headerlink" title="整合项目将所有组件合作使用。"></a>整合项目将所有组件合作使用。</h3><h3 id="人工智能基础"><a href="#人工智能基础" class="headerlink" title="人工智能基础"></a>人工智能基础</h3><ul><li>python基础</li><li>常用库——pandas、numpy、sklearn、keras</li></ul><h2 id="高级班"><a href="#高级班" class="headerlink" title="高级班"></a>高级班</h2><h3 id="scala编程（重点）"><a href="#scala编程（重点）" class="headerlink" title="scala编程（重点）"></a>scala编程（重点）</h3><h3 id="Spark（五星重点）"><a href="#Spark（五星重点）" class="headerlink" title="Spark（五星重点）"></a>Spark（五星重点）</h3><h3 id="Hadoop高级"><a href="#Hadoop高级" class="headerlink" title="Hadoop高级"></a>Hadoop高级</h3><h3 id="Hive高级"><a href="#Hive高级" class="headerlink" title="Hive高级"></a>Hive高级</h3><h3 id="Flume"><a href="#Flume" class="headerlink" title="Flume"></a>Flume</h3><h3 id="Kafka"><a href="#Kafka" class="headerlink" title="Kafka"></a>Kafka</h3><h3 id="HBase"><a href="#HBase" class="headerlink" title="HBase"></a>HBase</h3><h3 id="Flink"><a href="#Flink" class="headerlink" title="Flink"></a>Flink</h3><h3 id="CDH"><a href="#CDH" class="headerlink" title="CDH"></a>CDH</h3><h3 id="容器"><a href="#容器" class="headerlink" title="容器"></a>容器</h3><h3 id="调度平台"><a href="#调度平台" class="headerlink" title="调度平台"></a>调度平台</h3><h2 id="线下班"><a href="#线下班" class="headerlink" title="线下班"></a>线下班</h2><p><img src="/assets/blogImg/若泽数据.png" alt="enter description here"></p><!-- rebuild by neat -->]]></content>
    
    <summary type="html">
    
      &lt;!-- build time:Fri Jun 14 2019 16:19:57 GMT+0800 (GMT+08:00) --&gt;&lt;h1 id=&quot;若泽数据课程系列&quot;&gt;&lt;a href=&quot;#若泽数据课程系列&quot; class=&quot;headerlink&quot; title=&quot;若泽数据课程系列&quot;&gt;&lt;/a&gt;若泽数据课程系列&lt;/h1&gt;&lt;h2 id=&quot;基础班&quot;&gt;&lt;a href=&quot;#基础班&quot; class=&quot;headerlink&quot; title=&quot;基础班&quot;&gt;&lt;/a&gt;基础班&lt;/h2&gt;&lt;h3 id=&quot;Liunx&quot;&gt;&lt;a href=&quot;#Liunx&quot; class=&quot;headerlink&quot; title=&quot;Liunx&quot;&gt;&lt;/a&gt;Liunx&lt;/h3&gt;&lt;ul&gt;&lt;li&gt;VM虚拟机安装&lt;/li&gt;&lt;li&gt;Liunx常用命令（重点）&lt;/li&gt;&lt;li&gt;开发环境搭&lt;/li&gt;&lt;/ul&gt;&lt;h3 id=&quot;MySQL&quot;&gt;&lt;a href=&quot;#MySQL&quot; class=&quot;headerlink&quot; title=&quot;MySQL&quot;&gt;&lt;/a&gt;MySQL&lt;/h3&gt;&lt;ul&gt;&lt;li&gt;源码安装&amp;amp;yum安装&lt;/li&gt;&lt;li&gt;CRUD编写&lt;/li&gt;&lt;li&gt;权限控制&lt;/li&gt;&lt;/ul&gt;&lt;h3 id=&quot;Hadoop&quot;&gt;&lt;a href=&quot;#Hadoop&quot; class=&quot;headerlink&quot; title=&quot;Hadoop&quot;&gt;&lt;/a&gt;Hadoop&lt;/h3&gt;&lt;ul&gt;&lt;li&gt;架构介绍&amp;amp;&amp;amp;源码编译&lt;/li&gt;&lt;li&gt;伪分布式安装&amp;amp;&amp;amp;企业应用&lt;/li&gt;&lt;li&gt;&lt;p&gt;HDFS（重点）&lt;/p&gt;&lt;ul&gt;&lt;li&gt;架构设计&lt;/li&gt;&lt;li&gt;副本放置策略&lt;/li&gt;&lt;li&gt;读写流程&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;YARN（重点）&lt;/p&gt;&lt;ul&gt;&lt;li&gt;架构设计&lt;/li&gt;&lt;li&gt;工作流程&lt;/li&gt;&lt;li&gt;调度管理&amp;amp;&amp;amp;常见参数配置（调优）&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;MapReduce&lt;/p&gt;&lt;ul&gt;&lt;li&gt;架构设计&lt;/li&gt;&lt;li&gt;wordcount原理&amp;amp;&amp;amp;join原理和案例&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;/ul&gt;
    
    </summary>
    
      <category term="生产课程" scheme="http://yoursite.com/categories/%E7%94%9F%E4%BA%A7%E8%AF%BE%E7%A8%8B/"/>
    
    
      <category term="课程" scheme="http://yoursite.com/tags/%E8%AF%BE%E7%A8%8B/"/>
    
  </entry>
  
  <entry>
    <title>docker常用命令以及安装mysql</title>
    <link href="http://yoursite.com/2019/05/08/docker%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4%E4%BB%A5%E5%8F%8A%E5%AE%89%E8%A3%85mysql/"/>
    <id>http://yoursite.com/2019/05/08/docker常用命令以及安装mysql/</id>
    <published>2019-05-07T16:00:00.000Z</published>
    <updated>2019-06-11T07:07:58.187Z</updated>
    
    <content type="html"><![CDATA[<!-- build time:Fri Jun 14 2019 16:19:57 GMT+0800 (GMT+08:00) --><h3 id="1-简介"><a href="#1-简介" class="headerlink" title="1.简介"></a>1.简介</h3><p>Docker是一个开源的应用容器引擎；是一个轻量级容器技术；</p><p>Docker支持将软件编译成一个镜像；然后在镜像中各种软件做好配置，将镜像发布出去，其他使用者可以直接使用这个镜像；</p><p>运行中的这个镜像称为容器，容器启动是非常快速的。<br><a id="more"></a></p><h3 id="2-核心概念"><a href="#2-核心概念" class="headerlink" title="2.核心概念"></a>2.核心概念</h3><p>docker主机(Host)：安装了Docker程序的机器（Docker直接安装在操作系统之上）；</p><p>docker客户端(Client)：连接docker主机进行操作；</p><p>docker仓库(Registry)：用来保存各种打包好的软件镜像；</p><p>docker镜像(Images)：软件打包好的镜像；放在docker仓库中；</p><p>docker容器(Container)：镜像启动后的实例称为一个容器；容器是独立运行的一个或一组应用</p><h3 id="3-安装环境"><a href="#3-安装环境" class="headerlink" title="3.安装环境"></a>3.安装环境</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">VM ware Workstation10</span><br><span class="line">CentOS-7-x86_64-DVD-1804.iso</span><br><span class="line">uname -r</span><br><span class="line">3.10.0-862.el7.x86_64</span><br></pre></td></tr></table></figure><p><strong>检查内核版本，必须是3.10及以上</strong> 查看命令：uname -r</p><h3 id="4-在linux虚拟机上安装docker"><a href="#4-在linux虚拟机上安装docker" class="headerlink" title="4.在linux虚拟机上安装docker"></a>4.在linux虚拟机上安装docker</h3><p>步骤：</p><p>1、检查内核版本，必须是3.10及以上<br></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">uname -r</span><br></pre></td></tr></table></figure><p></p><p>2、安装docker<br></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum install docker</span><br></pre></td></tr></table></figure><p></p><p>3、输入y确认安装<br></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">Dependency Updated:</span><br><span class="line">  audit.x86_64 0:2.8.1-3.el7_5.1                                  audit-libs.x86_64 0:2.8.1-3.el7_5.1                                 </span><br><span class="line"></span><br><span class="line">Complete!</span><br><span class="line">(成功标志)</span><br></pre></td></tr></table></figure><p></p><p>4、启动docker<br></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[root@hadoop000 ~]# systemctl start docker</span><br><span class="line">[root@hadoop000 ~]# docker -v</span><br><span class="line">Docker version 1.13.1, build 8633870/1.13.1</span><br></pre></td></tr></table></figure><p></p><p>5、开机启动docker<br></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[root@hadoop000 ~]# systemctl enable docker</span><br><span class="line">Created symlink from /etc/systemd/system/multi-user.target.wants/docker.service to /usr/lib/systemd/system/docker.service.</span><br></pre></td></tr></table></figure><p></p><p>6、停止docker<br></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@hadoop000 ~]# systemctl stop docker</span><br></pre></td></tr></table></figure><p></p><h3 id="5-常用命令"><a href="#5-常用命令" class="headerlink" title="5.常用命令"></a>5.常用命令</h3><p>镜像操作</p><table><thead><tr><th>操作</th><th>命令</th><th>说明</th></tr></thead><tbody><tr><td>检索</td><td>docker search 关键字 eg：docker search redis</td><td>我们经常去docker hub上检索镜像的详细信息，如镜像的TAG</td></tr><tr><td>拉取</td><td>docker pull 镜像名:tag</td><td>:tag是可选的，tag表示标签，多为软件的版本，默认是latest</td></tr><tr><td>列表</td><td>docker images</td><td>查看所有本地镜像</td></tr><tr><td>删除</td><td>docker rmi image-id</td><td>删除指定的本地镜像</td></tr></tbody></table><p>当然大家也可以在官网查找：<a href="https://hub.docker.com/" target="_blank" rel="noopener">https://hub.docker.com/</a></p><p>容器操作<br>软件镜像（QQ安装程序）—-运行镜像—-产生一个容器（正在运行的软件，运行的QQ）；</p><p>步骤：</p><ul><li>1、搜索镜像<br>[root@localhost ~]# docker search tomcat</li><li>2、拉取镜像<br>[root@localhost ~]# docker pull tomcat</li><li>3、根据镜像启动容器<br>docker run –name mytomcat -d tomcat:latest</li><li>4、docker ps<br>查看运行中的容器</li><li>5、 停止运行中的容器<br>docker stop 容器的id</li><li>6、查看所有的容器<br>docker ps -a</li><li>7、启动容器<br>docker start 容器id</li><li>8、删除一个容器<br>docker rm 容器id</li><li><p>9、启动一个做了端口映射的tomcat<br>[root@localhost ~]# docker run -d -p 8888:8080 tomcat<br>-d：后台运行<br>-p: 将主机的端口映射到容器的一个端口 主机端口:容器内部的端口</p></li><li><p>10、为了演示简单关闭了linux的防火墙<br>service firewalld status ；查看防火墙状态<br>service firewalld stop：关闭防火墙<br>systemctl disable firewalld.service #禁止firewall开机启动</p></li><li>11、查看容器的日志<br>docker logs container-name/container-id</li></ul><p>更多命令参看<br><a href="https://docs.docker.com/engine/reference/commandline/docker/" target="_blank" rel="noopener">https://docs.docker.com/engine/reference/commandline/docker/</a><br>可以参考镜像文档</p><h3 id="6-使用docker安装mysql"><a href="#6-使用docker安装mysql" class="headerlink" title="6.使用docker安装mysql"></a>6.使用docker安装mysql</h3><ul><li>docker pull mysql</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">docker pull mysql </span><br><span class="line">Using default tag: latest</span><br><span class="line">Trying to pull repository docker.io/library/mysql ... </span><br><span class="line">latest: Pulling from docker.io/library/mysql</span><br><span class="line">a5a6f2f73cd8: Pull complete </span><br><span class="line">936836019e67: Pull complete </span><br><span class="line">283fa4c95fb4: Pull complete </span><br><span class="line">1f212fb371f9: Pull complete </span><br><span class="line">e2ae0d063e89: Pull complete </span><br><span class="line">5ed0ae805b65: Pull complete </span><br><span class="line">0283dc49ef4e: Pull complete </span><br><span class="line">a7e1170b4fdb: Pull complete </span><br><span class="line">88918a9e4742: Pull complete </span><br><span class="line">241282fa67c2: Pull complete </span><br><span class="line">b0fecf619210: Pull complete </span><br><span class="line">bebf9f901dcc: Pull complete </span><br><span class="line">Digest: sha256:b7f7479f0a2e7a3f4ce008329572f3497075dc000d8b89bac3134b0fb0288de8</span><br><span class="line">Status: Downloaded newer image for docker.io/mysql:latest</span><br><span class="line">[root@hadoop000 ~]# docker images</span><br><span class="line">REPOSITORY          TAG                 IMAGE ID            CREATED             SIZE</span><br><span class="line">docker.io/mysql     latest              f991c20cb508        10 days ago         486 MB</span><br></pre></td></tr></table></figure><ul><li>启动</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">[root@hadoop000 ~]# docker images</span><br><span class="line">REPOSITORY          TAG                 IMAGE ID            CREATED             SIZE</span><br><span class="line">docker.io/mysql     latest              f991c20cb508        10 days ago         486 MB</span><br><span class="line">[root@hadoop000 ~]# docker run --name mysql01 -d mysql</span><br><span class="line">756620c8e5832f4f7ef3e82117c31760d18ec169d45b8d48c0a10ff2536dcc4a</span><br><span class="line">[root@hadoop000 ~]# docker ps -a</span><br><span class="line">CONTAINER ID        IMAGE               COMMAND                  CREATED             STATUS                     PORTS               NAMES</span><br><span class="line">756620c8e583        mysql               &quot;docker-entrypoint...&quot;   9 seconds ago       Exited (1) 7 seconds ago                       mysql01</span><br><span class="line">[root@hadoop000 ~]# docker logs 756620c8e583</span><br><span class="line">error: database is uninitialized and password option is not specified </span><br><span class="line">  You need to specify one of MYSQL_ROOT_PASSWORD, MYSQL_ALLOW_EMPTY_PASSWORD and MYSQL_RANDOM_ROOT_PASSWORD</span><br></pre></td></tr></table></figure><p>可以看到上面启动的方式是错误的，提示我们要带上具体的密码</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[root@hadoop000 ~]# docker run -p 3306:3306 --name mysql02 -e MYSQL_ROOT_PASSWORD=123456 -d mysql</span><br><span class="line">eae86796e132027df994e5f29775eb04c6a1039a92905c247f1d149714fedc06</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">–name：给新创建的容器命名，此处命名为pwc-mysql</span><br><span class="line">-e：配置信息，此处配置mysql的root用户的登陆密码</span><br><span class="line">-p：端口映射，此处映射主机3306端口到容器pwc-mysql的3306端口</span><br><span class="line">-d：成功启动容器后输出容器的完整ID，例如上图 73f8811f669ee...</span><br></pre></td></tr></table></figure><ul><li>查看是否启动成功</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[root@hadoop000 ~]# docker ps</span><br><span class="line">CONTAINER ID        IMAGE               COMMAND                  CREATED             STATUS              PORTS                               NAMES</span><br><span class="line">eae86796e132        mysql               &quot;docker-entrypoint...&quot;   8 minutes ago       Up 8 minutes        0.0.0.0:3306-&gt;3306/tcp, 33060/tcp   mysql02</span><br></pre></td></tr></table></figure><ul><li>登陆MySQL</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">docker exec -it mysql04 /bin/bash</span><br><span class="line">root@e34aba02c0c3:/# mysql -uroot -p123456 </span><br><span class="line">mysql: [Warning] Using a password on the command line interface can be insecure.</span><br><span class="line">Welcome to the MySQL monitor.  Commands end with ; or \g.</span><br><span class="line">Your MySQL connection id is 80</span><br><span class="line">Server version: 8.0.13 MySQL Community Server - GPL</span><br><span class="line"></span><br><span class="line">Copyright (c) 2000, 2018, Oracle and/or its affiliates. All rights reserved.</span><br><span class="line"></span><br><span class="line">Oracle is a registered trademark of Oracle Corporation and/or its</span><br><span class="line">affiliates. Other names may be trademarks of their respective</span><br><span class="line">owners.</span><br><span class="line"></span><br><span class="line">Type &apos;help;&apos; or &apos;\h&apos; for help. Type &apos;\c&apos; to clear the current input statement.</span><br><span class="line"></span><br><span class="line">mysql&gt;</span><br></pre></td></tr></table></figure><ul><li>其他的高级操作<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">docker run --name mysql03 -v /conf/mysql:/etc/mysql/conf.d -e MYSQL_ROOT_PASSWORD=my-secret-pw -d mysql:tag</span><br><span class="line">把主机的/conf/mysql文件夹挂载到 mysqldocker容器的/etc/mysql/conf.d文件夹里面</span><br><span class="line">改mysql的配置文件就只需要把mysql配置文件放在自定义的文件夹下（/conf/mysql）</span><br><span class="line"></span><br><span class="line">docker run --name some-mysql -e MYSQL_ROOT_PASSWORD=my-secret-pw -d mysql:tag --character-set-server=utf8mb4 --collation-server=utf8mb4_unicode_ci</span><br><span class="line">指定mysql的一些配置参数</span><br></pre></td></tr></table></figure></li></ul><!-- rebuild by neat -->]]></content>
    
    <summary type="html">
    
      &lt;!-- build time:Fri Jun 14 2019 16:19:57 GMT+0800 (GMT+08:00) --&gt;&lt;h3 id=&quot;1-简介&quot;&gt;&lt;a href=&quot;#1-简介&quot; class=&quot;headerlink&quot; title=&quot;1.简介&quot;&gt;&lt;/a&gt;1.简介&lt;/h3&gt;&lt;p&gt;Docker是一个开源的应用容器引擎；是一个轻量级容器技术；&lt;/p&gt;&lt;p&gt;Docker支持将软件编译成一个镜像；然后在镜像中各种软件做好配置，将镜像发布出去，其他使用者可以直接使用这个镜像；&lt;/p&gt;&lt;p&gt;运行中的这个镜像称为容器，容器启动是非常快速的。&lt;br&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="Docker" scheme="http://yoursite.com/categories/Docker/"/>
    
    
      <category term="docker" scheme="http://yoursite.com/tags/docker/"/>
    
  </entry>
  
  <entry>
    <title>Kudu与Spark 生产最佳实践</title>
    <link href="http://yoursite.com/2019/05/07/Kudu%E4%B8%8ESpark%20%E7%94%9F%E4%BA%A7%E6%9C%80%E4%BD%B3%E5%AE%9E%E8%B7%B5/"/>
    <id>http://yoursite.com/2019/05/07/Kudu与Spark 生产最佳实践/</id>
    <published>2019-05-06T16:00:00.000Z</published>
    <updated>2019-06-14T07:10:24.415Z</updated>
    
    <content type="html"><![CDATA[<!-- build time:Fri Jun 14 2019 16:19:57 GMT+0800 (GMT+08:00) --><a id="more"></a><h3 id="环境"><a href="#环境" class="headerlink" title="环境"></a>环境</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"> &lt;properties&gt;</span><br><span class="line">    &lt;scala.version&gt;2.11.8&lt;/scala.version&gt;</span><br><span class="line">    &lt;spark.version&gt;2.2.0&lt;/spark.version&gt;</span><br><span class="line">    &lt;kudu.version&gt;1.5.0&lt;/kudu.version&gt;</span><br><span class="line">&lt;/properties&gt;</span><br></pre></td></tr></table></figure><h3 id="测试代码"><a href="#测试代码" class="headerlink" title="测试代码"></a>测试代码</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line">import org.apache.spark.sql.SparkSession</span><br><span class="line">import org.apache.spark.sql.types.&#123;StringType, StructField, StructType&#125;</span><br><span class="line">import org.apache.kudu.client._</span><br><span class="line">import collection.JavaConverters._</span><br><span class="line">object KuduApp &#123;</span><br><span class="line">  def main(args: Array[String]): Unit = &#123;</span><br><span class="line">    val spark = SparkSession.builder().appName(&quot;KuduApp&quot;).master(&quot;local[2]&quot;).getOrCreate()</span><br><span class="line">     //Read a table from Kudu</span><br><span class="line">    val df = spark.read</span><br><span class="line">          .options(Map(&quot;kudu.master&quot; -&gt; &quot;10.19.120.70:7051&quot;, &quot;kudu.table&quot; -&gt; &quot;test_table&quot;))</span><br><span class="line">          .format(&quot;kudu&quot;).load</span><br><span class="line">        df.schema.printTreeString()</span><br><span class="line">//    // Use KuduContext to create, delete, or write to Kudu tables</span><br><span class="line">//    val kuduContext = new KuduContext(&quot;10.19.120.70:7051&quot;, spark.sparkContext)</span><br><span class="line">//</span><br><span class="line">//</span><br><span class="line">//    // The schema is encoded in a string</span><br><span class="line">//    val schemalString=&quot;id,age,name&quot;</span><br><span class="line">//</span><br><span class="line">//    // Generate the schema based on the string of schema</span><br><span class="line">//    val fields=schemalString.split(&quot;,&quot;).map(filedName=&gt;StructField(filedName,StringType,nullable =true ))</span><br><span class="line">//    val schema=StructType(fields)</span><br><span class="line">//</span><br><span class="line">//</span><br><span class="line">//    val KuduTable = kuduContext.createTable(</span><br><span class="line">//     &quot;test_table&quot;, schema, Seq(&quot;id&quot;),</span><br><span class="line">//     new CreateTableOptions()</span><br><span class="line">//       .setNumReplicas(1)</span><br><span class="line">//       .addHashPartitions(List(&quot;id&quot;).asJava, 3)).getSchema</span><br><span class="line">//</span><br><span class="line">//    val  id  = KuduTable.getColumn(&quot;id&quot;)</span><br><span class="line">//    print(id)</span><br><span class="line">//</span><br><span class="line">//    kuduContext.tableExists(&quot;test_table&quot;)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>现象:通过spark sql 操作报如下错误:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">Exception in thread &quot;main&quot; java.lang.ClassNotFoundException: Failed to find data source: kudu. Please find packages at http://spark.apache.org/third-party-projects.html</span><br><span class="line">    at org.apache.spark.sql.execution.datasources.DataSource$.lookupDataSource(DataSource.scala:549)</span><br><span class="line">    at org.apache.spark.sql.execution.datasources.DataSource.providingClass$lzycompute(DataSource.scala:86)</span><br><span class="line">    at org.apache.spark.sql.execution.datasources.DataSource.providingClass(DataSource.scala:86)</span><br><span class="line">    at org.apache.spark.sql.execution.datasources.DataSource.resolveRelation(DataSource.scala:301)</span><br><span class="line">    at org.apache.spark.sql.DataFrameReader.load(DataFrameReader.scala:178)</span><br><span class="line">    at org.apache.spark.sql.DataFrameReader.load(DataFrameReader.scala:146)</span><br><span class="line">    at cn.zhangyu.KuduApp$.main(KuduApp.scala:18)</span><br><span class="line">    at cn.zhangyu.KuduApp.main(KuduApp.scala)</span><br><span class="line">Caused by: java.lang.ClassNotFoundException: kudu.DefaultSource</span><br><span class="line">    at java.net.URLClassLoader.findClass(URLClassLoader.java:381)</span><br><span class="line">    at java.lang.ClassLoader.loadClass(ClassLoader.java:424)</span><br><span class="line">    at sun.misc.Launcher$AppClassLoader.loadClass(Launcher.java:349)</span><br><span class="line">    at java.lang.ClassLoader.loadClass(ClassLoader.java:357)</span><br><span class="line">    at org.apache.spark.sql.execution.datasources.DataSource$$anonfun$21$$anonfun$apply$12.apply(DataSource.scala:533)</span><br><span class="line">    at org.apache.spark.sql.execution.datasources.DataSource$$anonfun$21$$anonfun$apply$12.apply(DataSource.scala:533)</span><br><span class="line">    at scala.util.Try$.apply(Try.scala:192)</span><br><span class="line">    at org.apache.spark.sql.execution.datasources.DataSource$$anonfun$21.apply(DataSource.scala:533)</span><br><span class="line">    at org.apache.spark.sql.execution.datasources.DataSource$$anonfun$21.apply(DataSource.scala:533)</span><br><span class="line">    at scala.util.Try.orElse(Try.scala:84)</span><br><span class="line">    at org.apache.spark.sql.execution.datasources.DataSource$.lookupDataSource(DataSource.scala:533)</span><br><span class="line">    ... 7 more</span><br></pre></td></tr></table></figure><p>而通过KuduContext是可以操作的没有报错,代码为上面注解部分</p><h3 id="解决思路"><a href="#解决思路" class="headerlink" title="解决思路"></a>解决思路</h3><p>查询kudu官网:<a href="https://kudu.apache.org/docs/developing.html" target="_blank" rel="noopener">https://kudu.apache.org/docs/developing.html</a></p><p>官网中说出了版本的问题:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">如果将Spark 2与Scala 2.11一起使用，请使用kudu-spark2_2.11工件。</span><br><span class="line">kudu-spark版本1.8.0及更低版本的语法略有不同。有关有效示例，请参阅您的版本的文档。可以在发布页面上找到版本化文档。</span><br><span class="line">spark-shell --packages org.apache.kudu:kudu-spark2_2.11:1.9.0</span><br><span class="line">看到了 官网使用的是1.9.0的版本.</span><br></pre></td></tr></table></figure><font size="3" color="red">但是但是但是</font><p>官网下面说到了下面几个集成问题:</p><ol><li><font size="3" color="red"><b>Spark 2.2+在运行时需要Java 8，即使Kudu Spark 2.x集成与Java 7兼容。Spark 2.2是Kudu 1.5.0的默认依赖版本。</b></font></li><li>当注册为临时表时，必须为名称包含大写或非ascii字符的Kudu表分配备用名称。</li><li>包含大写或非ascii字符的列名的Kudu表不能与SparkSQL一起使用。可以在Kudu中重命名列以解决此问题。</li><li>&lt;&gt;并且OR谓词不会被推送到Kudu，而是由Spark任务进行评估。只有LIKE带有后缀通配符的谓词才会被推送到Kudu，这意味着它LIKE “FOO%”被推下但LIKE “FOO%BAR”不是。</li><li>Kudu不支持Spark SQL支持的每种类型。例如， Date不支持复杂类型。</li><li>Kudu表只能在SparkSQL中注册为临时表。使用HiveContext可能无法查询Kudu表。</li></ol><font size="3"><b><br>那就很奇怪了我用的1.5.0版本报错为:找不到类,数据源有问题<br><br>但是把kudu改成1.9.0 问题解决<br></b></font><p>运行结果:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">root</span><br><span class="line"> |-- id: string (nullable = false)</span><br><span class="line"> |-- age: string (nullable = true)</span><br><span class="line"> |-- name: string (nullable = true)</span><br></pre></td></tr></table></figure><h3 id="Spark集成最佳实践"><a href="#Spark集成最佳实践" class="headerlink" title="Spark集成最佳实践"></a>Spark集成最佳实践</h3><p>每个群集避免多个Kudu客户端。</p><p>一个常见的Kudu-Spark编码错误是实例化额外的KuduClient对象。在kudu-spark中，a KuduClient属于KuduContext。Spark应用程序代码不应创建另一个KuduClient连接到同一群集。相反，应用程序代码应使用KuduContext访问KuduClient使用</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">KuduContext#syncClient。</span><br><span class="line">  // Use KuduContext to create, delete, or write to Kudu tables</span><br><span class="line">    val kuduContext = new KuduContext(&quot;10.19.120.70:7051&quot;, spark.sparkContext)</span><br><span class="line">    val list = kuduContext.syncClient.getTablesList.getTablesList</span><br><span class="line">    if (list.iterator().hasNext)&#123;</span><br><span class="line">      print(list.iterator().next())</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>要诊断KuduClientSpark作业中的多个实例，请查看主服务器的日志中的符号，这些符号会被来自不同客户端的许多GetTableLocations或 GetTabletLocations请求过载，通常大约在同一时间。这种症状特别适用于Spark Streaming代码，其中创建KuduClient每个任务将导致来自新客户端的主请求的周期性波。</p><h3 id="Spark操作kudu-Scala-demo"><a href="#Spark操作kudu-Scala-demo" class="headerlink" title="Spark操作kudu(Scala demo)"></a>Spark操作kudu(Scala demo)</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br></pre></td><td class="code"><pre><span class="line">package cn.zhangyu</span><br><span class="line">import org.apache.kudu.spark.kudu._</span><br><span class="line">import org.apache.spark.sql.&#123;Row, SparkSession&#125;</span><br><span class="line">import org.apache.spark.sql.types.&#123;IntegerType, StringType, StructField, StructType&#125;</span><br><span class="line">import org.slf4j.LoggerFactory</span><br><span class="line">import org.apache.kudu.client._</span><br><span class="line">import collection.JavaConverters._</span><br><span class="line">object SparkTest &#123;</span><br><span class="line">  //kuduMasters and tableName</span><br><span class="line">  val kuduMasters = &quot;192.168.13.130:7051&quot;</span><br><span class="line">  val tableName = &quot;kudu_spark_table&quot;</span><br><span class="line">  //table column</span><br><span class="line">  val idCol = &quot;id&quot;</span><br><span class="line">  val ageCol = &quot;age&quot;</span><br><span class="line">  val nameCol = &quot;name&quot;</span><br><span class="line">  //replication</span><br><span class="line">  val tableNumReplicas = Integer.getInteger(&quot;tableNumReplicas&quot;, 1)</span><br><span class="line">  val logger = LoggerFactory.getLogger(SparkTest.getClass)</span><br><span class="line">  def main(args: Array[String]): Unit = &#123;</span><br><span class="line">    //create SparkSession</span><br><span class="line">    val spark = SparkSession.builder().appName(&quot;KuduApp&quot;).master(&quot;local[2]&quot;).getOrCreate()</span><br><span class="line">    //create kuduContext</span><br><span class="line">    val kuduContext = new KuduContext(kuduMasters,spark.sparkContext)</span><br><span class="line">    //schema</span><br><span class="line">    val schema = StructType(</span><br><span class="line">      List(</span><br><span class="line">        StructField(idCol, IntegerType, false),</span><br><span class="line">        StructField(nameCol, StringType, false),</span><br><span class="line">        StructField(ageCol,StringType,false)</span><br><span class="line">      )</span><br><span class="line">    )</span><br><span class="line">    var tableIsCreated = false</span><br><span class="line">    try&#123;</span><br><span class="line">    // Make sure the table does not exist</span><br><span class="line">    if (kuduContext.tableExists(tableName)) &#123;</span><br><span class="line">      throw new RuntimeException(tableName + &quot;: table already exists&quot;)</span><br><span class="line">    &#125;</span><br><span class="line">    //create</span><br><span class="line">    kuduContext.createTable(tableName, schema, Seq(idCol),</span><br><span class="line">      new CreateTableOptions()</span><br><span class="line">        .addHashPartitions(List(idCol).asJava, 3)</span><br><span class="line">        .setNumReplicas(tableNumReplicas))</span><br><span class="line">    tableIsCreated = true</span><br><span class="line">    import spark.implicits._</span><br><span class="line">    //write</span><br><span class="line">    logger.info(s&quot;writing to table &apos;$tableName&apos;&quot;)</span><br><span class="line">        val data = Array(Person(1,&quot;12&quot;,&quot;zhangsan&quot;),Person(2,&quot;20&quot;,&quot;lisi&quot;),Person(3,&quot;30&quot;,&quot;wangwu&quot;))</span><br><span class="line">        val personRDD = spark.sparkContext.parallelize(data)</span><br><span class="line">        val personDF = personRDD.toDF()</span><br><span class="line">        kuduContext.insertRows(personDF,tableName)</span><br><span class="line">    //useing SparkSQL read table</span><br><span class="line">    val sqlDF = spark.sqlContext.read</span><br><span class="line">      .options(Map(&quot;kudu.master&quot; -&gt; kuduMasters, &quot;kudu.table&quot; -&gt; tableName))</span><br><span class="line">      .format(&quot;kudu&quot;).kudu</span><br><span class="line">    sqlDF.createOrReplaceTempView(tableName)</span><br><span class="line">    spark.sqlContext.sql(s&quot;SELECT * FROM $tableName &quot;).show</span><br><span class="line">    //upsert some rows</span><br><span class="line">    val upsertPerson = Array(Person(1,&quot;10&quot;,&quot;jack&quot;))</span><br><span class="line">    val upsertPersonRDD = spark.sparkContext.parallelize(upsertPerson)</span><br><span class="line">    val upsertPersonDF = upsertPersonRDD.toDF()</span><br><span class="line">    kuduContext.updateRows(upsertPersonDF,tableName)</span><br><span class="line">    //useing RDD read table</span><br><span class="line">    val readCols = Seq(idCol,ageCol,nameCol)</span><br><span class="line">    val readRDD = kuduContext.kuduRDD(spark.sparkContext, tableName, readCols)</span><br><span class="line">    val userTuple = readRDD.map &#123; case Row( id: Int,age: String,name: String) =&gt; (id,age,name) &#125;</span><br><span class="line">    println(&quot;count:&quot;+userTuple.count())</span><br><span class="line">    userTuple.collect().foreach(println(_))</span><br><span class="line">    //delete table</span><br><span class="line">    kuduContext.deleteTable(tableName)    </span><br><span class="line">    &#125;catch &#123;</span><br><span class="line">      // Catch, log and re-throw. Not the best practice, but this is a very</span><br><span class="line">      // simplistic example.</span><br><span class="line">      case unknown : Throwable =&gt; logger.error(s&quot;got an exception: &quot; + unknown)</span><br><span class="line">        throw unknown</span><br><span class="line">    &#125; finally &#123;</span><br><span class="line">      // Clean up.</span><br><span class="line">      if (tableIsCreated) &#123;</span><br><span class="line">        logger.info(s&quot;deleting table &apos;$tableName&apos;&quot;)</span><br><span class="line">        kuduContext.deleteTable(tableName)</span><br><span class="line">      &#125;</span><br><span class="line">      logger.info(s&quot;closing down the session&quot;)</span><br><span class="line">      spark.close()</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">case class Person(id: Int,age: String,name: String)</span><br></pre></td></tr></table></figure><!-- rebuild by neat -->]]></content>
    
    <summary type="html">
    
      &lt;!-- build time:Fri Jun 14 2019 16:19:57 GMT+0800 (GMT+08:00) --&gt;
    
    </summary>
    
      <category term="Spark Other" scheme="http://yoursite.com/categories/Spark-Other/"/>
    
    
      <category term="spark" scheme="http://yoursite.com/tags/spark/"/>
    
      <category term="高级" scheme="http://yoursite.com/tags/%E9%AB%98%E7%BA%A7/"/>
    
      <category term="Kudu" scheme="http://yoursite.com/tags/Kudu/"/>
    
  </entry>
  
  <entry>
    <title>生产常用Spark累加器剖析之二</title>
    <link href="http://yoursite.com/2019/04/26/%E7%94%9F%E4%BA%A7%E5%B8%B8%E7%94%A8Spark%E7%B4%AF%E5%8A%A0%E5%99%A8%E5%89%96%E6%9E%90%E4%B9%8B%E4%BA%8C/"/>
    <id>http://yoursite.com/2019/04/26/生产常用Spark累加器剖析之二/</id>
    <published>2019-04-25T16:00:00.000Z</published>
    <updated>2019-06-14T08:19:45.607Z</updated>
    
    <content type="html"><![CDATA[<!-- build time:Fri Jun 14 2019 16:19:57 GMT+0800 (GMT+08:00) --><font size="4"><b>Driver端</b></font><ol><li>Driver端初始化构建Accumulator并初始化，同时完成了Accumulator注册，Accumulators.register(this)时Accumulator会在序列化后发送到Executor端</li><li>Driver接收到ResultTask完成的状态更新后，会去更新Value的值 然后在Action操作执行后就可以获取到Accumulator的值了</li></ol><font size="4"><b>Executor端</b></font><ol><li>Executor端接收到Task之后会进行反序列化操作，反序列化得到RDD和function。同时在反序列化的同时也去反序列化Accumulator(在readObject方法中完成)，同时也会向TaskContext完成注册</li><li>完成任务计算之后，随着Task结果一起返回给Driver<a id="more"></a></li></ol><h2 id="结合源码分析"><a href="#结合源码分析" class="headerlink" title="结合源码分析"></a>结合源码分析</h2><font size="4"><b>Driver端初始化</b></font><p>&ensp;&ensp;Driver端主要经过以下步骤，完成初始化操作：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">val accum = sparkContext.accumulator(0, “AccumulatorTest”)</span><br><span class="line">val acc = new Accumulator(initialValue, param, Some(name))</span><br><span class="line">Accumulators.register(this)</span><br></pre></td></tr></table></figure><font size="4"><b>Executor端反序列化得到Accumulator</b></font><p>&ensp;&ensp;反序列化是在调用ResultTask的runTask方式时候做的操作：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">// 会反序列化出来RDD和自己定义的function</span><br><span class="line">val (rdd, func) = ser.deserialize[(RDD[T], (TaskContext, Iterator[T]) =&gt; U)](</span><br><span class="line">   ByteBuffer.wrap(taskBinary.value), Thread.currentThread.getContextClassLoader)</span><br></pre></td></tr></table></figure><p>&ensp;&ensp;在反序列化的过程中，会调用Accumulable中的readObject方法：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">private def readObject(in: ObjectInputStream): Unit = Utils.tryOrIOException &#123;</span><br><span class="line">    in.defaultReadObject()</span><br><span class="line">    // value的初始值为zero；该值是会被序列化的</span><br><span class="line">    value_ = zero</span><br><span class="line">    deserialized = true</span><br><span class="line">    // Automatically register the accumulator when it is deserialized with the task closure.</span><br><span class="line">    //</span><br><span class="line">    // Note internal accumulators sent with task are deserialized before the TaskContext is created</span><br><span class="line">    // and are registered in the TaskContext constructor. Other internal accumulators, such SQL</span><br><span class="line">    // metrics, still need to register here.</span><br><span class="line">    val taskContext = TaskContext.get()</span><br><span class="line">    if (taskContext != null) &#123;</span><br><span class="line">      // 当前反序列化所得到的对象会被注册到TaskContext中</span><br><span class="line">      // 这样TaskContext就可以获取到累加器</span><br><span class="line">      // 任务运行结束之后，就可以通过context.collectAccumulators()返回给executor</span><br><span class="line">      taskContext.registerAccumulator(this)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><font size="4"><b>注意</b></font><p><strong>Accumulable.scala中的value_，是不会被序列化的，@transient关键词修饰了</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">@volatile @transient private var value_ : R = initialValue // Current value on master</span><br></pre></td></tr></table></figure><h2 id="累加器在各个节点的累加操作"><a href="#累加器在各个节点的累加操作" class="headerlink" title="累加器在各个节点的累加操作"></a>累加器在各个节点的累加操作</h2><p>针对传入function中不同的操作，对应有不同的调用方法，以下列举几种（在Accumulator.scala中）：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">def += (term: T) &#123; value_ = param.addAccumulator(value_, term) &#125;</span><br><span class="line">def add(term: T) &#123; value_ = param.addAccumulator(value_, term) &#125;</span><br><span class="line">def ++= (term: R) &#123; value_ = param.addInPlace(value_, term)&#125;</span><br></pre></td></tr></table></figure><p>根据不同的累加器参数，有不同实现的AccumulableParam（在Accumulator.scala中）：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">trait AccumulableParam[R, T] extends Serializable &#123;</span><br><span class="line">  /**</span><br><span class="line">  def addAccumulator(r: R, t: T): R</span><br><span class="line">  def addInPlace(r1: R, r2: R): R</span><br><span class="line">  def zero(initialValue: R): R</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>不同的实现如下图所示：</p><p><img src="/assets/blogImg/累加器在各个节点的操作.png" alt="enter description here"></p><p>以IntAccumulatorParam为例：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">implicit object IntAccumulatorParam extends AccumulatorParam[Int] &#123;</span><br><span class="line">  def addInPlace(t1: Int, t2: Int): Int = t1 + t2</span><br><span class="line">  def zero(initialValue: Int): Int = 0</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>我们发现IntAccumulatorParam实现的是trait AccumulatorParam[T]：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">trait AccumulatorParam[T] extends AccumulableParam[T, T] &#123;</span><br><span class="line">  def addAccumulator(t1: T, t2: T): T = &#123;</span><br><span class="line">    addInPlace(t1, t2)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在各个节点上的累加操作完成之后，就会紧跟着返回更新之后的Accumulators的value_值</p><h2 id="聚合操作"><a href="#聚合操作" class="headerlink" title="聚合操作"></a>聚合操作</h2><p>在Task.scala中的run方法，会执行如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">// 返回累加器，并运行task</span><br><span class="line">// 调用TaskContextImpl的collectAccumulators，返回值的类型为一个Map</span><br><span class="line">(runTask(context), context.collectAccumulators())</span><br></pre></td></tr></table></figure><p>在Executor端已经完成了一系列操作，需要将它们的值返回到Driver端进行聚合汇总，整个顺序如图累加器执行流程：</p><p><img src="/assets/blogImg/累加器执行流程图.png" alt="enter description here"></p><p>根据执行流程，我们可以发现，在执行完collectAccumulators方法之后，最终会在DAGScheduler中调用updateAccumulators(event)，而在该方法中会调用Accumulators的add方法，从而完成聚合操作：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">def add(values: Map[Long, Any]): Unit = synchronized &#123;</span><br><span class="line">  // 遍历传进来的值</span><br><span class="line">  for ((id, value) &lt;- values) &#123;</span><br><span class="line">    if (originals.contains(id)) &#123;</span><br><span class="line">      // Since we are now storing weak references, we must check whether the underlying data</span><br><span class="line">      // is valid.</span><br><span class="line">      // 根据id从注册的Map中取出对应的累加器</span><br><span class="line">      originals(id).get match &#123;</span><br><span class="line">        // 将值给累加起来，最终将结果加到value里面</span><br><span class="line">       // ++=是被重载了</span><br><span class="line">        case Some(accum) =&gt; accum.asInstanceOf[Accumulable[Any, Any]] ++= value</span><br><span class="line">        case None =&gt;</span><br><span class="line">          throw new IllegalAccessError(&quot;Attempted to access garbage collected Accumulator.&quot;)</span><br><span class="line">      &#125;</span><br><span class="line">    &#125; else &#123;</span><br><span class="line">      logWarning(s&quot;Ignoring accumulator update for unknown accumulator id $id&quot;)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="获取累加器的值"><a href="#获取累加器的值" class="headerlink" title="获取累加器的值"></a>获取累加器的值</h2><p>通过accum.value方法可以获取到累加器的值</p><font size="3"><b>至此，累加器执行完毕。</b></font><!-- rebuild by neat -->]]></content>
    
    <summary type="html">
    
      &lt;!-- build time:Fri Jun 14 2019 16:19:57 GMT+0800 (GMT+08:00) --&gt;&lt;font size=&quot;4&quot;&gt;&lt;b&gt;Driver端&lt;/b&gt;&lt;/font&gt;&lt;ol&gt;&lt;li&gt;Driver端初始化构建Accumulator并初始化，同时完成了Accumulator注册，Accumulators.register(this)时Accumulator会在序列化后发送到Executor端&lt;/li&gt;&lt;li&gt;Driver接收到ResultTask完成的状态更新后，会去更新Value的值 然后在Action操作执行后就可以获取到Accumulator的值了&lt;/li&gt;&lt;/ol&gt;&lt;font size=&quot;4&quot;&gt;&lt;b&gt;Executor端&lt;/b&gt;&lt;/font&gt;&lt;ol&gt;&lt;li&gt;Executor端接收到Task之后会进行反序列化操作，反序列化得到RDD和function。同时在反序列化的同时也去反序列化Accumulator(在readObject方法中完成)，同时也会向TaskContext完成注册&lt;/li&gt;&lt;li&gt;完成任务计算之后，随着Task结果一起返回给Driver&lt;/li&gt;&lt;/ol&gt;
    
    </summary>
    
      <category term="Spark Other" scheme="http://yoursite.com/categories/Spark-Other/"/>
    
    
      <category term="spark" scheme="http://yoursite.com/tags/spark/"/>
    
      <category term="累加器" scheme="http://yoursite.com/tags/%E7%B4%AF%E5%8A%A0%E5%99%A8/"/>
    
  </entry>
  
  <entry>
    <title>spark2.4.2详细介绍</title>
    <link href="http://yoursite.com/2019/04/23/spark2.4.2%E8%AF%A6%E7%BB%86%E4%BB%8B%E7%BB%8D/"/>
    <id>http://yoursite.com/2019/04/23/spark2.4.2详细介绍/</id>
    <published>2019-04-22T16:00:00.000Z</published>
    <updated>2019-06-01T13:52:44.021Z</updated>
    
    <content type="html"><![CDATA[<!-- build time:Fri Jun 14 2019 16:19:57 GMT+0800 (GMT+08:00) --><p>Spark发布了最新的版本spark-2.4.2<br>根据官网介绍，此版本对于使用spark2.4的用户来说帮助是巨大的</p><h4 id="版本介绍"><a href="#版本介绍" class="headerlink" title="版本介绍"></a>版本介绍</h4><p><img src="/assets/blogImg/spark2.4.2_1.jpg" alt="enter description here"><br>Spark2.4.2是一个包含稳定性修复的维护版本。 此版本基于Spark2.4维护分支。<font color="#FF4500"> <strong>我们强烈建议所有2.4用户升级到此稳定版本。</strong></font><br><a id="more"></a></p><h4 id="显著的变化"><a href="#显著的变化" class="headerlink" title="显著的变化"></a>显著的变化</h4><p><img src="/assets/blogImg/spark2.4.2_2.jpg" alt="enter description here"></p><ul><li>SPARK-27419：在spark2.4中将spark.executor.heartbeatInterval设置为小于1秒的值时，它将始终失败。 因为该值将转换为0，心跳将始终超时，并最终终止执行程序。</li><li>还原SPARK-25250：可能导致作业永久挂起，在2.4.2中还原。</li></ul><h4 id="详细更改"><a href="#详细更改" class="headerlink" title="详细更改"></a>详细更改</h4><p><img src="/assets/blogImg/spark2.4.2_3.jpg" alt="enter description here"></p><h6 id="BUG"><a href="#BUG" class="headerlink" title="BUG"></a>BUG</h6><table><thead><tr><th>issues</th><th>内容摘要</th></tr></thead><tbody><tr><td><a href="https://issues.apache.org/jira/browse/SPARK-26961" target="_blank" rel="noopener">[ SPARK-26961 ]</a></td><td>在Spark Driver中发现Java死锁</td></tr><tr><td><a href="https://issues.apache.org/jira/browse/SPARK-26998" target="_blank" rel="noopener">[ SPARK-26998 ]</a></td><td>在Standalone模式下执行’ps -ef’程序进程,输出spark.ssl.keyStorePassword的明文</td></tr><tr><td><a href="https://issues.apache.org/jira/browse/SPARK-27216" target="_blank" rel="noopener">[ SPARK-27216 ]</a></td><td>将RoaringBitmap升级到0.7.45以修复Kryo不安全的ser / dser问题</td></tr><tr><td><a href="https://issues.apache.org/jira/browse/SPARK-27244" target="_blank" rel="noopener">[ SPARK-27244 ]</a></td><td>使用选项logConf = true时密码将以conf的明文形式记录</td></tr><tr><td><a href="https://issues.apache.org/jira/browse/SPARK-27267" target="_blank" rel="noopener">[ SPARK-27267 ]</a></td><td>用Snappy 1.1.7.1解压、压缩空序列化数据时失败</td></tr><tr><td><a href="https://issues.apache.org/jira/browse/SPARK-27275" target="_blank" rel="noopener">[ SPARK-27275 ]</a></td><td>EncryptedMessage.transferTo中的潜在损坏</td></tr><tr><td><a href="https://issues.apache.org/jira/browse/SPARK-27301" target="_blank" rel="noopener">[ SPARK-27301 ]</a></td><td>DStreamCheckpointData因文件系统已缓存而无法清理</td></tr><tr><td><a href="https://issues.apache.org/jira/browse/SPARK-27338" target="_blank" rel="noopener">[ SPARK-27338 ]</a></td><td>TaskMemoryManager和UnsafeExternalSorter $ SpillableIterator之间的死锁</td></tr><tr><td><a href="https://issues.apache.org/jira/browse/SPARK-27351" target="_blank" rel="noopener">[ SPARK-27351 ]</a></td><td>在仅使用空值列的AggregateEstimation之后的错误outputRows估计</td></tr><tr><td><a href="https://issues.apache.org/jira/browse/SPARK-27390" target="_blank" rel="noopener">[ SPARK-27390 ]</a></td><td>修复包名称不匹配</td></tr><tr><td><a href="https://issues.apache.org/jira/browse/SPARK-27394" target="_blank" rel="noopener">[ SPARK-27394 ]</a></td><td>当没有任务开始或结束时，UI 的陈旧性可能持续数分钟或数小时</td></tr><tr><td><a href="https://issues.apache.org/jira/browse/SPARK-27403" target="_blank" rel="noopener">[ SPARK-27403 ]</a></td><td>修复updateTableStats以使用新统计信息或无更新表统计信息</td></tr><tr><td><a href="https://issues.apache.org/jira/browse/SPARK-27406" target="_blank" rel="noopener">[ SPARK-27406 ]</a></td><td>当两台机器具有不同的Oops大小时，UnsafeArrayData序列化会中断</td></tr><tr><td><a href="https://issues.apache.org/jira/browse/SPARK-27419" target="_blank" rel="noopener">[ SPARK-27419 ]</a></td><td>将spark.executor.heartbeatInterval设置为小于1秒的值时，它将始终失败</td></tr><tr><td><a href="https://issues.apache.org/jira/browse/SPARK-27453" target="_blank" rel="noopener">[ SPARK-27453 ]</a></td><td>DSV1静默删除DataFrameWriter.partitionBy</td></tr></tbody></table><h6 id="改进"><a href="#改进" class="headerlink" title="改进"></a>改进</h6><table><thead><tr><th>issues</th><th>内容摘要</th></tr></thead><tbody><tr><td><a href="https://issues.apache.org/jira/browse/SPARK-27346" target="_blank" rel="noopener">[ SPARK-27346 ]</a></td><td>松开在ExpressionInfo的’examples’字段中换行断言条件</td></tr><tr><td><a href="https://issues.apache.org/jira/browse/SPARK-27358" target="_blank" rel="noopener">[ SPARK-27358 ]</a></td><td>将jquery更新为1.12.x以获取安全修复程序</td></tr><tr><td><a href="https://issues.apache.org/jira/browse/SPARK-27479" target="_blank" rel="noopener">[ SPARK-27479 ]</a></td><td>隐藏“org.apache.spark.util.kvstore”的API文档</td></tr></tbody></table><h6 id="工作"><a href="#工作" class="headerlink" title="工作"></a>工作</h6><table><thead><tr><th>issues</th><th>内容摘要</th></tr></thead><tbody><tr><td><a href="https://issues.apache.org/jira/browse/SPARK-27382" target="_blank" rel="noopener">[ SPARK-27382 ]</a></td><td>在HiveExternalCatalogVersionsSuite中更新Spark 2.4.x测试</td></tr></tbody></table><!-- rebuild by neat -->]]></content>
    
    <summary type="html">
    
      &lt;!-- build time:Fri Jun 14 2019 16:19:57 GMT+0800 (GMT+08:00) --&gt;&lt;p&gt;Spark发布了最新的版本spark-2.4.2&lt;br&gt;根据官网介绍，此版本对于使用spark2.4的用户来说帮助是巨大的&lt;/p&gt;&lt;h4 id=&quot;版本介绍&quot;&gt;&lt;a href=&quot;#版本介绍&quot; class=&quot;headerlink&quot; title=&quot;版本介绍&quot;&gt;&lt;/a&gt;版本介绍&lt;/h4&gt;&lt;p&gt;&lt;img src=&quot;/assets/blogImg/spark2.4.2_1.jpg&quot; alt=&quot;enter description here&quot;&gt;&lt;br&gt;Spark2.4.2是一个包含稳定性修复的维护版本。 此版本基于Spark2.4维护分支。&lt;font color=&quot;#FF4500&quot;&gt; &lt;strong&gt;我们强烈建议所有2.4用户升级到此稳定版本。&lt;/strong&gt;&lt;/font&gt;&lt;br&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="Spark Other" scheme="http://yoursite.com/categories/Spark-Other/"/>
    
    
      <category term="spark" scheme="http://yoursite.com/tags/spark/"/>
    
      <category term="高级" scheme="http://yoursite.com/tags/%E9%AB%98%E7%BA%A7/"/>
    
  </entry>
  
  <entry>
    <title>生产常用Spark累加器剖析之一</title>
    <link href="http://yoursite.com/2019/04/19/%E7%94%9F%E4%BA%A7%E5%B8%B8%E7%94%A8Spark%E7%B4%AF%E5%8A%A0%E5%99%A8%E5%89%96%E6%9E%90%E4%B9%8B%E4%B8%80/"/>
    <id>http://yoursite.com/2019/04/19/生产常用Spark累加器剖析之一/</id>
    <published>2019-04-18T16:00:00.000Z</published>
    <updated>2019-06-14T06:55:53.195Z</updated>
    
    <content type="html"><![CDATA[<!-- build time:Fri Jun 14 2019 16:19:57 GMT+0800 (GMT+08:00) --><p><strong>由于最近在项目中需要用到Spark的累加器，同时需要自己去自定义实现Spark的累加器，从而满足生产上的需求。对此，对Spark的累加器实现机制进行了追踪学习。</strong></p><p>本系列文章，将从以下几个方面入手，对Spark累加器进行剖析：</p><ol><li>Spark累加器的基本概念</li><li>累加器的重点类构成</li><li>累加器的源码解析</li><li>累加器的执行过程</li><li>累加器使用中的坑</li><li>自定义累加器的实现<a id="more"></a><h2 id="Spark累加器基本概念"><a href="#Spark累加器基本概念" class="headerlink" title="Spark累加器基本概念"></a>Spark累加器基本概念</h2></li></ol><p>Spark提供的Accumulator，主要用于多个节点对一个变量进行共享性的操作。Accumulator只提供了累加的功能，只能累加，不能减少累加器只能在Driver端构建，并只能从Driver端读取结果，在Task端只能进行累加。</p><p>至于这里为什么只能在Task累加呢？下面的内容将会进行详细的介绍，先简单介绍下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">在Task节点，准确的就是说在executor上；</span><br><span class="line">每个Task都会有一个累加器的变量，被序列化传输到executor端运行之后再返回过来都是独立运行的；</span><br><span class="line">如果在Task端去获取值的话，只能获取到当前Task的，Task与Task之间不会有影响</span><br></pre></td></tr></table></figure><p>累加器不会改变Spark lazy计算的特点，只会在Job触发的时候进行相关的累加操作</p><p>现有累加器类型:</p><p><img src="/assets/blogImg/Spark累加器类型_1.png" alt="enter description here"></p><h2 id="累加器的重点类介绍"><a href="#累加器的重点类介绍" class="headerlink" title="累加器的重点类介绍"></a>累加器的重点类介绍</h2><font size="4"><b>class Accumulator extends Accumulable</b></font><p>源码（源码中已经对这个类的作用做了十分详细的解释）：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">/**</span><br><span class="line"> * A simpler value of [[Accumulable]] where the result type being accumulated is the same</span><br><span class="line"> * as the types of elements being merged, i.e. variables that are only &quot;added&quot; to through an</span><br><span class="line"> * associative operation and can therefore be efficiently supported in parallel. They can be used</span><br><span class="line"> * to implement counters (as in MapReduce) or sums. Spark natively supports accumulators of numeric</span><br><span class="line"> * value types, and programmers can add support for new types.</span><br><span class="line"> *</span><br><span class="line"> * An accumulator is created from an initial value `v` by calling [[SparkContext#accumulator]].</span><br><span class="line"> * Tasks running on the cluster can then add to it using the [[Accumulable#+=]] operator.</span><br><span class="line"> * However, they cannot read its value. Only the driver program can read the accumulator&apos;s value,</span><br><span class="line"> * using its value method.</span><br><span class="line"> *</span><br><span class="line"> * @param initialValue initial value of accumulator</span><br><span class="line"> * @param param helper object defining how to add elements of type `T`</span><br><span class="line"> * @tparam T result type</span><br><span class="line"> */</span><br><span class="line">class Accumulator[T] private[spark] (</span><br><span class="line">    @transient private[spark] val initialValue: T,</span><br><span class="line">    param: AccumulatorParam[T],</span><br><span class="line">    name: Option[String],</span><br><span class="line">    internal: Boolean)</span><br><span class="line">  extends Accumulable[T, T](initialValue, param, name, internal) &#123;</span><br><span class="line">  def this(initialValue: T, param: AccumulatorParam[T], name: Option[String]) = &#123;</span><br><span class="line">    this(initialValue, param, name, false)</span><br><span class="line">  &#125;</span><br><span class="line">  def this(initialValue: T, param: AccumulatorParam[T]) = &#123;</span><br><span class="line">    this(initialValue, param, None, false)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><pre><code>主要实现了累加器的初始化及封装了相关的累加器操作方法同时在类对象构建的时候向Accumulators注册累加器累加器的add操作的返回值类型和传入进去的值类型可以不一样所以一定要定义好两步操作（即add方法）：累加操作/合并操作</code></pre><font size="4"><b>object Accumulators</b></font><pre><code>该方法在Driver端管理着累加器，也包含了累加器的聚合操作</code></pre><font size="4"><b>trait AccumulatorParam[T] extends AccumulableParam[T, T]</b></font><p>源码：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">/**</span><br><span class="line"> * A simpler version of [[org.apache.spark.AccumulableParam]] where the only data type you can add</span><br><span class="line"> * in is the same type as the accumulated value. An implicit AccumulatorParam object needs to be</span><br><span class="line"> * available when you create Accumulators of a specific type.</span><br><span class="line"> *</span><br><span class="line"> * @tparam T type of value to accumulate</span><br><span class="line"> */</span><br><span class="line">trait AccumulatorParam[T] extends AccumulableParam[T, T] &#123;</span><br><span class="line">  def addAccumulator(t1: T, t2: T): T = &#123;</span><br><span class="line">    addInPlace(t1, t2)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><pre><code>AccumulatorParam的addAccumulator操作的泛型封装具体的实现还是需要在具体实现类里面实现addInPlace方法自定义实现累加器的关键</code></pre><font size="4"><b>object AccumulatorParam</b></font><p>源码：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">object AccumulatorParam &#123;</span><br><span class="line">  // The following implicit objects were in SparkContext before 1.2 and users had to</span><br><span class="line">  // `import SparkContext._` to enable them. Now we move them here to make the compiler find</span><br><span class="line">  // them automatically. However, as there are duplicate codes in SparkContext for backward</span><br><span class="line">  // compatibility, please update them accordingly if you modify the following implicit objects.</span><br><span class="line">  implicit object DoubleAccumulatorParam extends AccumulatorParam[Double] &#123;</span><br><span class="line">    def addInPlace(t1: Double, t2: Double): Double = t1 + t2</span><br><span class="line">    def zero(initialValue: Double): Double = 0.0</span><br><span class="line">  &#125;</span><br><span class="line">  implicit object IntAccumulatorParam extends AccumulatorParam[Int] &#123;</span><br><span class="line">    def addInPlace(t1: Int, t2: Int): Int = t1 + t2</span><br><span class="line">    def zero(initialValue: Int): Int = 0</span><br><span class="line">  &#125;</span><br><span class="line">  implicit object LongAccumulatorParam extends AccumulatorParam[Long] &#123;</span><br><span class="line">    def addInPlace(t1: Long, t2: Long): Long = t1 + t2</span><br><span class="line">    def zero(initialValue: Long): Long = 0L</span><br><span class="line">  &#125;</span><br><span class="line">  implicit object FloatAccumulatorParam extends AccumulatorParam[Float] &#123;</span><br><span class="line">    def addInPlace(t1: Float, t2: Float): Float = t1 + t2</span><br><span class="line">    def zero(initialValue: Float): Float = 0f</span><br><span class="line">  &#125;</span><br><span class="line">  // TODO: Add AccumulatorParams for other types, e.g. lists and strings</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><pre><code>从源码中大量的implicit关键词，可以发现该类主要进行隐式类型转换的操作</code></pre><font size="4"><b>TaskContextImpl</b></font><pre><code>在Executor端管理着我们的累加器，累加器是通过该类进行返回的</code></pre><h2 id="累加器的源码解析"><a href="#累加器的源码解析" class="headerlink" title="累加器的源码解析"></a>累加器的源码解析</h2><font size="4"><b>Driver端</b></font><p>&ensp;&ensp;<font size="3"><b>accumulator方法</b></font></p><p>以下列这段代码中的accumulator方法为入口点，进入到相应的源码中去</p><p><code>val acc = new Accumulator(initialValue, param, Some(name))</code></p><p>源码：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">class Accumulator[T] private[spark] (</span><br><span class="line">    @transient private[spark] val initialValue: T,</span><br><span class="line">    param: AccumulatorParam[T],</span><br><span class="line">    name: Option[String],</span><br><span class="line">    internal: Boolean)</span><br><span class="line">  extends Accumulable[T, T](initialValue, param, name, internal) &#123;</span><br><span class="line">  def this(initialValue: T, param: AccumulatorParam[T], name: Option[String]) = &#123;</span><br><span class="line">    this(initialValue, param, name, false)</span><br><span class="line">  &#125;</span><br><span class="line">  def this(initialValue: T, param: AccumulatorParam[T]) = &#123;</span><br><span class="line">    this(initialValue, param, None, false)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>&ensp;&ensp;<font size="3"><b>继承的Accumulable[T, T]</b></font></p><p>源码：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">class Accumulable[R, T] private[spark] (</span><br><span class="line">    initialValue: R,</span><br><span class="line">    param: AccumulableParam[R, T],</span><br><span class="line">    val name: Option[String],</span><br><span class="line">    internal: Boolean)</span><br><span class="line">  extends Serializable &#123;</span><br><span class="line">…</span><br><span class="line">// 这里的_value并不支持序列化</span><br><span class="line">// 注：有@transient的都不会被序列化</span><br><span class="line">@volatile @transient private var value_ : R = initialValue // Current value on master</span><br><span class="line">  …</span><br><span class="line">  // 注册了当前的累加器</span><br><span class="line">  Accumulators.register(this)</span><br><span class="line">  …,</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><p>&ensp;&ensp;<font size="3"><b>Accumulators.register()</b></font></p><p>源码：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">// 传入参数，注册累加器</span><br><span class="line">def register(a: Accumulable[_, _]): Unit = synchronized &#123;</span><br><span class="line">// 构造成WeakReference</span><br><span class="line">originals(a.id) = new WeakReference[Accumulable[_, _]](a)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><font size="3"><b>至此，Driver端的初始化已经完成</b></font> <font size="4"><b>Executor端</b></font><pre><code>Executor端的反序列化是一个得到我们的对象的过程初始化是在反序列化的时候就完成的，同时反序列化的时候还完成了Accumulator向TaskContextImpl的注册</code></pre><p>&ensp;&ensp;<font size="3"><b>TaskRunner中的run方法</b></font></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line">// 在计算的过程中，会将RDD和function经过序列化之后传给Executor端</span><br><span class="line">private[spark] class Executor(</span><br><span class="line">    executorId: String,</span><br><span class="line">    executorHostname: String,</span><br><span class="line">    env: SparkEnv,</span><br><span class="line">    userClassPath: Seq[URL] = Nil,</span><br><span class="line">    isLocal: Boolean = false)</span><br><span class="line">  extends Logging &#123;</span><br><span class="line">...</span><br><span class="line">  class TaskRunner(</span><br><span class="line">      execBackend: ExecutorBackend,</span><br><span class="line">      val taskId: Long,</span><br><span class="line">      val attemptNumber: Int,</span><br><span class="line">      taskName: String,</span><br><span class="line">      serializedTask: ByteBuffer)</span><br><span class="line">    extends Runnable &#123;</span><br><span class="line">…</span><br><span class="line">override def run(): Unit = &#123;</span><br><span class="line">    …</span><br><span class="line">val (value, accumUpdates) = try &#123;</span><br><span class="line">         // 调用TaskRunner中的task.run方法，触发task的运行</span><br><span class="line">         val res = task.run(</span><br><span class="line">           taskAttemptId = taskId,</span><br><span class="line">           attemptNumber = attemptNumber,</span><br><span class="line">           metricsSystem = env.metricsSystem)</span><br><span class="line">         threwException = false</span><br><span class="line">         res</span><br><span class="line">       &#125; finally &#123;</span><br><span class="line">        …</span><br><span class="line">       &#125;</span><br><span class="line">…</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>&ensp;&ensp;<font size="3"><b>Task中的collectAccumulators()方法</b></font></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">private[spark] abstract class Task[T](</span><br><span class="line">final def run(</span><br><span class="line">    taskAttemptId: Long,</span><br><span class="line">    attemptNumber: Int,</span><br><span class="line">    metricsSystem: MetricsSystem)</span><br><span class="line">  : (T, AccumulatorUpdates) = &#123;</span><br><span class="line">  …</span><br><span class="line">    try &#123;</span><br><span class="line">      // 返回累加器，并运行task</span><br><span class="line">      // 调用TaskContextImpl的collectAccumulators，返回值的类型为一个Map</span><br><span class="line">      (runTask(context), context.collectAccumulators())</span><br><span class="line">    &#125; finally &#123;</span><br><span class="line">  …</span><br><span class="line"> &#125;</span><br><span class="line"> …</span><br><span class="line"> &#125;</span><br><span class="line">)</span><br></pre></td></tr></table></figure><p>&ensp;&ensp;<font size="3"><b>ResultTask中的runTask方法</b></font></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">override def runTask(context: TaskContext): U = &#123;</span><br><span class="line">  // Deserialize the RDD and the func using the broadcast variables.</span><br><span class="line">  val deserializeStartTime = System.currentTimeMillis()</span><br><span class="line">  val ser = SparkEnv.get.closureSerializer.newInstance()</span><br><span class="line">  // 反序列化是在调用ResultTask的runTask方法的时候做的</span><br><span class="line">  // 会反序列化出来RDD和自己定义的function</span><br><span class="line">  val (rdd, func) = ser.deserialize[(RDD[T], (TaskContext, Iterator[T]) =&gt; U)](</span><br><span class="line">    ByteBuffer.wrap(taskBinary.value), Thread.currentThread.getContextClassLoader)</span><br><span class="line">  _executorDeserializeTime = System.currentTimeMillis() - deserializeStartTime</span><br><span class="line">  metrics = Some(context.taskMetrics)</span><br><span class="line">  func(context, rdd.iterator(partition, context))</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>&ensp;&ensp;<font size="3"><b>Accumulable中的readObject方法</b></font></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">// 在反序列化的过程中会调用Accumulable.readObject方法</span><br><span class="line">  // Called by Java when deserializing an object</span><br><span class="line">  private def readObject(in: ObjectInputStream): Unit = Utils.tryOrIOException &#123;</span><br><span class="line">    in.defaultReadObject()</span><br><span class="line">    // value的初始值为zero；该值是会被序列化的</span><br><span class="line">    value_ = zero</span><br><span class="line">    deserialized = true</span><br><span class="line">    // Automatically register the accumulator when it is deserialized with the task closure.</span><br><span class="line">    //</span><br><span class="line">    // Note internal accumulators sent with task are deserialized before the TaskContext is created</span><br><span class="line">    // and are registered in the TaskContext constructor. Other internal accumulators, such SQL</span><br><span class="line">    // metrics, still need to register here.</span><br><span class="line">    val taskContext = TaskContext.get()</span><br><span class="line">    if (taskContext != null) &#123;</span><br><span class="line">      // 当前反序列化所得到的对象会被注册到TaskContext中</span><br><span class="line">      // 这样TaskContext就可以获取到累加器</span><br><span class="line">      // 任务运行结束之后，就可以通过context.collectAccumulators()返回给executor</span><br><span class="line">      taskContext.registerAccumulator(this)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><p>&ensp;&ensp;<font size="3"><b>Executor.scala</b></font></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">// 在executor端拿到accumuUpdates值之后，会去构造一个DirectTaskResult</span><br><span class="line">val directResult = new DirectTaskResult(valueBytes, accumUpdates, task.metrics.orNull)</span><br><span class="line">val serializedDirectResult = ser.serialize(directResult)</span><br><span class="line">val resultSize = serializedDirectResult.limit</span><br><span class="line">…</span><br><span class="line">// 最终由ExecutorBackend的statusUpdate方法发送至Driver端</span><br><span class="line">// ExecutorBackend为一个Trait，有多种实现</span><br><span class="line">execBackend.statusUpdate(taskId, TaskState.FINISHED, serializedResult)</span><br></pre></td></tr></table></figure><p>&ensp;&ensp;<font size="3"><b>CoarseGrainedExecutorBackend中的statusUpdate方法</b></font></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">// 通过ExecutorBackend的一个实现类：CoarseGrainedExecutorBackend 中的statusUpdate方法</span><br><span class="line">// 将数据发送至Driver端</span><br><span class="line">override def statusUpdate(taskId: Long, state: TaskState, data: ByteBuffer) &#123;</span><br><span class="line">    val msg = StatusUpdate(executorId, taskId, state, data)</span><br><span class="line">    driver match &#123;</span><br><span class="line">      case Some(driverRef) =&gt; driverRef.send(msg)</span><br><span class="line">      case None =&gt; logWarning(s&quot;Drop $msg because has not yet connected to driver&quot;)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><p>&ensp;&ensp;<font size="3"><b>CoarseGrainedSchedulerBackend中的receive方法</b></font></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">// Driver端在接收到消息之后，会调用CoarseGrainedSchedulerBackend中的receive方法</span><br><span class="line">override def receive: PartialFunction[Any, Unit] = &#123;</span><br><span class="line">      case StatusUpdate(executorId, taskId, state, data) =&gt;</span><br><span class="line">        // 会在DAGScheduler的handleTaskCompletion方法中将结果返回</span><br><span class="line">        scheduler.statusUpdate(taskId, state, data.value)</span><br><span class="line">    …</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>&ensp;&ensp;<font size="3"><b>TaskSchedulerImpl的statusUpdate方法</b></font></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">def statusUpdate(tid: Long, state: TaskState, serializedData: ByteBuffer) &#123;</span><br><span class="line">  …</span><br><span class="line">            if (state == TaskState.FINISHED) &#123;</span><br><span class="line">              taskSet.removeRunningTask(tid)</span><br><span class="line">              // 将成功的Task入队</span><br><span class="line">              taskResultGetter.enqueueSuccessfulTask(taskSet, tid, serializedData)</span><br><span class="line">            &#125; else if (Set(TaskState.FAILED, TaskState.KILLED, TaskState.LOST).contains(state)) &#123;</span><br><span class="line">              taskSet.removeRunningTask(tid)</span><br><span class="line">              taskResultGetter.enqueueFailedTask(taskSet, tid, state, serializedData)</span><br><span class="line">            &#125;</span><br><span class="line">  …</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>&ensp;&ensp;<font size="3"><b>TaskResultGetter的enqueueSuccessfulTask方法</b></font></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">def enqueueSuccessfulTask(taskSetManager: TaskSetManager, tid: Long, serializedData: ByteBuffer) &#123;</span><br><span class="line">…</span><br><span class="line">          result.metrics.setResultSize(size)</span><br><span class="line">          scheduler.handleSuccessfulTask(taskSetManager, tid, result)</span><br><span class="line">…</span><br></pre></td></tr></table></figure><p>&ensp;&ensp;<font size="3"><b>TaskSchedulerImpl的handleSuccessfulTask方法</b></font></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">def handleSuccessfulTask(</span><br><span class="line">      taskSetManager: TaskSetManager,</span><br><span class="line">      tid: Long,</span><br><span class="line">      taskResult: DirectTaskResult[_]): Unit = synchronized &#123;</span><br><span class="line">    taskSetManager.handleSuccessfulTask(tid, taskResult)</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><p>&ensp;&ensp;<font size="3"><b>DAGScheduler的taskEnded方法</b></font></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">def taskEnded(</span><br><span class="line">     task: Task[_],</span><br><span class="line">     reason: TaskEndReason,</span><br><span class="line">     result: Any,</span><br><span class="line">     accumUpdates: Map[Long, Any],</span><br><span class="line">     taskInfo: TaskInfo,</span><br><span class="line">     taskMetrics: TaskMetrics): Unit = &#123;</span><br><span class="line"> eventProcessLoop.post(</span><br><span class="line">     // 给自身的消息循环体发了个CompletionEvent</span><br><span class="line">     // 这个CompletionEvent会被handleTaskCompletion方法所接收到</span><br><span class="line">     CompletionEvent(task, reason, result, accumUpdates, taskInfo, taskMetrics))</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure><p>&ensp;&ensp;<font size="3"><b>DAGScheduler的handleTaskCompletion方法</b></font></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">// 与上述CoarseGrainedSchedulerBackend中的receive方法章节对应</span><br><span class="line">// 在handleTaskCompletion方法中，接收CompletionEvent</span><br><span class="line">// 不论是ResultTask还是ShuffleMapTask都会去调用updateAccumulators方法，更新累加器的值</span><br><span class="line">private[scheduler] def handleTaskCompletion(event: CompletionEvent) &#123;</span><br><span class="line">    …</span><br><span class="line">    event.reason match &#123;</span><br><span class="line">      case Success =&gt;</span><br><span class="line">        listenerBus.post(SparkListenerTaskEnd(stageId, stage.latestInfo.attemptId, taskType,</span><br><span class="line">          event.reason, event.taskInfo, event.taskMetrics))</span><br><span class="line">        stage.pendingPartitions -= task.partitionId</span><br><span class="line">        task match &#123;</span><br><span class="line">          case rt: ResultTask[_, _] =&gt;</span><br><span class="line">            // Cast to ResultStage here because it&apos;s part of the ResultTask</span><br><span class="line">            // TODO Refactor this out to a function that accepts a ResultStage</span><br><span class="line">            val resultStage = stage.asInstanceOf[ResultStage]</span><br><span class="line">            resultStage.activeJob match &#123;</span><br><span class="line">              case Some(job) =&gt;</span><br><span class="line">                if (!job.finished(rt.outputId)) &#123;</span><br><span class="line">                  updateAccumulators(event)</span><br><span class="line">          case smt: ShuffleMapTask =&gt;</span><br><span class="line">            val shuffleStage = stage.asInstanceOf[ShuffleMapStage]</span><br><span class="line">            updateAccumulators(event)</span><br><span class="line">&#125;</span><br><span class="line">…</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>&ensp;&ensp;<font size="3"><b>DAGScheduler的updateAccumulators方法</b></font></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">private def updateAccumulators(event: CompletionEvent): Unit = &#123;</span><br><span class="line">   val task = event.task</span><br><span class="line">   val stage = stageIdToStage(task.stageId)</span><br><span class="line">   if (event.accumUpdates != null) &#123;</span><br><span class="line">     try &#123;</span><br><span class="line">       // 调用了累加器的add方法</span><br><span class="line">       Accumulators.add(event.accumUpdates)</span><br></pre></td></tr></table></figure><p>&ensp;&ensp;<font size="3"><b>Accumulators的add方法</b></font></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">def add(values: Map[Long, Any]): Unit = synchronized &#123;</span><br><span class="line">    // 遍历传进来的值</span><br><span class="line">    for ((id, value) &lt;- values) &#123;</span><br><span class="line">      if (originals.contains(id)) &#123;</span><br><span class="line">        // Since we are now storing weak references, we must check whether the underlying data</span><br><span class="line">        // is valid.</span><br><span class="line">        // 根据id从注册的Map中取出对应的累加器</span><br><span class="line">        originals(id).get match &#123;</span><br><span class="line">          // 将值给累加起来，最终将结果加到value里面</span><br><span class="line">          // ++=是被重载了</span><br><span class="line">          case Some(accum) =&gt; accum.asInstanceOf[Accumulable[Any, Any]] ++= value</span><br><span class="line">          case None =&gt;</span><br><span class="line">            throw new IllegalAccessError(&quot;Attempted to access garbage collected Accumulator.&quot;)</span><br><span class="line">        &#125;</span><br><span class="line">      &#125; else &#123;</span><br><span class="line">        logWarning(s&quot;Ignoring accumulator update for unknown accumulator id $id&quot;)</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><p>&ensp;&ensp;<font size="3"><b>Accumulators的++=方法</b></font></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">def ++= (term: R) &#123; value_ = param.addInPlace(value_, term)&#125;</span><br></pre></td></tr></table></figure><p>&ensp;&ensp;<font size="3"><b>Accumulators的value方法</b></font></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">def value: R = &#123;</span><br><span class="line">   if (!deserialized) &#123;</span><br><span class="line">     value_</span><br><span class="line">   &#125; else &#123;</span><br><span class="line">     throw new UnsupportedOperationException(&quot;Can&apos;t read accumulator value in task&quot;)</span><br><span class="line">   &#125;</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure><font size="4"><b>此时我们的应用程序就可以通过 .value 的方式去获取计数器的值了</b></font><!-- rebuild by neat -->]]></content>
    
    <summary type="html">
    
      &lt;!-- build time:Fri Jun 14 2019 16:19:57 GMT+0800 (GMT+08:00) --&gt;&lt;p&gt;&lt;strong&gt;由于最近在项目中需要用到Spark的累加器，同时需要自己去自定义实现Spark的累加器，从而满足生产上的需求。对此，对Spark的累加器实现机制进行了追踪学习。&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;本系列文章，将从以下几个方面入手，对Spark累加器进行剖析：&lt;/p&gt;&lt;ol&gt;&lt;li&gt;Spark累加器的基本概念&lt;/li&gt;&lt;li&gt;累加器的重点类构成&lt;/li&gt;&lt;li&gt;累加器的源码解析&lt;/li&gt;&lt;li&gt;累加器的执行过程&lt;/li&gt;&lt;li&gt;累加器使用中的坑&lt;/li&gt;&lt;li&gt;自定义累加器的实现&lt;/li&gt;&lt;/ol&gt;
    
    </summary>
    
      <category term="Spark Other" scheme="http://yoursite.com/categories/Spark-Other/"/>
    
    
      <category term="spark" scheme="http://yoursite.com/tags/spark/"/>
    
      <category term="累加器" scheme="http://yoursite.com/tags/%E7%B4%AF%E5%8A%A0%E5%99%A8/"/>
    
  </entry>
  
  <entry>
    <title>生产Spark2.4.0如何Debug源代码</title>
    <link href="http://yoursite.com/2019/04/17/%E7%94%9F%E4%BA%A7Spark2.4.0%E5%A6%82%E4%BD%95Debug%E6%BA%90%E4%BB%A3%E7%A0%81/"/>
    <id>http://yoursite.com/2019/04/17/生产Spark2.4.0如何Debug源代码/</id>
    <published>2019-04-16T16:00:00.000Z</published>
    <updated>2019-06-14T06:48:04.793Z</updated>
    
    <content type="html"><![CDATA[<!-- build time:Fri Jun 14 2019 16:19:57 GMT+0800 (GMT+08:00) --><h3 id="源码获取与编译"><a href="#源码获取与编译" class="headerlink" title="源码获取与编译"></a>源码获取与编译</h3><ol><li>直接从Spark官网获取源码或者从GitHub获取<br><img src="/assets/blogImg/2019-04-17-1.png" alt="enter description here"></li></ol><p><img src="/assets/blogImg/2019-04-17-2.png" alt="enter description here"></p><p>下载源码</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">wget https://archive.apache.org/dist/spark/spark-2.4.0/spark-2.4.0.tgz</span><br></pre></td></tr></table></figure><p>解压源码</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">tar -zxf spark-2.4.0.tgz</span><br></pre></td></tr></table></figure><a id="more"></a><ol start="2"><li>Spark源码编译<br>此处不再啰嗦，直接去腾讯课堂，搜索“若泽大数据”即可找到编译视频。</li></ol><h3 id="源码导入IDEA"><a href="#源码导入IDEA" class="headerlink" title="源码导入IDEA"></a>源码导入IDEA</h3><p><img src="/assets/blogImg/2019-04-17-3.png" alt="enter description here"></p><h3 id="运行hive-thriftserver2"><a href="#运行hive-thriftserver2" class="headerlink" title="运行hive-thriftserver2"></a>运行hive-thriftserver2</h3><p>从spark-2.4.0-bin-2.6.0-cdh5.7.0/sbin/start-thriftserver.sh 脚本中找到 hive-thriftserver2 的入口类：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">org.apache.spark.sql.hive.thriftserver.HiveThriftServer2</span><br></pre></td></tr></table></figure><p><img src="/assets/blogImg/2019-04-17-4.png" alt="enter description here"></p><h3 id="配置运行环境"><a href="#配置运行环境" class="headerlink" title="配置运行环境"></a>配置运行环境</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Menu -&gt; Run -&gt; Edit Configurations -&gt; 选择 + -&gt; Application</span><br></pre></td></tr></table></figure><p><img src="/assets/blogImg/2019-04-17-5.png" alt="enter description here"></p><p>-Dspark.master=local[2] 代表使用本地模式运行Spark代码</p><p>运行之前需要做一件很重要的事情，将 hive-thriftserver 这个子项目的pom依赖全部由provided改为compile：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&lt;dependency&gt;</span><br><span class="line">    &lt;groupId&gt;org.eclipse.jetty&lt;/groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;jetty-server&lt;/artifactId&gt;</span><br><span class="line">    &lt;scope&gt;compile&lt;/scope&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br><span class="line">&lt;dependency&gt;</span><br><span class="line">    &lt;groupId&gt;org.eclipse.jetty&lt;/groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;jetty-servlet&lt;/artifactId&gt;</span><br><span class="line">    &lt;scope&gt;compile&lt;/scope&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br></pre></td></tr></table></figure><h3 id="添加运行依赖的jars"><a href="#添加运行依赖的jars" class="headerlink" title="添加运行依赖的jars"></a>添加运行依赖的jars</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Menu -&gt; File -&gt; Project Structure -&gt; Modules -&gt; spark-hive-thriftserver_2.11 -&gt; Dependencies 添加依赖 jars -&gt; &#123;Spark_home&#125;/assembly/target/scala-2.11/jars/</span><br></pre></td></tr></table></figure><p><img src="/assets/blogImg/2019-04-17-6.png" alt="enter description here"></p><h3 id="中间遇到的问题"><a href="#中间遇到的问题" class="headerlink" title="中间遇到的问题"></a>中间遇到的问题</h3><p>问题一</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">spark\sql\hive-thriftserver\src\main\java\org\apache\hive\service\cli\thrift\ThriftCLIService.java</span><br><span class="line"></span><br><span class="line">Error:(52, 75) not found: value TCLIService</span><br><span class="line"></span><br><span class="line">public abstract class ThriftCLIService extends AbstractService implements TCLIService.Iface, Runnable &#123;………..</span><br></pre></td></tr></table></figure><p>解决办法： 在spark\sql\hive-thriftserver\src\gen\java右键中点Mark Directory as -&gt; Sources Root即可</p><p>问题二</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Exception in thread &quot;main&quot; java.lang.NoClassDefFoundError: org/w3c/dom/ElementTraversal  </span><br><span class="line">    at java.lang.ClassLoader.defineClass1(Native Method)</span><br></pre></td></tr></table></figure><p>解决办法：在 hive-thriftserve 子项目的pom文件中添加依赖</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;dependency&gt;</span><br><span class="line">    &lt;groupId&gt;xml-apis&lt;/groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;xml-apis&lt;/artifactId&gt;</span><br><span class="line">    &lt;version&gt;1.4.01&lt;/version&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br></pre></td></tr></table></figure><p>问题三</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">java.net.BindException: Cannot assign requested address: Service &apos;sparkDriver&apos; failed after 16 retries (starting from 0)! Consider explicitly setting the appropriate port for the service &apos;sparkDriver&apos; (for example spark.ui.port for SparkUI) to an available port or increasing spark.port.maxRetries.</span><br></pre></td></tr></table></figure><p>解决办法： 在 /etc/hosts 文件中配置相应的地址映射。</p><h3 id="成功运行"><a href="#成功运行" class="headerlink" title="成功运行"></a>成功运行</h3><p>在 HiveThriftServer2 中打断点进行调试源码即可。</p><p>打一个断点如下所示：<br><img src="/assets/blogImg/2019-04-17-7.png" alt="enter description here"><br>就能看到断点所打印出来的信息。</p><!-- rebuild by neat -->]]></content>
    
    <summary type="html">
    
      &lt;!-- build time:Fri Jun 14 2019 16:19:57 GMT+0800 (GMT+08:00) --&gt;&lt;h3 id=&quot;源码获取与编译&quot;&gt;&lt;a href=&quot;#源码获取与编译&quot; class=&quot;headerlink&quot; title=&quot;源码获取与编译&quot;&gt;&lt;/a&gt;源码获取与编译&lt;/h3&gt;&lt;ol&gt;&lt;li&gt;直接从Spark官网获取源码或者从GitHub获取&lt;br&gt;&lt;img src=&quot;/assets/blogImg/2019-04-17-1.png&quot; alt=&quot;enter description here&quot;&gt;&lt;/li&gt;&lt;/ol&gt;&lt;p&gt;&lt;img src=&quot;/assets/blogImg/2019-04-17-2.png&quot; alt=&quot;enter description here&quot;&gt;&lt;/p&gt;&lt;p&gt;下载源码&lt;/p&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;wget https://archive.apache.org/dist/spark/spark-2.4.0/spark-2.4.0.tgz&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;p&gt;解压源码&lt;/p&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;tar -zxf spark-2.4.0.tgz&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
      <category term="Spark Other" scheme="http://yoursite.com/categories/Spark-Other/"/>
    
    
      <category term="spark" scheme="http://yoursite.com/tags/spark/"/>
    
      <category term="高级" scheme="http://yoursite.com/tags/%E9%AB%98%E7%BA%A7/"/>
    
  </entry>
  
  <entry>
    <title>Spark内存管理之三 UnifiedMemoryManager分析</title>
    <link href="http://yoursite.com/2019/04/16/Spark%E5%86%85%E5%AD%98%E7%AE%A1%E7%90%86%E4%B9%8B%E4%B8%89%20UnifiedMemoryManager%E5%88%86%E6%9E%90/"/>
    <id>http://yoursite.com/2019/04/16/Spark内存管理之三 UnifiedMemoryManager分析/</id>
    <published>2019-04-15T16:00:00.000Z</published>
    <updated>2019-06-14T07:03:12.881Z</updated>
    
    <content type="html"><![CDATA[<!-- build time:Fri Jun 14 2019 16:19:57 GMT+0800 (GMT+08:00) --><h3 id="acquireExecutionMemory方法"><a href="#acquireExecutionMemory方法" class="headerlink" title="acquireExecutionMemory方法"></a>acquireExecutionMemory方法</h3><p>UnifiedMemoryManager中的accquireExecutionMemory方法：</p><p><img src="/assets/blogImg/2019-04-16内存管理1.png" alt="enter description here"></p><p>当前的任务尝试从executor中<font size="3"><strong>获取numBytes这么大的内存</strong></font></p><p>该方法直接向ExecutionMemoryPool索要所需内存，索要内存有以下几个关注点：</p><ul><li>当ExecutionMemory 内存充足，则不会触发向Storage申请内存</li><li>每个Task能够被使用的内存是被限制的</li><li>索要内存的大小</li></ul><p>我们通过源码来进行分析<br><a id="more"></a><br><strong><code>UnifiedMemoryManager.scala中</code></strong><br><img src="/assets/blogImg/2019-04-16内存管理2.png" alt="enter description here"></p><p>我们点进去后会发现，会调用ExecutionMemoryPool.acquireMemory()方法</p><p><strong><code>ExecutionMemoryPool.scala中</code></strong></p><p><img src="/assets/blogImg/2019-04-16内存管理3.png" alt="enter description here"></p><p>我们可以发现每Task能够被使用的内存被限制在：</p><p>poolSize / (2 * numActiveTasks) ~ maxPoolSize / numActiveTasks 之间</p><p>val maxMemoryPerTask = maxPoolSize /numActiveTasks</p><p>val minMemoryPerTask = poolSize / (2 * numActiveTasks)</p><p><strong><code>UnifiedMemoryManager.scala中</code></strong></p><p><img src="/assets/blogImg/2019-04-16内存管理4.png" alt="enter description here"></p><p>其中maxPoolSize = maxMemory - math.min(storageMemoryUsed, storageRegionSize)</p><p>maxMemory = storage + execution的最大内存</p><p>poolSize = 当前这个pool的大小</p><p>maxPoolSize = execution pool的最大内存</p><p><strong><code>UnifiedMemoryManager.scala中</code></strong></p><p><img src="/assets/blogImg/2019-04-16内存管理5.png" alt="enter description here"></p><p>从上述代码中我们可以知道索要内存的大小：</p><p>val memoryReclaimableFromStorage=math.max(storageMemoryPool.memoryFree, storageMemoryPool.poolSize -storageRegionSize)</p><p>取决于StorageMemoryPool的剩余内存和 storageMemoryPool 从ExecutionMemory借来的内存哪个大，取最大的那个，作为可以重新归还的最大内存</p><p>用公式表达出来就是这一个样子：</p><p>ExecutionMemory 能借到的最大内存 = StorageMemory 借的内存 + StorageMemory 空闲内存</p><p><strong>注意：</strong>如果实际需要的小于能够借到的最大值，则以实际需要值为准</p><p>能回收的内存大小为：</p><p>val spaceToReclaim =storageMemoryPool.freeSpaceToShrinkPool ( math.min(extraMemoryNeeded,memoryReclaimableFromStorage))</p><h3 id="ExecutionMemoryPool-acquireMemory-解析"><a href="#ExecutionMemoryPool-acquireMemory-解析" class="headerlink" title="ExecutionMemoryPool.acquireMemory()解析"></a>ExecutionMemoryPool.acquireMemory()解析</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">while (true) &#123;</span><br><span class="line">  val numActiveTasks = memoryForTask.keys.size</span><br><span class="line">  val curMem = memoryForTask(taskAttemptId)</span><br><span class="line">  maybeGrowPool(numBytes - memoryFree)</span><br><span class="line">  val maxPoolSize = computeMaxPoolSize()</span><br><span class="line">  val maxMemoryPerTask = maxPoolSize / numActiveTasks</span><br><span class="line">  val minMemoryPerTask = poolSize / (2 * numActiveTasks)</span><br><span class="line">  val maxToGrant = math.min(numBytes, math.max(0, maxMemoryPerTask - curMem))</span><br><span class="line">  val toGrant = math.min(maxToGrant, memoryFree)</span><br><span class="line">  if (toGrant &lt; numBytes &amp;&amp; curMem + toGrant &lt; minMemoryPerTask) &#123;</span><br><span class="line">    logInfo(s&quot;TID $taskAttemptId waiting for at least 1/2N of $poolName pool to be free&quot;)</span><br><span class="line">    lock.wait()</span><br><span class="line">  &#125; else &#123;</span><br><span class="line">    memoryForTask(taskAttemptId) += toGrant</span><br><span class="line">    return toGrant</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>整体流程解析：</p><p>程序一直处理该task的请求，直到系统判定无法满足该请求或者已经为该请求分配到足够的内存为止；如果当前execution内存池剩余内存不足以满足此次请求时，会向storage部分请求释放出被借走的内存以满足此次请求</p><p>根据此刻execution内存池的总大小maxPoolSize，以及从memoryForTask中统计出的处于active状态的task的个数计算出：</p><p>每个task能够得到的最大内存数 maxMemoryPerTask = maxPoolSize / numActiveTasks</p><p>每个task能够得到的最少内存数 minMemoryPerTask = poolSize /(2 * numActiveTasks)</p><p>根据申请内存的task当前使用的execution内存大小决定分配给该task多少内存，总的内存不能超过maxMemoryPerTask；但是如果execution内存池能够分配的最大内存小于numBytes，并且如果把能够分配的内存分配给当前task，但是该task最终得到的execution内存还是小于minMemoryPerTask时，该task进入等待状态，等其他task申请内存时再将其唤醒，唤醒之后如果此时满足，就会返回能够分配的内存数，并且更新memoryForTask，将该task使用的内存调整为分配后的值</p><font size="3"><strong>一个Task最少需要minMemoryPerTask才能开始执行</strong></font><h3 id="acquireStorageMemory方法"><a href="#acquireStorageMemory方法" class="headerlink" title="acquireStorageMemory方法"></a>acquireStorageMemory方法</h3><p>流程和acquireExecutionMemory类似，当storage的内存不足时，同样会向execution借内存，但区别是当且仅当ExecutionMemory有空闲内存时，StorageMemory 才能借走该内存</p><p><strong><code>UnifiedMemoryManager.scala中</code></strong></p><p><img src="/assets/blogImg/2019-04-16内存管理6.png" alt="enter description here"></p><p>从上述代码中我们可以知道能借到的内存数为：</p><p>val memoryBorrowedFromExecution = Math.min(onHeapExecutionMemoryPool.memoryFree,numBytes)</p><p>所以StorageMemory从ExecutionMemory借走的内存，完全取决于当时ExecutionMemory是不是有空闲内存；借到内存后，storageMemoryPool增加借到的这部分内存，之后同上一样，会调用StorageMemoryPool的acquireMemory()方法</p><h3 id="StorageMemoryPool-acquireMemory"><a href="#StorageMemoryPool-acquireMemory" class="headerlink" title="StorageMemoryPool.acquireMemory"></a>StorageMemoryPool.acquireMemory</h3><p><img src="/assets/blogImg/2019-04-16内存管理7.png" alt="enter description here"></p><p>整体流程解析：</p><p>在申请内存时，如果numBytes大于此刻storage内存池的剩余内存，即if (numBytesToFree &gt; 0)，那么需要storage内存池释放一部分内存以满足申请需求</p><p><strong>注意：</strong>这里的numBytesToFree可以理解为numBytes大小减去Storage内存池剩余大小，大于0，即所需要申请的numBytes大于Storage内存池剩余的内存</p><p>释放内存后如果memoryFree &gt;= numBytes，就会把这部分内存分配给申请内存的task，并且更新storage内存池的使用情况</p><p>同时StorageMemoryPool与ExecutionMemoryPool不同的是，他不会像前者那样分不到资源就进行等待，acquireStorageMemory只会返回一个true或是false，告知内存分配是否成功</p><!-- rebuild by neat -->]]></content>
    
    <summary type="html">
    
      &lt;!-- build time:Fri Jun 14 2019 16:19:57 GMT+0800 (GMT+08:00) --&gt;&lt;h3 id=&quot;acquireExecutionMemory方法&quot;&gt;&lt;a href=&quot;#acquireExecutionMemory方法&quot; class=&quot;headerlink&quot; title=&quot;acquireExecutionMemory方法&quot;&gt;&lt;/a&gt;acquireExecutionMemory方法&lt;/h3&gt;&lt;p&gt;UnifiedMemoryManager中的accquireExecutionMemory方法：&lt;/p&gt;&lt;p&gt;&lt;img src=&quot;/assets/blogImg/2019-04-16内存管理1.png&quot; alt=&quot;enter description here&quot;&gt;&lt;/p&gt;&lt;p&gt;当前的任务尝试从executor中&lt;font size=&quot;3&quot;&gt;&lt;strong&gt;获取numBytes这么大的内存&lt;/strong&gt;&lt;/font&gt;&lt;/p&gt;&lt;p&gt;该方法直接向ExecutionMemoryPool索要所需内存，索要内存有以下几个关注点：&lt;/p&gt;&lt;ul&gt;&lt;li&gt;当ExecutionMemory 内存充足，则不会触发向Storage申请内存&lt;/li&gt;&lt;li&gt;每个Task能够被使用的内存是被限制的&lt;/li&gt;&lt;li&gt;索要内存的大小&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;我们通过源码来进行分析&lt;br&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="Spark Other" scheme="http://yoursite.com/categories/Spark-Other/"/>
    
    
      <category term="spark" scheme="http://yoursite.com/tags/spark/"/>
    
      <category term="高级" scheme="http://yoursite.com/tags/%E9%AB%98%E7%BA%A7/"/>
    
  </entry>
  
  <entry>
    <title>Spark内存管理之二 统一内存管理及设计理念</title>
    <link href="http://yoursite.com/2019/04/10/Spark%E5%86%85%E5%AD%98%E7%AE%A1%E7%90%86%E4%B9%8B%E4%BA%8C%20%E7%BB%9F%E4%B8%80%E5%86%85%E5%AD%98%E7%AE%A1%E7%90%86%E5%8F%8A%E8%AE%BE%E8%AE%A1%E7%90%86%E5%BF%B5/"/>
    <id>http://yoursite.com/2019/04/10/Spark内存管理之二 统一内存管理及设计理念/</id>
    <published>2019-04-09T16:00:00.000Z</published>
    <updated>2019-06-14T07:04:48.862Z</updated>
    
    <content type="html"><![CDATA[<!-- build time:Fri Jun 14 2019 16:19:57 GMT+0800 (GMT+08:00) --><h3 id="堆内内存"><a href="#堆内内存" class="headerlink" title="堆内内存"></a>堆内内存</h3><p>Spark 1.6之后引入的统一内存管理机制，与静态内存管理的区别在于Storage和Execution共享同一块内存空间，可以动态占用对方的空闲区域</p><p><img src="/assets/blogImg/2019-04-10-内存管理1.png" alt="enter description here"></p><p>其中最重要的优化在于动态占用机制，其规则如下：</p><ul><li>设定基本的Storage内存和Execution内存区域（spark.storage.storageFraction参数），该设定确定了双方各自拥有的空间的范围</li><li>双方的空间都不足时，则存储到硬盘，若己方空间不足而对方空余时，可借用对方的空间（存储空间不足是指不足以放下一个完整的 Block）</li><li>Execution的空间被对方占用后，可让对方将占用的部分转存到硬盘，然后”归还”借用的空间</li><li>Storage的空间被对方占用后，无法让对方”归还”，因为需要考虑 Shuffle过程中的很多因素，实现起来较为复杂<a id="more"></a><h3 id="动态内存占用机制"><a href="#动态内存占用机制" class="headerlink" title="动态内存占用机制"></a>动态内存占用机制</h3></li></ul><p>动态占用机制如下图所示：</p><p><img src="/assets/blogImg/2019-04-10-内存管理2.png" alt="enter description here"></p><p>凭借统一内存管理机制，Spark 在一定程度上提高了堆内和堆外内存资源的利用率，降低了开发者维护 Spark 内存的难度，但并不意味着开发者可以高枕无忧</p><p>譬如：如果Storage的空间太大或者说缓存的数据过多，反而会导致频繁的全量垃圾回收，降低任务执行时的性能，因为缓存的 RDD 数据通常都是长期驻留内存的。所以要想充分发挥 Spark 的性能，需要开发者进一步了解存储内存和执行内存各自的管理方式和实现原理</p><h3 id="堆外内存"><a href="#堆外内存" class="headerlink" title="堆外内存"></a>堆外内存</h3><p>如下图所示，相较于静态内存管理，引入了动态占用机制</p><p><img src="/assets/blogImg/2019-04-10-内存管理3.png" alt="enter description here"></p><h3 id="计算公式"><a href="#计算公式" class="headerlink" title="计算公式"></a>计算公式</h3><p>spark从1.6版本以后，默认的内存管理方式就调整为统一内存管理模式</p><p>由UnifiedMemoryManager实现</p><p>Unified MemoryManagement模型，重点是打破运行内存和存储内存之间的界限，使spark在运行时，不同用途的内存之间可以实现互相的拆借</p><h3 id="Reserved-Memory"><a href="#Reserved-Memory" class="headerlink" title="Reserved Memory"></a>Reserved Memory</h3><p>这部分内存是预留给系统使用,在1.6.1默认为300MB，这一部分内存不计算在Execution和Storage中；可通过spark.testing.reservedMemory进行设置；然后把实际可用内存减去这个reservedMemor得到usableMemory</p><p>ExecutionMemory 和 StorageMemory 会共享usableMemory * spark.memory.fraction(默认0.75)</p><font color="red" size="3"><b>注意：</b></font><ul><li>在Spark 1.6.1 中spark.memory.fraction默认为0.75</li><li>在Spark 2.2.0 中spark.memory.fraction默认为0.6</li></ul><h3 id="User-Memory"><a href="#User-Memory" class="headerlink" title="User Memory"></a>User Memory</h3><p>分配Spark Memory剩余的内存，用户可以根据需要使用</p><p>在Spark 1.6.1中，默认占(Java Heap - Reserved Memory) * 0.25</p><p>在Spark 2.2.0中，默认占(Java Heap - Reserved Memory) * 0.4</p><h3 id="Spark-Memory"><a href="#Spark-Memory" class="headerlink" title="Spark Memory"></a>Spark Memory</h3><p>计算方式为：<code>(Java Heap – ReservedMemory) * spark.memory.fraction</code></p><p>在Spark 1.6.1中，默认为(Java Heap - 300M) * 0.75</p><p>在Spark 2.2.0中，默认为(Java Heap - 300M) * 0.6</p><p>Spark Memory又分为Storage Memory和Execution Memory两部分</p><p>两个边界由spark.memory.storageFraction设定，默认为0.5</p><h3 id="对比"><a href="#对比" class="headerlink" title="对比"></a>对比</h3><p>相对于静态内存模型（即Storage和Execution相互隔离、彼此不可拆借），动态内存实现了存储和计算内存的动态拆借：</p><ul><li>当计算内存超了，它会从空闲的存储内存中借一部分内存使用</li><li>存储内存不够用的时候，也会向空闲的计算内存中拆借</li></ul><p>值得注意的地方是：</p><ul><li>被借走用来执行运算的内存，在执行完任务之前是不会释放内存的</li><li>通俗的讲，运行任务会借存储的内存，但是它直到执行完以后才能归还内存</li></ul><h3 id="和动态内存相关的参数"><a href="#和动态内存相关的参数" class="headerlink" title="和动态内存相关的参数"></a>和动态内存相关的参数</h3><ul><li><p>spark.memory.fraction</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">Spark 1.6.1 默认0.75，Spark 2.2.0 默认0.6 </span><br><span class="line">这个参数用来配置存储和计算内存占整个可用内存的比例 </span><br><span class="line">这个参数设置的越低，也就是存储和计算内存占可用的比例越低，就越可能频繁的发生内存的释放（将内存中的数据写磁盘或者直接丢弃掉） </span><br><span class="line">反之，如果这个参数越高，发生释放内存的可能性就越小 </span><br><span class="line">这个参数的目的是在jvm中留下一部分空间用来保存spark内部数据，用户数据结构，并且防止对数据的错误预估可能造成OOM的风险，这就是Other部分</span><br></pre></td></tr></table></figure></li><li><p>spark.memory.storageFraction</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">默认 0.5；在统一内存中存储内存所占的比例，默认是0.5，如果使用的存储内存超过了这个范围，缓存的数据会被驱赶</span><br></pre></td></tr></table></figure></li><li><p>spark.memory.useLegacyMode</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">默认false；设置是否使用saprk1.5及以前遗留的内存管理模型，即静态内存模型，前面的文章介绍过这个，主要是设置以下几个参数：</span><br><span class="line">spark.storage.memoryFraction</span><br><span class="line">spark.storage.safetyFraction</span><br><span class="line">spark.storage.unrollFraction</span><br><span class="line">spark.shuffle.memoryFraction</span><br><span class="line">spark.shuffle.safetyFraction</span><br></pre></td></tr></table></figure></li></ul><h3 id="动态内存设计中的取舍"><a href="#动态内存设计中的取舍" class="headerlink" title="动态内存设计中的取舍"></a>动态内存设计中的取舍</h3><p>因为内存可以被Execution和Storage拆借，我们必须明确在这种机制下，当内存压力上升的时候，该如何进行取舍？</p><p>从三个角度进行分析：</p><ul><li>倾向于优先释放计算内存</li><li>倾向于优先释放存储内存</li><li>不偏不倚，平等竞争</li></ul><h4 id="释放内存的代价"><a href="#释放内存的代价" class="headerlink" title="释放内存的代价"></a>释放内存的代价</h4><p>释放存储内存的代价取决于Storage Level.：</p><ul><li>如果数据的存储level是MEMORY_ONLY的话代价最高，因为当你释放在内存中的数据的时候，你下次再复用的话只能重新计算了</li><li>如果数据的存储level是MEMORY_AND_DIS_SER的时候，释放内存的代价最低，因为这种方式，当内存不够的时候，它会将数据序列化后放在磁盘上，避免复用的时候再计算，唯一的开销在I/O</li></ul><p><strong>综述：</strong></p><p>释放计算内存的代价不是很显而易见：</p><ul><li>这里没有复用数据重计算的代价，因为计算内存中的任务数据会被移到硬盘，最后再归并起来（后面会有文章介绍到这点）</li><li>最近的spark版本将计算的中间数据进行压缩使得序列化的代价降到了最低</li></ul><p>值得注意的是：</p><ul><li>移到硬盘的数据总会再重新读回来</li><li>从存储内存移除的数据也许不会被用到，所以当没有重新计算的风险时，释放计算的内存要比释放存储内存的代价更高（假使计算内存部分刚好用于计算任务的时候）</li></ul><h4 id="实现复杂度"><a href="#实现复杂度" class="headerlink" title="实现复杂度"></a>实现复杂度</h4><ul><li>实现释放存储内存的策略很简单：我们只需要用目前的内存释放策略释放掉存储内存中的数据就好了</li><li>实现释放计算内存却相对来说很复杂</li></ul><p>这里有2个释放计算内存的思路：</p><ul><li>当运行任务要拆借存储内存的时候，给所有这些任务注册一个回调函数以便日后调这个函数来回收内存</li><li>协同投票来进行内存的释放</li></ul><p>值得我们注意的一个地方是，以上无论哪种方式，都需要考虑一种特殊情况：</p><ul><li>即如果我要释放正在运行的计算任务的内存，同时我们想要cache到存储内存的一部分数据恰巧是由这个计算任务产生的</li><li>此时，如果我们现在释放掉正在运行的任务的计算内存，就需要考虑在这种环境下会造成的饥饿情况：即生成cache的数据的计算任务没有足够的内存空间来跑出cache的数据，而一直处于饥饿状态（因为计算内存已经不够了，再释放计算内存更加不可取）</li><li><p>此外，我们还需要考虑：一旦我们释放掉计算内存，那么那些需要cache的数据应该怎么办？有2种方案：</p><ol><li>最简单的方式就是等待，直到计算内存有足够的空闲，但是这样就可能会造成死锁，尤其是当新的数据块依赖于之前的计算内存中的数据块的时候</li><li>另一个可选的操作就是丢掉那些最新的正准备写入到磁盘中的块并且一旦当计算内存够了又马上加载回来。为了避免总是丢掉那些等待中的块，我们可以设置一个小的内存空间(比如堆内存的5%)去确保内存中至少有一定的比例的的数据块</li></ol></li></ul><p><strong>综述：</strong></p><p>所给的两种方法都会增加额外的复杂度，这两种方式在第一次的实现中都被排除了</p><p>综上目前看来，释放掉存储内存中的计算任务在实现上比较繁琐，目前暂不考虑</p><p>即计算内存借了存储内存用来计算任务，然后释放，这种不考虑；计算内存借来内存之后，是可以不还的</p><h3 id="结论："><a href="#结论：" class="headerlink" title="结论："></a>结论：</h3><p>我们倾向于<font color="red">优先释放掉存储内存</font></p><p>即如果存储内存拆借了计算内存，当计算内存需要进行计算并且内存空间不足的时候，<font color="red">优先把计算内存中这部分被用来存储的内存释放掉</font></p><h3 id="可选设计"><a href="#可选设计" class="headerlink" title="可选设计"></a>可选设计</h3><h4 id="1-设计方案"><a href="#1-设计方案" class="headerlink" title="1.设计方案"></a><font size="4"><b>1.设计方案</b></font></h4><p>结合我们前面的描述，针对在内存压力下释放存储内存有以下几个可选设计：</p><ul><li><p>设计1：释放存储内存数据块，完全平滑</p><p>计算和存储内存共享一片统一的区域，没有进行统一的划分</p><ol><li>内存压力上升，优先释放掉存储内存部分中的数据</li><li>如果压力没有缓解，开始将计算内存中运行的任务数据进行溢写磁盘</li></ol></li><li><p>设计2：释放存储内存数据块，静态存储空间预留，存储空间的大小是定死的</p><p>这种设计和1设计很像，不同的是会专门划分一个预留存储内存区域：在这个内存区域内，存储内存不会被释放，只有当存储内存超出这个预留区域，才会被释放（即超过50%了就被释放，当然50%为默认值）。这个参数由spark.memory.storageFraction（默认值为0.5，即计算和存储内存的分割线）配置</p></li><li><p>设计3：释放存储内存数据块，动态存储空间预留</p><p>这种设计于设计2很相似，但是存储空间的那一部分区域不再是静态设置的了，而是动态分配；这样设置带来的不同是计算内存可以尽可能借走存储内存中可用的部分，因为存储内存是动态分配的</p></li></ul><p><strong>结论：最终采用的的是设计3</strong></p><h4 id="2-各个方案的优劣"><a href="#2-各个方案的优劣" class="headerlink" title="2.各个方案的优劣"></a><font size="4"><b>2.各个方案的优劣</b></font></h4><ul><li><p>设计1被拒绝的原因</p><p>设计1不适合那些对cache内存重度依赖的saprk任务，因为设计1中只要内存压力上升就释放存储内存</p></li><li><p>设计2被拒绝的原因</p><p>设计2在很多情况下需要用户去设置存储内存中那部分最小的区域<br>另外无论我们设置一个具体值，只要它非0，那么计算内存最终也会达到一个上限，比如，如果我们将存储内存设置为0.6，那么有效的执行内存就是：</p><ul><li>Spark 1.6.1 可用内存0.40.75</li><li><p>Spark 2.2.0 可用内存0.40.6</p><p>那么如果用户没有cache数据，或是cache的数据达不到设置的0.6，那么这种情况就又回到了静态内存模型那种情况，并没有改善什么</p></li></ul></li><li><p>最终选择设计3的原因</p><p>设计3就避免了2中的问题只要存储内存有空余的情况，那么计算内存就可以借用</p><p>需要关注的问题是：</p><ul><li>当计算内存已经使用了存储内存中的所有可用内存但是又需要cache数据的时候应该怎么处理</li><li>最早的版本中直接释放最新的block来避免引入执行驱赶策略（eviction策略，上述章节中有介绍）的复杂性</li></ul></li></ul><font size="4"><b>设计3是唯一一个同时满足下列条件的：</b></font><ol><li>存储内存没有上限</li><li>计算内存没有上限</li><li>保障了存储空间有一个小的保留区域</li></ol><!-- rebuild by neat -->]]></content>
    
    <summary type="html">
    
      &lt;!-- build time:Fri Jun 14 2019 16:19:57 GMT+0800 (GMT+08:00) --&gt;&lt;h3 id=&quot;堆内内存&quot;&gt;&lt;a href=&quot;#堆内内存&quot; class=&quot;headerlink&quot; title=&quot;堆内内存&quot;&gt;&lt;/a&gt;堆内内存&lt;/h3&gt;&lt;p&gt;Spark 1.6之后引入的统一内存管理机制，与静态内存管理的区别在于Storage和Execution共享同一块内存空间，可以动态占用对方的空闲区域&lt;/p&gt;&lt;p&gt;&lt;img src=&quot;/assets/blogImg/2019-04-10-内存管理1.png&quot; alt=&quot;enter description here&quot;&gt;&lt;/p&gt;&lt;p&gt;其中最重要的优化在于动态占用机制，其规则如下：&lt;/p&gt;&lt;ul&gt;&lt;li&gt;设定基本的Storage内存和Execution内存区域（spark.storage.storageFraction参数），该设定确定了双方各自拥有的空间的范围&lt;/li&gt;&lt;li&gt;双方的空间都不足时，则存储到硬盘，若己方空间不足而对方空余时，可借用对方的空间（存储空间不足是指不足以放下一个完整的 Block）&lt;/li&gt;&lt;li&gt;Execution的空间被对方占用后，可让对方将占用的部分转存到硬盘，然后”归还”借用的空间&lt;/li&gt;&lt;li&gt;Storage的空间被对方占用后，无法让对方”归还”，因为需要考虑 Shuffle过程中的很多因素，实现起来较为复杂&lt;/li&gt;&lt;/ul&gt;
    
    </summary>
    
      <category term="Spark Other" scheme="http://yoursite.com/categories/Spark-Other/"/>
    
    
      <category term="spark" scheme="http://yoursite.com/tags/spark/"/>
    
      <category term="高级" scheme="http://yoursite.com/tags/%E9%AB%98%E7%BA%A7/"/>
    
  </entry>
  
  <entry>
    <title>Spark内存管理之一 静态内存管理</title>
    <link href="http://yoursite.com/2019/04/03/Spark%E5%86%85%E5%AD%98%E7%AE%A1%E7%90%86%E4%B9%8B%E4%B8%80%20%E9%9D%99%E6%80%81%E5%86%85%E5%AD%98%E7%AE%A1%E7%90%86/"/>
    <id>http://yoursite.com/2019/04/03/Spark内存管理之一 静态内存管理/</id>
    <published>2019-04-02T16:00:00.000Z</published>
    <updated>2019-06-14T07:42:03.254Z</updated>
    
    <content type="html"><![CDATA[<!-- build time:Fri Jun 14 2019 16:19:57 GMT+0800 (GMT+08:00) --><h3 id="Spark内存管理简介"><a href="#Spark内存管理简介" class="headerlink" title="Spark内存管理简介"></a>Spark内存管理简介</h3><p>Spark从<font color="blue"><strong>1.6</strong></font>开始引入了动态内存管理模式，即执行内存和存储内存之间可以相互抢占</p><p>Spark提供了2种内存分配模式：</p><ul><li>静态内存管理</li><li>统一内存管理</li></ul><p>本系列文章将分别对这两种内存管理模式的优缺点以及设计原理进行分析（主要基于Spark 1.6.1的内存管理进行分析）</p><font color="blue">在本篇文章中，将先对<font size="3" color="red">静态内存管理</font>进行介绍</font><a id="more"></a><h3 id="堆内内存"><a href="#堆内内存" class="headerlink" title="堆内内存"></a>堆内内存</h3><p>在Spark最初采用的静态内存管理机制下，存储内存、执行内存和其它内存的大小在Spark应用程序运行期间均为固定的，但用户可以在应用程序启动前进行配置，堆内内存的分配如下图所示：</p><p><img src="/assets/blogImg/2019-04-03-内存管理1.png" alt="enter description here"></p><p>默认情况下，spark内存管理采用unified模式，如果要开启静态内存管理模式，需要将spark.memory.useLegacyMode参数调为true（默认为false），1.6.1版本的官网配置如下所示：</p><p><img src="/assets/blogImg/2019-04-03-内存管理2.png" alt="enter description here"></p><p>将参数调整为true之后，就会进入到静态内存管理中来，可以通过SparkEnv.scala中发现：</p><p><img src="/assets/blogImg/2019-04-03-内存管理3.png" alt="enter description here"></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">如果spark.memory.useLegacyMode为true，就进入到StaticMemoryManager（静态内存管理）；</span><br><span class="line">如果为false，就进入到UnifiedMemoryManager（统一内存管理）；</span><br><span class="line">同时我们可以发现该参数的默认值为false，即默认情况下就会调用统一内存管理类。</span><br></pre></td></tr></table></figure><h3 id="Execution内存"><a href="#Execution内存" class="headerlink" title="Execution内存"></a>Execution内存</h3><p>####可用的Execution内存</p><p>用于shuffle操作的内存，取决于join、sort、aggregation等过程频繁的IO需要的Buffer临时数据存储</p><p>简单来说，spark在shuffle write的过程中，每个executor会将数据写到该executor的物理磁盘上，下一个stage的task会去上一个stage拉取其所需要处理的数据，并且是边拉取边进行处理的（和MapReduce的拉取合并数据基本一样），这个时候就会用到一个aggregate的数据结构，比如hashmap这种边拉取数据边进行聚合。这部分内存就被称为execution内存</p><p>从StaticMemoryManager.scala中的getMaxExecutionMemory方法中，我们可以发现：</p><p><img src="/assets/blogImg/2019-04-03-内存管理4.png" alt="enter description here"></p><p>每个executor分配给execution的内存为：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">ExecutionMemory = systemMaxMemory * memoryFraction * safetyFraction </span><br><span class="line">默认情况下为：systemMaxMemory * 0.2 * 0.8 = 0.16 * systemMaxMemory </span><br><span class="line">即默认为executor最大可用内存 * 0.16</span><br></pre></td></tr></table></figure><p>Execution内存再运行的时候会被分配给运行在JVM上的task；这里不同的是，分配给每个task的内存并不是固定的，而是动态的；spark不是一上来就分配固定大小的内存块给task，而是允许一个task占据JVM所有execution内存</p><p>每个JVM上的task可以最多申请至多1/N的execution内存，其中N为active task的个数，由spark.executor.cores指定；如果task的申请没有被批准，它会释放一部分内存，并且下次申请的时候，它会申请更小的一部分内存</p><p><strong>注：</strong></p><ul><li>每个Executor单独运行在一个JVM进程中，每个Task则是运行在Executor中的线程</li><li>spark.executor.cores设置的是每个executor的core数量</li><li>task的数量就是partition的数量</li><li>一般来说，一个core设置2~4个partition</li></ul><font color="red" size="3"><b>注意：</b></font> <font color="red"><br>为了防止过多的spilling数据，只有当一个task分配到的内存达到execution内存1/2N的时候才会spill，如果目前空闲的内存达不到1/2N的时候，内存申请会被阻塞直到其它的task spill掉它们的内存；<br><br>如果不这样限制，假设当前一个任务占据了绝大部分内存，那么新来的task会一直往硬盘spill数据，这样就会导致比较严重的I/O问题；而我们做了一定程度的限制，会进行一定程度的阻塞等待，对于频繁的小数据集的I/O会有一定的减缓<br><br>例子：某executor先启动一个task A，并在task B启动前快速占用了所有可用的内存；在B启用之后N变成了2，task B会阻塞直到task A spill，自己可以获得1/2N=1/4的execution内存的时候；而一大task B获取到了1/4的内存，A和B就都有可能spill了<br></font><h3 id="预留内存"><a href="#预留内存" class="headerlink" title="预留内存"></a>预留内存</h3><p>Spark之所以会有一个SafetyFraction这样的参数，是为了避免潜在的OOM。例如，进行计算时，有一个提前未预料到的比较大的数据，会导致计算时间延长甚至OOM，safetyFraction为storage和execution都提供了额外的buffer以防止此类的数据倾斜；这部分内存叫作预留内存</p><p>####Storage内存</p><p>####可用的Storage内存</p><p>该部分内存用作对RDD的缓存（如调用cache、persist等方法），节点间传输的广播变量</p><p>StaticMemoryManager.scala中的getMaxStorageMemory方法发现：</p><p><img src="/assets/blogImg/2019-04-03-内存管理5.png" alt="enter description here"></p><p>最后为每个executor分配到的storage的内存：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">StorageMemory = systemMaxMemory * memoryFraction * safetyFraction </span><br><span class="line">默认情况下为：systemMaxMemory * 0.6 * 0.9 = 0.54 * systemMaxMemory </span><br><span class="line">即默认分配executor最大可用内存的0.54</span><br></pre></td></tr></table></figure><h4 id="预留内存-1"><a href="#预留内存-1" class="headerlink" title="预留内存"></a>预留内存</h4><p>同Execution内存中的预留部分</p><h3 id="Unroll"><a href="#Unroll" class="headerlink" title="Unroll"></a>Unroll</h3><p>Unroll是storage中比较特殊的一部分，它默认占据storage总内存的20%</p><p>BlockManager是spark自己实现的内部分布式文件系统，BlockManager接受数据（可能从本地或者其他节点）的时候是以iterator的形式，并且这些数据是有序列化和非序列化的，因此需要注意以下两点：</p><ul><li>Iterator在物理内存上是不连续的，如果后续spark要把数据装载进内存的话，就需要把这些数据放进一个array（物理上连续）</li><li>另外，序列化数据需要进行展开，如果直接展开序列化的数据，会造成OOM，所以BlockManager会逐渐的展开这个iterator，并逐渐检查内存里是否还有足够的空间用来展开数据放进array里</li></ul><p>StaticMemoryManager.scala中的maxUnrollMemory方法：</p><p><img src="/assets/blogImg/2019-04-03-内存管理6.png" alt="enter description here"></p><p>Unroll的优先级别还是比较高的，它使用的内存空间是可以从storage中借用的，如果在storage中没有现存的数据block，它甚至可以占据整个storage空间；如果storage中有数据block，它可以最大drop掉内存的数据是通过spark.storage.unrollFraction来控制的，通过源码可知这部分的默认值为0.2</p><font color="red" size="3"><b>注意：</b></font> <font color="red"><br>这个20%的空间并不是静态保留的，而是通过drop掉内存中的数据block来分配的（动态的分配过程）；如果unroll失败了，spark会把这部分数据evict到硬盘中去<br></font><h3 id="eviction策略"><a href="#eviction策略" class="headerlink" title="eviction策略"></a>eviction策略</h3><p>在spark技术文档中，eviction一词经常出现，eviction并不是单纯字面上驱逐的意思。说句题外话，spark通常被我们叫做内存计算框架，但是从严格意义上说，spark并不是内存计算的新技术；无论是cache还是persist这类算子，spark在内存安排上，绝大多数用的都是LRU策略（LRU可以说是一种算法，也可以算是一种原则，用来判断如何从Cache中清除对象，而LRU就是“近期最少使用”原则，当Cache溢出时，最近最少使用的对象将被从Cache中清除）。即当内存不够的时候，会evict掉最远使用过的内存数据block；当evict的时候，spark会将该数据块evict到硬盘，而不是单纯的抛弃掉</p><p>无论是storage还是execution的内存空间，当内存区域的空间不够用的时候，spark都会evict数据到硬盘</p><h3 id="Other部分"><a href="#Other部分" class="headerlink" title="Other部分"></a>Other部分</h3><p>这部分的内存用于程序本身运行所需要的内存，以及用户定义的数据结构和创建的对象，此内存由上面两部分：storage、execution决定的，默认为0.2</p><h3 id="堆外内存"><a href="#堆外内存" class="headerlink" title="堆外内存"></a>堆外内存</h3><p>Spark1.6开始引入了Off-heap memory（详见SPARK-11389）</p><p>堆外的空间分配较为简单，只有存储内存和执行内存，如图所示：</p><p><img src="/assets/blogImg/2019-04-03-内存管理7.png" alt="enter description here"></p><p>可用的执行内存和存储内存占用的空间大小直接由参数 spark.memory.storageFraction 决定（默认为0.5），由于堆外内存占用的空间可以被精确计算，所以无需再设定保险区域</p><h3 id="局限性"><a href="#局限性" class="headerlink" title="局限性"></a>局限性</h3><p>在Spark的设计文档中，指出了静态内存管理的局限性：</p><p>没有适用于所有应用的默认配置，通常需要开发人员针对不同的应用进行不同的参数进行配置：比如根据任务的执行逻辑，调整shuffle和storage的内存占比来适应任务的需求</p><p>这样需要开发人员具备较高的spark原理知识</p><p>那些不cache数据的应用在运行的时候只会占用一小部分可用内存，而默认的内存配置中storage就用去了60%，造成了浪费</p><!-- rebuild by neat -->]]></content>
    
    <summary type="html">
    
      &lt;!-- build time:Fri Jun 14 2019 16:19:57 GMT+0800 (GMT+08:00) --&gt;&lt;h3 id=&quot;Spark内存管理简介&quot;&gt;&lt;a href=&quot;#Spark内存管理简介&quot; class=&quot;headerlink&quot; title=&quot;Spark内存管理简介&quot;&gt;&lt;/a&gt;Spark内存管理简介&lt;/h3&gt;&lt;p&gt;Spark从&lt;font color=&quot;blue&quot;&gt;&lt;strong&gt;1.6&lt;/strong&gt;&lt;/font&gt;开始引入了动态内存管理模式，即执行内存和存储内存之间可以相互抢占&lt;/p&gt;&lt;p&gt;Spark提供了2种内存分配模式：&lt;/p&gt;&lt;ul&gt;&lt;li&gt;静态内存管理&lt;/li&gt;&lt;li&gt;统一内存管理&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;本系列文章将分别对这两种内存管理模式的优缺点以及设计原理进行分析（主要基于Spark 1.6.1的内存管理进行分析）&lt;/p&gt;&lt;font color=&quot;blue&quot;&gt;在本篇文章中，将先对&lt;font size=&quot;3&quot; color=&quot;red&quot;&gt;静态内存管理&lt;/font&gt;进行介绍&lt;/font&gt;
    
    </summary>
    
      <category term="Spark Other" scheme="http://yoursite.com/categories/Spark-Other/"/>
    
    
      <category term="spark" scheme="http://yoursite.com/tags/spark/"/>
    
      <category term="高级" scheme="http://yoursite.com/tags/%E9%AB%98%E7%BA%A7/"/>
    
  </entry>
  
  <entry>
    <title>生产Spark Executor Dead快速剖析</title>
    <link href="http://yoursite.com/2019/03/12/%E7%94%9F%E4%BA%A7Spark_Executor_Dead%E5%BF%AB%E9%80%9F%E5%89%96%E6%9E%90/"/>
    <id>http://yoursite.com/2019/03/12/生产Spark_Executor_Dead快速剖析/</id>
    <published>2019-03-11T16:00:00.000Z</published>
    <updated>2019-06-14T06:55:49.836Z</updated>
    
    <content type="html"><![CDATA[<!-- build time:Fri Jun 14 2019 16:19:57 GMT+0800 (GMT+08:00) --><h2 id="问题现象"><a href="#问题现象" class="headerlink" title="问题现象"></a>问题现象</h2><p>通过Spark UI查看Executors，发现存在Executor Dead的情况</p><p><img src="/assets/blogImg/2019-03-12-1.png" alt="enter description here"></p><p>进一步查看dead Executor stderr日志，发现如下报错信息：</p><p><img src="/assets/blogImg/2019-03-12-2.png" alt="enter description here"></p><h2 id="解决过程"><a href="#解决过程" class="headerlink" title="解决过程"></a>解决过程</h2><a id="more"></a> <font color="#FF4500">打开GC日志，配置如下</font><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">--conf &quot;spark.executor.extraJavaOptions= -verbose:gc -XX:+PrintGCDetails -XX:+PrintGCDateStamps&quot;</span><br><span class="line">--conf &quot;spark.driver.extraJavaOptions= -verbose:gc -XX:+PrintGCDetails -XX:+PrintGCDateStamps&quot;</span><br></pre></td></tr></table></figure><font color="#FF4500">打开exeutor gc日志，发现一直在<strong>full gc</strong>，几乎每秒1次，基本处于拒绝服务状态</font><p><img src="//yoursite.com/2019/03/12/生产Spark_Executor_Dead快速剖析/blogImg/2019-03-12-3.png" alt="enter description here"></p><font size="4"><b>至此找到问题原因，executor内存不够导致dead，调大executor内存即可 ，所以排错方法定位很重要！</b></font><!-- rebuild by neat -->]]></content>
    
    <summary type="html">
    
      &lt;!-- build time:Fri Jun 14 2019 16:19:57 GMT+0800 (GMT+08:00) --&gt;&lt;h2 id=&quot;问题现象&quot;&gt;&lt;a href=&quot;#问题现象&quot; class=&quot;headerlink&quot; title=&quot;问题现象&quot;&gt;&lt;/a&gt;问题现象&lt;/h2&gt;&lt;p&gt;通过Spark UI查看Executors，发现存在Executor Dead的情况&lt;/p&gt;&lt;p&gt;&lt;img src=&quot;/assets/blogImg/2019-03-12-1.png&quot; alt=&quot;enter description here&quot;&gt;&lt;/p&gt;&lt;p&gt;进一步查看dead Executor stderr日志，发现如下报错信息：&lt;/p&gt;&lt;p&gt;&lt;img src=&quot;/assets/blogImg/2019-03-12-2.png&quot; alt=&quot;enter description here&quot;&gt;&lt;/p&gt;&lt;h2 id=&quot;解决过程&quot;&gt;&lt;a href=&quot;#解决过程&quot; class=&quot;headerlink&quot; title=&quot;解决过程&quot;&gt;&lt;/a&gt;解决过程&lt;/h2&gt;
    
    </summary>
    
      <category term="Spark Other" scheme="http://yoursite.com/categories/Spark-Other/"/>
    
    
      <category term="spark" scheme="http://yoursite.com/tags/spark/"/>
    
      <category term="高级" scheme="http://yoursite.com/tags/%E9%AB%98%E7%BA%A7/"/>
    
  </entry>
  
  <entry>
    <title>生产Spark Streaming 黑名单过滤案例</title>
    <link href="http://yoursite.com/2019/03/08/%E7%94%9F%E4%BA%A7Spark%20Streaming%20%E9%BB%91%E5%90%8D%E5%8D%95%E8%BF%87%E6%BB%A4%E6%A1%88%E4%BE%8B/"/>
    <id>http://yoursite.com/2019/03/08/生产Spark Streaming 黑名单过滤案例/</id>
    <published>2019-03-07T16:00:00.000Z</published>
    <updated>2019-06-14T07:35:10.045Z</updated>
    
    <content type="html"><![CDATA[<!-- build time:Fri Jun 14 2019 16:19:57 GMT+0800 (GMT+08:00) --><p>测试数据(通过Socket传入)：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">20180808,zs</span><br><span class="line">20180808,ls</span><br><span class="line">20180808,ww</span><br></pre></td></tr></table></figure><p>黑名单列表(生产存在表)：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">zs</span><br><span class="line">ls</span><br></pre></td></tr></table></figure><h3 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h3><ol><li>原始日志可以通过Streaming直接读取成一个DStream</li><li><p>名单通过RDD来模拟一份</p><a id="more"></a><h3 id="逻辑实现"><a href="#逻辑实现" class="headerlink" title="逻辑实现"></a>逻辑实现</h3></li><li><p>将DStream转成以下格式(黑名单只有名字)</p><p><code>(zs,(20180808,zs))(ls,(20180808,ls))(ww,( 20180808,ww))</code></p></li><li><p>将黑名单转成</p><p><code>(zs, true)(ls, true)</code></p></li><li><p>DStram与RDD进行LeftJoin(DStream能与RDD进行Join就是借用的transform算子)</p></li></ol><h3 id="具体代码实现及注释"><a href="#具体代码实现及注释" class="headerlink" title="具体代码实现及注释"></a>具体代码实现及注释</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">package com.soul.spark.Streaming</span><br><span class="line">import org.apache.spark.SparkConf</span><br><span class="line">import org.apache.spark.streaming.&#123;Seconds, StreamingContext&#125;</span><br><span class="line">/**</span><br><span class="line">  * @author soulChun</span><br><span class="line">  * @create 2019-01-10-16:12</span><br><span class="line">  */</span><br><span class="line">object TransformApp &#123;</span><br><span class="line">  def main(args: Array[String]): Unit = &#123;</span><br><span class="line">    val sparkConf = new SparkConf().setAppName(&quot;StatafulFunApp&quot;).setMaster(&quot;local[2]&quot;)</span><br><span class="line">    val ssc = new StreamingContext(sparkConf,Seconds(10))</span><br><span class="line">    //构建黑名单</span><br><span class="line">    val blacks = List(&quot;zs&quot;, &quot;ls&quot;)</span><br><span class="line">    //通过map操作将黑名单结构转换成(zs, true)(ls, true)</span><br><span class="line">    val blackRDD = ssc.sparkContext.parallelize(blacks).map(x =&gt; (x, true))</span><br><span class="line">    val lines = ssc.socketTextStream(&quot;localhost&quot;, 8769)</span><br><span class="line">    //lines (20180808,zs)</span><br><span class="line">    //lines 通过map.split(1)之后取得就是zs,然后加一个x就转成了(zs,(20180808,zs)).就可以和blackRDD进行Join了</span><br><span class="line">    val clicklog = lines.map(x =&gt; (x.split(&quot;,&quot;)(1), x)).transform(rdd =&gt; &#123;</span><br><span class="line">      //Join之后数据结构就变成了(zs,[(20180808,zs),true]),过滤掉第二个元素中的第二个元素等于true的</span><br><span class="line">      rdd.leftOuterJoin(blackRDD).filter(x =&gt; x._2._2.getOrElse(false) != true)</span><br><span class="line">        //我们最后要输出的格式是(20180808,zs)，所以取Join之后的第二个元素中的第一个元素</span><br><span class="line">        .map(x =&gt; x._2._1)</span><br><span class="line">    &#125;)</span><br><span class="line">    ssc.start()</span><br><span class="line">    ssc.awaitTermination()</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>最后输出：<br><img src="/assets/blogImg/2019-03-08-1.png" alt="enter description here"></p><!-- rebuild by neat -->]]></content>
    
    <summary type="html">
    
      &lt;!-- build time:Fri Jun 14 2019 16:19:57 GMT+0800 (GMT+08:00) --&gt;&lt;p&gt;测试数据(通过Socket传入)：&lt;/p&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;20180808,zs&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20180808,ls&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20180808,ww&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;p&gt;黑名单列表(生产存在表)：&lt;/p&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;zs&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;ls&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;h3 id=&quot;思路&quot;&gt;&lt;a href=&quot;#思路&quot; class=&quot;headerlink&quot; title=&quot;思路&quot;&gt;&lt;/a&gt;思路&lt;/h3&gt;&lt;ol&gt;&lt;li&gt;原始日志可以通过Streaming直接读取成一个DStream&lt;/li&gt;&lt;li&gt;&lt;p&gt;名单通过RDD来模拟一份&lt;/p&gt;&lt;/li&gt;&lt;/ol&gt;
    
    </summary>
    
      <category term="Spark Streaming" scheme="http://yoursite.com/categories/Spark-Streaming/"/>
    
    
      <category term="spark" scheme="http://yoursite.com/tags/spark/"/>
    
      <category term="高级" scheme="http://yoursite.com/tags/%E9%AB%98%E7%BA%A7/"/>
    
      <category term="sparkstreaming" scheme="http://yoursite.com/tags/sparkstreaming/"/>
    
  </entry>
  
  <entry>
    <title>刚出炉的3家大数据面试题(含高级),你会吗？</title>
    <link href="http://yoursite.com/2019/03/07/%E5%88%9A%E5%87%BA%E7%82%89%E7%9A%843%E5%AE%B6%E5%A4%A7%E6%95%B0%E6%8D%AE%E9%9D%A2%E8%AF%95%E9%A2%98(%E5%90%AB%E9%AB%98%E7%BA%A7)%E4%BD%A0%E4%BC%9A%E5%90%97/"/>
    <id>http://yoursite.com/2019/03/07/刚出炉的3家大数据面试题(含高级)你会吗/</id>
    <published>2019-03-06T16:00:00.000Z</published>
    <updated>2019-06-14T07:29:48.759Z</updated>
    
    <content type="html"><![CDATA[<!-- build time:Fri Jun 14 2019 16:19:57 GMT+0800 (GMT+08:00) --><a id="more"></a><h3 id="第一家大数据开发的面试题"><a href="#第一家大数据开发的面试题" class="headerlink" title="第一家大数据开发的面试题:"></a>第一家大数据开发的面试题:</h3><p><img src="/assets/blogImg/2019-03-07面试1.png" alt="enter description here"></p><h3 id="第二家大数据开发的面试题"><a href="#第二家大数据开发的面试题" class="headerlink" title="第二家大数据开发的面试题:"></a>第二家大数据开发的面试题:</h3><p><img src="/assets/blogImg/2019-03-07面试2.png" alt="enter description here"></p><h3 id="第三家大数据开发的面试题"><a href="#第三家大数据开发的面试题" class="headerlink" title="第三家大数据开发的面试题:"></a>第三家大数据开发的面试题:</h3><p><img src="/assets/blogImg/2019-03-07面试3.png" alt="enter description here"></p><!-- rebuild by neat -->]]></content>
    
    <summary type="html">
    
      &lt;!-- build time:Fri Jun 14 2019 16:19:57 GMT+0800 (GMT+08:00) --&gt;
    
    </summary>
    
      <category term="面试真题" scheme="http://yoursite.com/categories/%E9%9D%A2%E8%AF%95%E7%9C%9F%E9%A2%98/"/>
    
    
      <category term="大数据面试题" scheme="http://yoursite.com/tags/%E5%A4%A7%E6%95%B0%E6%8D%AE%E9%9D%A2%E8%AF%95%E9%A2%98/"/>
    
  </entry>
  
</feed>
